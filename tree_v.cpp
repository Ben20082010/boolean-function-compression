//use c++11
//HAS RECEIVED PERMISSION from MAX, to return vector in the overload functions
//in term:: MSB(xmsb).x4.x3.x2.x1.LSB(x0)

#define bitsize 15
#define startwithPI false
#define outputToFile false

#include <string>
#include <vector>
#include <map>
#include <stdlib.h>

//for debug
#include <chrono>
#include <math.h>
#include <iostream>
#include <bitset>




#define wdlength 64
#define wdMax 0xFFFFFFFFFFFFFFFF
typedef uint64_t wd;
typedef std::vector<wd> term;

// #define popcount(x) __builtin_popcountl(x)

term operator~(const term& v1);
term operator&(const term& v1,const term& v2);
term operator|(const term& v1,const term& v2);
term operator^(const term& v1,const term& v2);


struct bdnode{
    std::string val;
    bdnode* left;
    bdnode* right;

};

struct implicant{
  term mask;
  term minterm;
};

template <class T>
bool notRepeated(std::vector<T>& v, T a);
void printPrime(const term& mask,const term& minterm, int len=bitsize, char end='\n');
inline int popcount(uint64_t x);
inline int popcount(const term& v);
inline int leading1(uint64_t x);
bool isPower2(const term& v);


//debug func
void printMinterm(const term& minterm);


struct intermittent{
    int max1s;
    // term basemask;
    term baseNot;
    std::vector<std::vector<term>> minterms;
    std::vector<std::vector<bool>> used;

    void construct(const term& mask,int len){
      // basemask=mask;
      max1s=len;
      baseNot=~mask;

      for(int i=0;i<=max1s;i++){
        minterms.push_back(std::vector<term>());
        used.push_back(std::vector<bool>());
      }
      // std::cout << "(((((((((((((((((((((/* message */)))))))))))))))))))))" << '\n';
      // printMinterm(baseNot);
    };

    void add(term minterm) {
      minterm=minterm&baseNot; // filter minterm[digit] to 0, when mask[digit]=1 (is "-")
      int pcount=popcount(minterm);

      if(notRepeated(minterms[pcount],minterm)){
        used[pcount].push_back(false);
      }

      // minterms[pcount].push_back(minterm);
      // used[pcount].push_back(false);


    };
    void compareAll(term basemask, std::vector<implicant>& primes,std::map<term,intermittent*>& itmList){
      std::map<term,intermittent*>::iterator listLb;
      ///////////
      // for(int i=0;i<minterms.size();i++){
      //   std::cout << i<<" ones | ";
      //   printV(minterms[i]);
      // }
      /////////////////
      for(int ones=0;ones<minterms.size()-1;ones++){
        //compare between level
          for(int i=0;i<minterms[ones].size();i++){
            for(int j=0;j<minterms[ones+1].size();j++){
              //i is in lower 1s group [0...l-2], j is higher 1s group [1...l-1]
              term mask=minterms[ones][i] ^ minterms[ones+1][j];
              // std::cout << "mask is "<<mask <<" | "<<!(mask & (mask-1))<< '\n';
              if(isPower2(mask)){ //check if mask is power of 2, *0 will always be false
                // i&j can be simplifted
                used[ones][i]=true;
                used[ones+1][j]=true;
                // std::cout << "find" << '\n';

                /// add mask & data
                mask=basemask|mask;
                listLb=itmList.lower_bound(mask);
                  //BUG:work for empty map?
                if(listLb!=itmList.end() && !(itmList.key_comp()(mask,listLb->first))){ //from https://stackoverflow.com/questions/97050/stdmap-insert-or-stdmap-find
                  //mask exist, apped to struct
                  listLb->second->add(minterms[ones][i]);
                  // std::cout << "b1" << '\n';
                  // std::cout << "mask used "<<std::bitset<8>(mask) << '\n';

                }else{
                  // std::cout <<"mask is \n";
                  // printMinterm(mask);
                  //mask not exist, make new
                  intermittent* itmPtr=new intermittent();
                  itmPtr->construct(mask,max1s-1);
                  itmPtr->add(minterms[ones][i]);
                  itmList.insert(listLb,std::map<term,intermittent*>::value_type(mask,itmPtr));
                  ////////
                  // std::cout << "b2" << '\n';
                  // auto xxx1=itmList.rbegin()->second->minterms;
                  // auto xxx2=itmList.rbegin()->first;

                  // for(int ii=0;ii<xxx1.size();ii++){
                  //   for(int jj=0;jj<xxx1[ii].size();jj++){
                  //     printPrime(xxx2,xxx1[ii][jj]);
                  //   }
                  // }
                  ////////
                }

                //// CHECK/BUG: CAN SAME MASK SHOW MUTIPLE TIMES? => YES!, using map

              }
            }
          }
      }

      // std::cout << "start xxxxxxxxxxxx all" << '\n';


      // move unsed case to prime implicant
      std::vector<term> v;
      for(int ones=0;ones<used.size();ones++){
        for(int i=0;i<used[ones].size();i++){
          if(!used[ones][i] && notRepeated(v,minterms[ones][i])){
            /////
            // std::cout << "term: " << '\n';
            printPrime(basemask,minterms[ones][i]);

            //////
            primes.push_back((implicant){basemask,minterms[ones][i]});
          }
        }
      }
    }
};

struct bitCount{

  int space;//space for count of single bit, (least to avoid overflow)
  int size;//size of input vector
  std::vector<wd> maskcount;//can be optimsed, current method waste higher bit when length is small, merge term for large operation
  std::vector<wd> termcount;

  void construct(const std::vector<implicant>& in) {
    // std::cout << "****require 64 bit long******" << '\n';
    size=in.size();
    space=leading1(size);//leading 1 from RHS
    // std::cout << "space is "<<space << '\n';

    //set up correct mask
    wd mask=1;
    for(int i=space;i<wdlength;){
      mask=mask|(mask<<(i));
      i=i*2;
    }
    // std::cout << "mask is "<<std::bitset<64>(mask) << '\n';

    int maxZone=in[0].mask.size();
    maskcount.reserve(space*maxZone);
    termcount.reserve(space*maxZone);

    term tm=in[0].mask;
    term tr=in[0].minterm;
    //1st
    for(int z=0;z<maxZone;++z){
      for(int j=0;j<space;j++){
        maskcount.push_back( (tm[z]>>j) & (mask) );
        termcount.push_back( (tr[z]>>j) & (mask) );
        // std::cout << maskcount[j] << '\n';
      }

    }
    // std::cout << "first maskcount is" << '\n';
    // for(int i=0;i<maskcount.size();i++){
    //   std::cout << std::bitset<64>(maskcount[i]) << '\n';
    // }
    //after 1
    for(int i=1;i<in.size();i++){
      tm=in[i].mask;
      tr=in[i].minterm;
      for(int z=0;z<maxZone;++z){
        for(int j=0;j<space;j++){
          maskcount[j+z*space]+= ((tm[z]>>j) & (mask));
          termcount[j+z*space]+= ((tr[z]>>j) & (mask));
        }
      }
      // std::cout << i<<" maskcount is" << '\n';
      // for(int xx=0;xx<maskcount.size();xx++){
      //   std::cout << std::bitset<64>(mask[xx]) << '\n';
      // }
      // std::cout << '\n';
    }
  }

  unsigned int getMask(int digit){
    int zone=digit/wdlength;
    digit=digit%wdlength;
    int shift=digit/space*space;
    return (maskcount[zone*space+digit%space]>>shift) &  ((1ULL<<(space))-1);//(((long)1<<(space+1))-1) produce a mask of 1 [from LSB to space], x^(space+1)-1
  }

  unsigned int getTermLeast(int digit){
    int zone=digit/wdlength;
    digit=digit%wdlength;
    int shift=digit/space*space;

    int ones=(termcount[zone*space+digit%space]>>shift) &  ((1ULL<<(space))-1);
    // std::cout << size << '\n';
    if(ones>size/2){

      // std::cout << "return A" <<(size-ones)<< '\n';
      return size-ones;
    }else{
      // std::cout << "return B" <<ones<< '\n';

      return ones;
    }
  }

};


typedef bdnode* bdt;
typedef std::map<term,intermittent*> ItmList;
typedef std::map<term, std::vector<implicant>> PIchart;


//DEBUG FUNC
  template <class T>
  void printV(std::vector<T>& v, char end='\n', char m=' ');


  template <class T>
  void printBit(std::vector<T>& v, char end='\n', char m=' ');

  template <class T>
  int find(std::vector<T>& v, T a);

  void genInput(std::vector<wd>& in,int digit,std::vector<std::string>& out);
  void printTree(bdt t, int depth);
  void printTreeRec( bdnode*  t, int depth,std::vector<std::string>& out);
  void testCorrectness(bdt rt, const std::vector<wd>& correct);
  int getTreeNodeNum(bdnode*  t);
  void getTreeNodeNumRec(bdnode*  t,int& count);
  std::string getMinterm(wd i);
  double getAss1NodeNum();

  void appedPrime(std::string str, std::vector<implicant>& primes,bool fval=true);

  void deltree(bdt t);

//END DEBUG FUNC

/// do not alter these two function declarations
bdt buildcompactbdt(const std::vector<std::string>& fvalues);
std::string evalcompactbdt(bdt t, const std::string& input);

bdt newnode(std::string val=std::string(), bdt left=NULL, bdt right=NULL );
void recTreeConstructor(bdnode* node,std::vector<implicant>& primes, const term& nodeRemains);
// inline int uint64_tt(long a);
void genMinterm(const std::vector<std::string>& fvalues, std::vector<term>& minterms);
bool is1(char c);




// template <typename T>
// std::ostream& operator << (std::ostream &o, const implicant &a){
//   term printmask=1;
//   for(int i=0;i<(inputLen);++i){
//     if(a.mask&(printmask<<(i))){
//       o<<'-';
//     }else{
//       if(a.minterm&(printmask<<(i))){
//         o<<'1';
//       }else{
//         o<<'0';
//       }
//     }
//   }
//   return o;
// }

/// you can define and use additional functions
/// for the implementation of buildcompactbdt and evalcompactbdt

/// add here the declarations (not the implementation)
/// for any other functions you wish to define and use



int main(){


  std::vector<wd> input;
input={12842, 6629, 2897, 14669, 14725, 3197, 12123, 4323, 14752, 4304, 12288, 14471, 14505, 12472, 1978, 465, 4554, 2711, 5691, 2955, 12783, 15944, 3449, 12553, 2969, 1750, 10499, 10380, 7532, 237, 7347, 14224, 1214, 11329, 13571, 3802, 12211, 901, 10590, 14610, 4971, 7846, 7793, 10774, 1856, 5302, 12399, 3256, 14991, 12775, 13627, 4980, 10923, 15265, 13733, 13211, 1056, 5538, 2262, 7194, 3689, 15194, 13760, 1439, 6186, 5589, 14714, 3015, 2149, 1863, 10962, 12504, 3820, 1516, 4935, 6644, 14880, 5094, 13785, 7465, 13066, 11933, 13716, 5019, 11877, 4139, 13509, 1389, 9970, 15975, 2925, 9733, 10336, 2610, 5595, 14054, 2004, 8648, 11407, 1970, 6307, 14240, 1037, 887, 8022, 6767, 7782, 12823, 14808, 5489, 1964, 9849, 4073, 10905, 3022, 15348, 8328, 10625, 1578, 12919, 4254, 13979, 967, 3207, 3787, 12682, 8121, 13282, 2136, 6233, 13463, 7983, 26, 7422, 12202, 4756, 7011, 14155, 6136, 14893, 5648, 4759, 13737, 9634, 1981, 13969, 1823, 10425, 7606, 3931, 12958, 2551, 14867, 12821, 7419, 477, 15556, 13938, 14154, 10891, 5275, 6986, 10341, 6083, 6883, 476, 11022, 4530, 1529, 4704, 596, 208, 15941, 7476, 7689, 10845, 1335, 241, 2347, 3415, 10837, 8825, 4750, 8465, 1019, 8371, 874, 3321, 10337, 10707, 5571, 5183, 381, 9825, 3370, 12381, 13300, 3839, 15934, 13312, 1976, 14413, 9706, 12541, 12136, 7936, 7557, 9578, 13094, 4862, 5328, 411, 12141, 7066, 13329, 5933, 410, 14355, 13096, 2001, 1607, 1923, 12516, 11511, 5610, 12630, 7178, 1500, 3718, 7715, 2941, 11147, 9601, 2353, 2029, 4471, 1651, 10827, 4532, 12291, 14569, 14711, 12491, 8686, 10875, 827, 2887, 679, 12973, 1478, 1477, 13558, 8553, 14528, 13442, 10547, 5712, 11622, 14794, 13120, 1735, 9614, 13057, 2147, 4205, 14180, 3072, 13801, 2558, 2282, 6792, 12529, 12530, 6991, 15387, 14843, 11204, 2344, 5784, 7724, 1739, 1522, 5223, 7290, 4406, 9797, 7440, 14966, 11287, 4723, 4261, 5832, 6270, 5996, 2300, 10417, 7306, 9135, 10536, 7624, 6329, 7193, 9256, 13976, 9809, 6882, 6659, 7055, 4040, 6176, 6833, 4133, 13222, 14424, 2637, 2309, 6445, 14288, 9661, 4593, 11270, 11049, 474, 11229, 6090, 2460, 1705, 6492, 2924, 7171, 6921, 12852, 1178, 2049, 11973, 11184, 11489, 7308, 6950, 9239, 4537, 3579, 13233, 10091, 11050, 2339, 1036, 9806, 16015, 11817, 2644, 10462, 5274, 2320, 4897, 6889, 9812, 5972, 15415, 3694, 16183, 351, 7695, 9130, 7257, 10441, 12239, 1615, 10842, 14002, 13839, 7732, 13012, 7869, 9080, 11600, 635, 16234, 14772, 7854, 14435, 11613, 2189, 12233, 6336, 7125, 7621, 2985, 13920, 15175, 2567, 1342, 712, 2759, 5244, 6907, 13293, 15805, 7420, 13581, 12347, 7408, 5575, 3165, 3061, 4310, 10615, 898, 5645, 11035, 3414, 14144, 13319, 10270, 3163, 1647, 11522, 9156, 8415, 2947, 11923, 15252, 8636, 7554, 7013, 13997, 1673, 9784, 15141, 5845, 15109, 3431, 13244, 12859, 8942, 16345, 9494, 7153, 12680, 11513, 12795, 4338, 15995, 8462, 1284, 3832, 612, 9640, 1316, 2950, 7391, 7551, 1569, 5297, 4937, 12241, 5239, 1942, 10366, 7798, 6202, 8776, 15269, 1646, 11621, 15221, 10502, 9740, 10709, 4558, 15818, 14762, 3117, 14264, 12845, 2317, 12952, 988, 4641, 6524, 430, 5947, 13813, 16038, 2270, 8872, 8394, 6641, 5221, 5215, 11497, 4746, 1297, 14463, 13770, 607, 5567, 16259, 8803, 6955, 12462, 14239, 4374, 10468, 5294, 3494, 502, 16313, 4824, 7845, 14409, 1211, 11499, 7743, 9157, 13994, 12066, 11027, 6744, 523, 5558, 2435, 11558, 10864, 9717, 4111, 4422, 9368, 12395, 8477, 13143, 8384, 13028, 4459, 15276, 6454, 12698, 6591, 4527, 7509, 16076, 7942, 1862, 12914, 7297, 1426, 4695, 867, 2148, 5276, 8709, 6503, 14493, 4972, 8601, 2730, 7585, 13072, 10226, 6376, 5166, 10347, 3919, 854, 3614, 12788, 6589, 2681, 14035, 15923, 4661, 13178, 15235, 4654, 6768, 14018, 8957, 5238, 7019, 8262, 1760, 11424, 3833, 4192, 6597, 9325, 7678, 14346, 10569, 1581, 5776, 12770, 16006, 3823, 138, 5839, 6963, 4525, 4932, 803, 2467, 3576, 8253, 15869, 4539, 15518, 4296, 2535, 13908, 9965, 2682, 4266, 11412, 14277, 11168, 8156, 14216, 7131, 7730, 676, 5120, 5917, 11545, 7234, 3986, 16126, 10229, 12689, 15334, 13175, 6822, 12502, 1142, 2057, 2878, 14198, 16358, 1795, 2332, 12970, 12061, 1218, 692, 11897, 585, 6483, 13350, 13006, 4287, 12945, 6960, 6182, 15284, 5934, 14202, 12409, 3597, 8546, 12081, 6121, 13854, 12056, 5735, 6887, 13310, 12441, 11461, 15689, 7927, 949, 8693, 15471, 16009, 3863, 1674, 6291, 11282, 10238, 4495, 3571, 15812, 4828, 12575, 1091, 5659, 13796, 3549, 6602, 13183, 4724, 4896, 11702, 5262, 10852, 14178, 10512, 6974, 10681, 3070, 3637, 8040, 1101, 2536, 16196, 7264, 11930, 4076, 10950, 13413, 4034, 14434, 13886, 13735, 1577, 4031, 14162, 10442, 10563, 4215, 12105, 15861, 14326, 15880, 7050, 4515, 1683, 6775, 5675, 1814, 15320, 9628, 9603, 7461, 6894, 282, 2461, 9864, 5963, 15422, 1411, 891, 6733, 15606, 1908, 13917, 33, 2913, 12477, 5624, 14070, 9117, 5196, 2918, 16028, 8449, 6804, 10225, 14329, 2056, 11087, 119, 7324, 873, 3313, 985, 1349, 15961, 16026, 11457, 7542, 13254, 10700, 12011, 6312, 9133, 4803, 5401, 7887, 4013, 970, 8252, 746, 4054, 12310, 698, 4651, 11182, 6578, 11466, 1382, 1761, 13881, 4474, 3340, 14668, 1212, 16050, 5906, 11181, 12549, 3825, 14948, 6948, 16130, 12396, 8293, 3027, 3530, 9582, 13975, 14640, 3529, 8434, 9077, 8263, 13600, 11594, 13127, 3670, 10664, 3658, 10256, 626, 8228, 10153, 2804, 4117, 14368, 1357, 1466, 11459, 10511, 3092, 15585, 7271, 9995, 4097, 7472, 1330, 7619, 2931, 6825, 13990, 8391, 13843, 9598, 15099, 7766, 3613, 11189, 403, 3557, 1328, 12797, 4116, 715, 2118, 4692, 5587, 7294, 12799, 14386, 8023, 11659, 6943, 14903, 11603, 11696, 14722, 10921, 6628, 7268, 5188, 15775, 13023, 4063, 6171, 11238, 3393, 3185, 7159, 847, 10720, 14599, 5066, 5631, 6370, 623, 274, 2318, 2230, 12479, 14525, 6500, 14876, 13629, 8498, 1790, 16330, 156, 2795, 5045, 7031, 136, 13724, 2206, 487, 12829, 12185, 12220, 671, 969, 661, 6324, 2409, 8132, 14289, 9964, 2766, 6796, 10823, 3911, 11639, 1095, 13634, 3970, 14457, 12367, 7466, 11119, 8653, 3118, 1046, 14392, 4388, 13054, 6188, 15837, 9251, 10400, 1868, 1915, 3565, 2323, 8372, 8184, 9807, 14362, 1662, 8998, 2990, 9267, 1558, 11042, 3929, 14905, 14399, 10265, 16178, 168, 8338, 15519, 4403, 10651, 227, 3918, 10387, 4123, 12156, 6966, 7248, 739, 14120, 1405, 1681, 7166, 8630, 13954, 3326, 15067, 2356, 16323, 11627, 2617, 25, 3722, 15563, 4203, 6012, 6649, 2906, 15084, 14563, 2202, 8884, 15492, 14430, 9374, 5563, 7353, 6852, 4415, 14218, 11167, 13750, 936, 5448, 1528, 6764, 12752, 619, 6812, 15332, 12814, 962, 10521, 14439, 13433, 6402, 5982, 13543, 5214, 9633, 1022, 12047, 11460, 10942, 4213, 10089, 12475, 12244, 4253, 946, 2079, 10202, 9683, 1002, 8615, 9742, 13380, 10109, 6036, 13215, 9810, 13689, 6450, 6542, 11543, 15888, 8446, 14609, 9066, 8568, 12376, 8727, 16056, 6261, 16109, 15722, 11980, 14649, 14769, 4735, 537, 10580, 1758, 2550, 4396, 8907, 5181, 796, 1752, 13527, 15725, 640, 10872, 5003, 1629, 11008, 11686, 1248, 3076, 9757, 13623, 9235, 10713, 11045, 1813, 190, 8090, 15110, 8390, 3009, 1828, 16090, 11809, 551, 2921, 1393, 10964, 3937, 8654, 9936, 238, 15936, 1436, 5733, 473, 11255, 9298, 12138, 15207, 13584, 7873, 8901, 3130, 8634, 12595, 11927, 7205, 2237, 2134, 5541, 3371, 11818, 6933, 10966, 11291, 6468, 8398, 3521, 11549, 14632, 9609, 976, 14892, 10181, 10847, 959, 7076, 3008, 12621, 10455, 14193, 8226, 5929, 14949, 4924, 8061, 11951, 14696, 7574, 9839, 11393, 8823, 10061, 3267, 14982, 812, 3917, 1221, 6869, 10525, 3925, 5077, 14550, 10618, 8369, 1150, 15704, 11425, 9779, 5055, 8438, 2579, 15726, 14423, 563, 15596, 7616, 11144, 4352, 14455, 7753, 8089, 11372, 6699, 12750, 2427, 561, 1176, 1339, 12727, 4330, 4332, 16348, 15953, 5829, 15856, 9985, 16098, 12205, 7850, 12078, 3652, 12410, 6867, 5976, 723, 3791, 683, 8849, 14601, 15980, 9301, 12064, 16077, 4305, 412, 1376, 14473, 3071, 15173, 9132, 3408, 6422, 7317, 6462, 756, 1988, 7026, 3534, 5343, 15311, 14340, 4455, 13331, 15965, 6057, 2983, 5895, 13345, 13643, 13743, 5794, 9705, 10269, 1807, 4068, 9150, 9488, 6557, 7270, 9020, 6844, 10540, 910, 1278, 6346, 14085, 8574, 14615, 13309, 4017, 778, 3481, 13659, 713, 4437, 11112, 7064, 16147, 7685, 7511, 13713, 5905, 5684, 10098, 13470, 7100, 10371, 14360, 15081, 3235, 14429, 13467, 15595, 8244, 8032, 10283, 2374, 8651, 6418, 14078, 8232, 8994, 13837, 7999, 11203, 14544, 5466, 2951, 7539, 115, 3864, 2671, 8875, 9618, 14912, 2874, 633, 15360, 1158, 16379, 9386, 1721, 9461, 14137, 15501, 15834, 13911, 9649, 2197, 2259, 11438, 3959, 3856, 4259, 14942, 7354, 86, 11426, 14635, 2646, 15719, 12905, 5831, 13655, 14194, 1291, 5283, 12449, 12219, 8973, 12739, 14898, 12935, 10033, 895, 7138, 16103, 11452, 15060, 7288, 10545, 600, 9226, 15652, 2996, 16282, 3626, 13288, 1216, 10524, 15174, 3640, 2519, 1050, 13041, 1063, 12331, 8834, 8856, 1952, 6989, 4271, 14888, 11308, 12700, 3735, 11587, 15531, 11368, 5531, 4005, 12877, 9983, 6745, 16201, 10293, 4982, 8207, 13774, 13166, 1933, 2521, 13893, 8123, 11764, 8287, 7978, 7940, 10190, 14967, 14334, 7126, 14983, 10868, 11562, 8694, 8209, 16071, 3090, 8960, 12671, 3134, 4204, 12365, 3685, 1090, 6904, 11496, 14376, 12854, 1251, 14623, 6509, 7859, 13918, 5163, 7133, 15913, 1949, 14117, 13063, 7435, 9922, 1869, 13272, 10803, 2452, 12896, 14507, 14074, 358, 15984, 5010, 1550, 12638, 6739, 4002, 4136, 12275, 1953, 9632, 12053, 14335, 784, 11161, 3786, 5255, 15935, 16, 16168, 14342, 6193, 15817, 1421, 8736, 11847, 11756, 11276, 4804, 7984, 10401, 6671, 16380, 11285, 15796, 4878, 9081, 15453, 7493, 8326, 10657, 651, 7069, 6018, 436, 3737, 10244, 1065, 5812, 2752, 14740, 5308, 10529, 11114, 10723, 12206, 6624, 5937, 4001, 3260, 10405, 382, 10598, 15120, 2605, 7250, 4915, 14370, 13727, 3240, 7301, 13983, 12109, 7837, 4909, 6474, 8486, 10193, 14139, 1509, 2263, 11873, 307, 1242, 5101, 4038, 11162, 7067, 4072, 5057, 6728, 9074, 12488, 8632, 9333, 5458, 11987, 8130, 9315, 7188, 14440, 7366, 13739, 730, 13377, 9242, 14030, 12337, 5030, 1635, 2315, 2926, 4584, 8600, 14605, 8680, 14010, 14813, 8050, 7287, 2777, 3001, 440, 7326, 2895, 5581, 14416, 5273, 10280, 8233, 11740, 1143, 13069, 7120, 7967, 13031, 7654, 2444, 13925, 16010, 1227, 4894, 13494, 16290, 10134, 4482, 11771, 12548, 10620, 2071, 1098, 6595, 13335, 6824, 7933, 8915, 13764, 15833, 8269, 3447, 13223, 11196, 6551, 7356, 12632, 3510, 13567, 4085, 9232, 8908, 6411, 2492, 13664, 3746, 4523, 10150, 1563, 634, 4442, 11645, 11201, 16025, 808, 14816, 11302, 11560, 8093, 15782, 5399, 15645, 14946, 13697, 10054, 1, 14732, 10102, 8711, 2655, 3300, 16064, 13748, 5687, 14524, 15590, 2626, 1300, 3776, 13133, 8509, 2798, 8828, 9745, 8729, 13158, 5658, 231, 1184, 4159, 13556, 14854, 14656, 12904, 10911, 8673, 255, 793, 8859, 11, 14644, 10217, 7147, 15116, 4494, 5783, 13016, 4371, 15614, 12191, 2159, 2570, 12107, 14101, 14320, 9996, 5988, 14639, 8008, 2201, 14782, 6697, 11617, 15952, 4691, 16331, 7015, 10730, 2696, 12732, 7516, 13464, 3909, 5096, 7252, 8949, 14617, 625, 7966, 12161, 649, 816, 5534, 1235, 10757, 10245, 11759, 13137, 13723, 15502, 5618, 13835, 7045, 851, 1490, 8995, 1079, 2350, 15444, 12427, 3943, 13857, 15279, 2457, 14995, 13409, 1617, 9896, 2431, 8750, 2815, 1108, 2218, 9590, 11942, 2383, 15829, 6429, 11443, 11570, 12633, 10171, 3109, 11188, 12673, 3535, 4853, 14045, 10888, 15825, 11647, 12169, 7030, 10856, 13378, 14822, 9405, 15808, 6153, 1962, 3779, 12162, 2396, 3666, 3383, 15361, 7104, 4989, 211, 4928, 6059, 7965, 11319, 779, 16204, 8229, 3636, 837, 14396, 3648, 757, 1126, 10691, 14038, 6208, 564, 1331, 8766, 7669, 11839, 6107, 10575, 15893, 8858, 11520, 1925, 6093, 11652, 3673, 8765, 12828, 12348, 71, 1804, 1585, 8073, 2407, 5485, 2167, 11737, 12954, 12083, 9406, 11842, 12675, 9191, 7065, 7564, 3545, 6287, 9321, 577, 1687, 13576, 806, 1545, 3625, 14598, 8878, 4280, 12361, 10834, 15087, 13113, 8954, 5095, 12724, 5736, 11671, 3903, 14156, 7736, 3021, 1998, 15956, 5033, 14081, 16144, 1974, 9644, 8616, 3551, 5627, 12444, 12227, 13412, 8431, 2062, 1492, 12652, 4024, 1491, 2257, 3051, 6969, 9805, 322, 5649, 9570, 492, 2978, 1514, 15199, 13185, 3705, 4167, 315, 2183, 6690, 1686, 10520, 1345, 12119, 7005, 2042, 14968, 5574, 13356, 5437, 850, 9400, 7834, 11783, 1119, 8213, 11593, 5340, 1039, 12960, 2055, 15615, 2034, 7386, 11072, 1834, 12583, 8413, 12099, 8019, 5777, 4869, 4342, 13769, 2529, 7899, 6759, 14746, 15466, 7003, 10951, 9105, 8626, 3023, 7355, 5007, 3528, 11611, 3645, 1187, 1231, 6142, 10955, 9530, 6940, 8402, 12094, 10088, 3656, 922, 904, 9888, 16166, 1223, 3810, 8236, 12552, 6924, 12408, 5225, 8937, 6569, 12951, 16242, 3434, 4404, 9851, 15730, 7370, 9316, 10416, 13512, 299, 5004, 8466, 1938, 12151, 983, 4847, 1325, 8717, 12421, 1086, 6658, 8492, 15577, 15287, 11745, 4168, 1004, 15758, 11808, 12865, 8005, 579, 5000, 14470, 8295, 545, 4251, 12681, 5918, 11422, 11565, 14314, 4050, 13889, 12296, 6751, 3114, 3126, 12897, 3281, 7345, 14401, 11658, 14189, 8745, 1720, 15390, 1666, 2010, 7929, 334, 8387, 5370, 4176, 5327, 6722, 5248, 10334, 9371, 6716, 9942, 291, 4348, 7197, 14713, 1967, 15467, 7704, 11537, 4555, 7981, 1961, 12550, 14874, 14025, 5432, 268, 6787, 13685, 7168, 12837, 2173, 14176, 10008, 4135, 15655, 1245, 6268, 7982, 3968, 8992, 16318, 15822, 2474, 9747, 4022, 13308, 3732, 10637, 14021, 15548, 11198, 1469, 10027, 16131, 8366, 2647, 11566, 5615, 14763, 7323, 8337, 13999, 9155, 15790, 4644, 6155, 12393, 9356, 3965, 15937, 6148, 12436, 4700, 14723, 5436, 6946, 1827, 12851, 3513, 15442, 509, 2187, 2023, 13262, 7084, 7095, 11991, 10945, 5263, 325, 11240, 9427, 5423, 9928, 8133, 10110, 2329, 7522, 10714, 2117, 12573, 11406, 7661, 5813, 2250, 7097, 10610, 269, 3369, 2487, 5208, 4049, 70, 2069, 13007, 3024, 12406, 9228, 9795, 15560, 15765, 9630, 15280, 5600, 8987, 4301, 7099, 10514, 7571, 974, 7350, 1551, 3403, 12963, 12463, 14750, 1244, 8853, 2402, 11277, 14214, 12765, 6092, 10367, 2901, 11531, 8977, 5637, 9310, 14800, 14044, 12007, 7381, 11156, 14945, 10901, 14600, 5226, 3279, 11409, 9017, 8629, 8332, 407, 5742, 6098, 6611, 2225, 3960, 10584, 16060, 9672, 11896, 2114, 10328, 10115, 11261, 4942, 10434, 6309, 5995, 2358, 11807, 6145, 13825, 8376, 6080, 6835, 15922, 10648, 15245, 3289, 3902, 13720, 16148, 9159, 8549, 11893, 11148, 4283, 1725, 7771, 1458, 4452, 5891, 3542, 12293, 2251, 15017, 14113, 13679, 1917, 2017, 11331, 3748, 3680, 1444, 4432, 4965, 13768, 12045, 7245, 2541, 15024, 12188, 8194, 7911, 3650, 16265, 5752, 15907, 5377, 9048, 16141, 10495, 14661, 4191, 2375, 2871, 4591, 11172, 15955, 2386, 13241, 5819, 5154, 10627, 1588, 13855, 4477, 263, 5315, 8116, 3234, 16152, 7044, 12319, 8534, 8548, 5705, 15620, 2515, 12938, 9675, 16220, 11126, 11441, 10028, 10656, 3939, 7191, 13604, 8399, 14517, 9822, 2898, 6846, 5925, 10360, 8270, 6995, 16182, 14688, 15369, 5939, 7175, 5572, 398, 10865, 7928, 14914, 11675, 12145, 8597, 6910, 140, 14731, 10457, 10, 9402, 7224, 3602, 5416, 4011, 8664, 15816, 346, 6601, 5232, 6656, 4722, 206, 14558, 15143, 13371, 8351, 14325, 338, 3894, 1610, 597, 5721, 15014, 15317, 14019, 15786, 7988, 1770, 4556, 14090, 8099, 2192, 11728, 8775, 7346, 9292, 9726, 15994, 14927, 13100, 4573, 9041, 6660, 15108, 9199, 10435, 12372, 3125, 15592, 15254, 6941, 3485, 13792, 9093, 5329, 3082, 16301, 5491, 3520, 7749, 14415, 417, 14032, 10281, 2768, 6636, 13194, 6082, 2632, 8764, 5893, 3543, 5320, 12380, 9539, 15258, 5743, 14498, 7221, 11605, 11410, 5585, 6881, 3969, 11477, 7872, 13927, 471, 5298, 13011, 12059, 478, 13788, 8674, 9087, 2940, 163, 4649, 7220, 11346, 80, 4844, 3891, 6119, 10208, 14933, 8473, 4826, 11994, 5332, 1450, 13140, 2569, 8345, 4420, 15493, 7643, 2840, 13189, 9946, 2883, 12993, 14802, 1900, 4683, 1322, 5930, 7795, 7281, 5750, 2503, 3255, 9024, 13146, 3342, 15162, 13303, 680, 12038, 5643, 6433, 9992, 13677, 328, 6692, 4196, 14378, 4516, 8525, 4107, 9935, 15198, 8309, 4974, 14704, 15196, 13662, 4707, 11413, 9503, 2948, 10983, 12237, 1380, 66, 7877, 10705, 580, 5419, 12789, 9367, 12562, 10159, 9423, 97, 100, 685, 14531, 1580, 12514, 11223, 1379, 10154, 7839, 10913, 14685, 11751, 5561, 10583, 16073, 7072, 12978, 6267, 5048, 5900, 7705, 14094, 11599, 9987, 5586, 10471, 1138, 14851, 5508, 12979, 12312, 3880, 12947, 7791, 14767, 14777, 3609, 10743, 14227, 4720, 2722, 9869, 14698, 609, 12747, 11865, 1448, 1156, 2425, 12353, 12577, 12518, 10549, 12635, 16303, 3850, 11770, 2247, 1841, 9610, 6698, 7110, 8609, 7056, 12049, 12611, 10332, 9003, 4719, 3617, 15378, 11710, 14028, 6467, 15021, 6084, 13905, 2839, 10393, 5024, 12984, 1080, 839, 1732, 6793, 1507, 1746, 14246, 10489, 5300, 4386, 14450, 4857, 9332, 3170, 3172, 10287, 11429, 5333, 2322, 10164, 15779, 3064, 8604, 12703, 15075, 7352, 1029, 1188, 7861, 135, 7102, 11004, 16139, 6205, 15315, 16281, 9758, 12535, 444, 7335, 15500, 14902, 13047, 1100, 10895, 7375, 3037, 5365, 4860, 7339, 13001, 12326, 11241, 5844, 12566, 9736, 11869, 1414, 13103, 13416, 10211, 2859, 3603, 7890, 6669, 14858, 10649, 12284, 7371, 6860, 8003, 6296, 9523, 1131, 9175, 5816, 15101, 16336, 4782, 8374, 2038, 7318, 5596, 15140, 6613, 10038, 8059, 10609, 12234, 13123, 10890, 2834, 9898, 4815, 9224, 13359, 16024, 12644, 4099, 8519, 14999, 5363, 5555, 1835, 15658, 5204, 1613, 1886, 6588, 1215, 9697, 11068, 15090, 5151, 13761, 10101, 10184, 6292, 7172, 8644, 11535, 2977, 6662, 5573, 2563, 5222, 9168, 5671, 8137, 11746, 10072, 7500, 4255, 11623, 15695, 5105, 11628, 1741, 5661, 11294, 11576, 10078, 6978, 6958, 8407, 599, 1939, 5138, 15570, 4926, 6517, 9491, 4781, 7495, 15408, 14270, 3662, 5823, 13766, 1638, 5474, 13195, 13570, 1789, 4744, 15885, 15612, 14033, 11908, 4046, 4472, 7108, 12628, 14324, 13818, 9988, 13427, 11786, 4767, 8640, 12758, 4189, 10519, 2224, 10351, 3632, 9746, 8410, 15232, 3707, 7801, 10443, 1341, 329, 8850, 15304, 10205, 11997, 14222, 15170, 13900, 1347, 3784, 840, 6362, 16172, 11333, 14302, 656, 1009, 12902, 13228, 2125, 10186, 13866, 8846, 907, 15127, 7735, 8666, 6779, 10916, 13231, 14541, 10074, 10632, 3555, 13065, 14083, 2917, 10216, 13693, 13187, 3040, 9663, 7158, 7844, 2847, 11760, 15229, 11655, 8140, 2747, 7349, 7009, 8389, 1982, 7596, 4109, 16021, 4864, 10195, 5820, 10815, 14836, 15926, 5130, 7123, 14683, 9339, 8805, 13956, 3113, 4626, 10296, 5506, 14560, 14174, 14981, 8999, 1062, 15068, 7212, 13315, 8075, 12792, 4513, 3976, 6914, 16311, 10751, 6159, 10137, 9289, 6672, 1452, 16273, 12734, 12440, 7240, 16146, 5311, 8062, 6263, 3417, 11539, 5345, 3274, 14337, 12058, 113, 2652, 6305, 12322, 3052, 8135, 569, 1484, 1661, 9170, 935, 2211, 8779, 1519, 8848, 11885, 12098, 5034, 16241, 4048, 15337, 10862, 9955, 2181, 3227, 9655, 8870, 14142, 161, 6902, 13364, 13807, 16034, 6173, 10771, 7628, 10804, 12327, 11096, 2238, 7739, 3278, 9206, 12651, 12236, 15047, 14657, 8185, 8881, 5667, 2919, 7118, 8555, 14259, 12250, 2942, 1773, 1355, 16190, 14552, 2177, 9417, 8637, 9723, 5808, 10013, 8074, 11014, 10533, 8029, 1630, 3264, 12844, 2000, 8703, 12558, 2076, 13578, 880, 844, 8586, 15930, 5923, 8470, 5272, 4339, 14223, 6125, 12634, 13501, 14299, 4057, 4, 9750, 4531, 15554, 38, 402, 3936, 13652, 215, 7506, 10025, 15138, 1526, 15400, 15756, 5187, 1731, 4124, 14394, 12116, 7722, 6075, 1165, 14414, 4103, 1819, 13613, 5408, 14529, 13148, 535, 14812, 2456, 7293, 2502, 10586, 7709, 2200, 7622, 2319, 6512, 9658, 9457, 6244, 12756, 9593, 89, 15889, 15987, 13967, 12179, 8544, 2198, 6335, 1313, 3192, 3572, 15226, 2709, 466, 12730, 1177, 655, 819, 3295, 4480, 15742, 1520, 6019, 7025, 2459, 7483, 7822, 1875, 5955, 7700, 13579, 5629, 8724, 583, 4294, 8619, 4631, 1166, 8208, 758, 790, 14572, 14207, 1655, 15609, 10928, 1810, 6539, 4536, 5413, 5957, 5368, 8689, 12470, 15433, 4269, 1268, 12042, 3963, 9202, 973, 1032, 5763, 9016, 748, 7641, 4930, 475, 4514, 8762, 11033, 1179, 8565, 12733, 8800, 14992, 7430, 1301, 9320, 9713, 1407, 8172, 5638, 2825, 9414, 5702, 2767, 2703, 432, 7141, 2726, 12139, 8325, 2937, 2961, 4648, 3584, 11665, 10543, 2268, 3695, 8145, 9053, 7871, 16043, 10605, 7180, 5639, 8857, 13916, 7932, 3337, 9269, 6156, 7681, 10907, 85, 10726, 3291, 12456, 2796, 253, 13138, 5361, 12450, 12569, 15771, 5857, 3127, 9120, 7631, 6199, 5708, 13487, 15479, 606, 2064, 5246, 7254, 5290, 1600, 15267, 10894, 23, 12131, 4341, 12774, 16296, 10696, 14055, 6885, 4302, 5455, 11366, 4324, 5427, 8467, 15536, 8308, 4479, 4221, 13107, 5856, 16104, 5958, 1367, 12057, 15784, 9905, 11701, 8639, 1612, 5278, 6720, 10541, 14744, 3868, 2771, 15916, 11688, 4464, 6318, 16120, 924, 6564, 3470, 11473, 13731, 11805, 305, 990, 13513, 2182, 2946, 10251, 12055, 3474, 9487, 16084, 9034, 9025, 13163, 3206, 15472, 13311, 11901, 2156, 6937, 4954, 13542, 4729, 733, 13987, 7445, 10440, 14809, 4891, 14736, 84, 9162, 9847, 5994, 14250, 9094, 4977, 4243, 8414, 11581, 10995, 13042, 2203, 6319, 570, 11323, 11391, 8102, 5475, 16142, 15302, 5207, 13116, 3945, 15388, 693, 5102, 4470, 9231, 5266, 2494, 11964, 8738, 12708, 6053, 3102, 3773, 3610, 14172, 12221, 9798, 11447, 10885, 4164, 401, 7880, 6369, 7512, 10221, 15421, 8275, 1257, 14118, 5381, 3350, 15219, 15106, 2085, 669, 15053, 2708, 15260, 6430, 10361, 5901, 7211, 13615, 1634, 2098, 14591, 55, 8054, 14527, 24, 7614, 11663, 6201, 1941, 1676, 8483, 11744, 4546, 13486, 6249, 11967, 5123, 8974, 13554, 32, 3615, 12618, 617, 9119, 1912, 1468, 14589, 13013, 12986, 3202, 6328, 1354, 8458, 5084, 5754, 8459, 8161, 2674, 9038, 10902, 5032, 4440, 8314, 15272, 11242, 5991, 957, 3211, 738, 15574, 11217, 12366, 7001, 369, 14677, 12508, 11127, 1914, 14514, 3426, 6592, 13398, 2732, 1463, 13291, 6678, 12405, 608, 16170, 10112, 3404, 2210, 11019, 9219, 12434, 7651, 3677, 10143, 10893, 8223, 951, 3058, 4535, 3646, 12178, 7662, 12225, 15903, 6311, 11857, 7439, 7672, 12498, 11880, 4463, 8813, 9391, 14163, 11999, 4678, 5570, 2505, 14448, 1850, 7471, 4138, 3155, 9659, 6987, 8988, 4876, 9348, 1916, 14048, 12003, 10254, 7369, 902, 12686, 15894, 4702, 13423, 3344, 1023, 4007, 4130, 773, 5518, 10372, 9112, 15694, 16377, 1796, 8182, 13656, 1679, 8112, 8625, 15659, 7499, 10318, 13393, 1713, 10461, 1508, 15958, 9786, 7363, 8047, 8064, 8599, 4772, 9492, 15830, 10049, 15010, 7603, 3664, 519, 6765, 4947, 10487, 14565, 6264, 3314, 9668, 3691, 11036, 2587, 9089, 1694, 3953, 12330, 9091, 4868, 429, 10233, 13993, 12429, 16229, 6809, 7703, 15268, 2791, 4940, 52, 4784, 9409, 15691, 8851, 3154, 7843, 14124, 2584, 978, 10276, 2043, 10930, 10488, 8926, 2469, 12026, 10846, 13251, 2758, 7231, 11667, 3858, 6634, 9682, 5499, 14509, 10739, 2014, 9009, 7269, 14664, 9451, 15494, 6594, 15748, 5376, 7728, 637, 13287, 5698, 3973, 3401, 5544, 9005, 9279, 10484, 9287, 5293, 11053, 1011, 13935, 11750, 10724, 11353, 10500, 451, 14634, 11685, 571, 10290, 12668, 2051, 6773, 11493, 12858, 2984, 9101, 2556, 8426, 6990, 7961, 1726, 11918, 12816, 11354, 14049, 6842, 3063, 2650, 5049, 7566, 4069, 10946, 4526, 14279, 2420, 15728, 14788, 16340, 2074, 11349, 15803, 6169, 14863, 684, 5726, 2641, 5720, 10517, 6563, 10634, 12568, 11607, 13798, 15126, 2478, 290, 3319, 8505, 13304, 6459, 994, 1768, 4841, 14190, 10406, 449, 8250, 2194, 825, 2520, 15647, 7429, 2364, 2781, 11055, 11318, 14411, 11081, 15768, 7507, 10305, 11692, 10407, 11657, 2923, 4426, 2349, 1990, 7583, 2716, 6731, 5879, 13280, 11835, 11082, 8183, 10675, 12579, 9428, 4581, 10423, 13076, 896, 12690, 1619, 14648, 12559, 4105, 15665, 10304, 3363, 7786, 6049, 9127, 14489, 1700, 12024, 3488, 7573, 9031, 14175, 4416, 9404, 2512, 5271, 13706, 7160, 13696, 1399, 15448, 14109, 1618, 620, 15440, 12240, 12939, 8098, 13009, 14125, 5762, 5190, 13032, 3629, 15372, 10427, 5433, 8968, 11169, 11389, 14900, 15398, 16149, 13523, 2154, 1260, 409, 295, 2481, 2788, 10123, 14201, 814, 4589, 10004, 13776, 2465, 4137, 14821, 14474, 9950, 15082, 2585, 494, 11383, 16129, 2707, 1853, 8550, 2272, 14538, 12798, 10322, 8365, 3138, 1217, 5519, 2423, 16163, 11075, 3419, 6065, 7142, 435, 8292, 10667, 12994, 5334, 8894, 3151, 9365, 14646, 13477, 1640, 14774, 15482, 11360, 15402, 12286, 9707, 6770, 8558, 1230, 7824, 8243, 14984, 4686, 8322, 12445, 1390, 6549, 8705, 11777, 13557, 1289, 4322, 8642, 12012, 987, 14748, 7389, 4128, 7058, 8611, 12527, 12810, 6354, 6900, 2727, 1395, 15773, 15754, 8938, 11938, 6802, 7652, 10655, 6414, 11274, 2429, 6227, 4043, 12254, 9442, 16164, 5978, 13744, 11485, 1936, 11948, 2490, 9434, 11199, 8070, 2385, 1117, 3444, 15309, 13384, 10067, 9728, 9924, 8781, 14348, 12159, 13247, 15414, 10830, 1565, 6640, 1657, 889, 10152, 15703, 378, 14592, 4914, 6456, 13274, 13974, 12165, 13872, 3194, 11089, 7484, 2219, 16124, 3699, 2328, 9857, 1829, 204, 800, 10553, 1236, 3796, 222, 2333, 11798, 7467, 8493, 3653, 13239, 4485, 3837, 1879, 11983, 4863, 5989, 11192, 1001, 4027, 4299, 6251, 5371, 7769, 2773, 15463, 1413, 1092, 8782, 7524, 6293, 3489, 2943, 15167, 15359, 2971, 6081, 8237, 9727, 13510, 8561, 4879, 16253, 7086, 15528, 13277, 12313, 9639, 3717, 2406, 12435, 11034, 9028, 14308, 10708, 10991, 5482, 10048, 4245, 3311, 3388, 1736, 14586, 5017, 1818, 15701, 16012, 12335, 622, 3066, 4557, 9883, 14068, 14801, 11472, 5801, 16288, 7115, 3643, 14285, 10809, 11510, 6706, 13945, 5655, 3849, 2636, 7140, 16097, 8101, 13726, 14786, 9636, 7740, 7444, 4726, 1343, 11649, 8956, 7144, 8665, 6820, 14521, 1608, 15759, 2858, 11017, 777, 35, 2695, 10794, 11830, 12728, 182, 5699, 15826, 1518, 10006, 3577, 14237, 11288, 2911, 14676, 16101, 3561, 11233, 13314, 1891, 4438, 12908, 13947, 4364, 8261, 9702, 415, 10587, 12593, 9364, 7006, 590, 6460, 14145, 5039, 5144, 7279, 7396, 14278, 14177, 10085, 3714, 15312, 3365, 10007, 1708, 12390, 15859, 2802, 13860, 8324, 8832, 10908, 1670, 4613, 9949, 9963, 4061, 15105, 3282, 11540, 5072, 16275, 5527, 8115, 13014, 11595, 1172, 10447, 6313, 5250, 9993, 4148, 858, 10128, 5897, 286, 1625, 3907, 2992, 2589, 10769, 2466, 7078, 2175, 2959, 6873, 8706, 4104, 11178, 10672, 706, 4212, 6358, 13951, 5907, 15078, 10719, 8923, 15080, 2058, 2648, 13414, 2335, 12354, 15322, 6584, 108, 9067, 10286, 2483, 14567, 3435, 4999, 6982, 5913, 14969, 11307, 3997, 11432, 10712, 15760, 4233, 12989, 11731, 15710, 12544, 5788, 703, 5548, 14169, 6388, 10786, 8069, 9186, 10764, 10246, 3915, 5946, 2024, 20, 3727, 14705, 316, 4802, 12745, 10810, 15933, 15255, 7023, 6719, 5964, 4319, 2495, 15860, 12309, 1305, 4572, 9586, 1913, 10465, 11283, 7236, 6097, 9305, 7891, 8323, 3908, 12712, 14684, 1538, 15734, 7604, 2915, 7828, 15347, 9980, 12451, 5825, 10391, 16347, 4737, 678, 2713, 12660, 7302, 4780, 9147, 12458, 10736, 11151, 1350, 7946, 11498, 8190, 15788, 6949, 15441, 16305, 2418, 13209, 1133, 7649, 5919, 1263, 13507, 10080, 2500, 11067, 8617, 12685, 9326, 13010, 11529, 6735, 2327, 11615, 10395, 4520, 6890, 7387, 12977, 9222, 10811, 14833, 16370, 5481, 6643, 5031, 14595, 6340, 12447, 10906, 6715, 15917, 4768, 3362, 15622, 5467, 15217, 2404, 6383, 15696, 2789, 12318, 9767, 40, 14460, 5429, 5220, 10999, 3298, 79, 11433, 6947, 13083, 4541, 149, 11175, 1601, 7474, 11656, 15591, 13593, 12192, 14871, 9818, 7597, 6102, 10348, 10871, 4114, 11965, 5286, 14258, 6572, 5098, 5192, 2472, 4087, 10673, 9376, 1895, 4846, 11660, 7049, 12513, 2665, 13230, 14526, 3709, 3478, 5635, 7788, 13903, 2855, 6029, 7059, 1979, 12257, 14768, 12512, 1059, 6419, 8167, 13719, 5282, 9799, 15792, 15086, 9246, 14079, 433, 2360, 593, 16361, 2287, 4934, 12080, 3296, 6332, 4356, 7285, 12605, 8403, 15677, 13390, 14091, 7995, 16216, 7415, 6132, 12521, 2486, 4449, 14330, 878, 2826, 11462, 4601, 5817, 560, 2395, 6087, 14300, 9145, 598, 3286, 13991, 10279, 10197, 5200, 11313, 8469, 8170, 4032, 913, 13346, 7888, 4679, 3972, 15208, 13616, 4484, 8855, 10922, 9422, 2718, 12749, 15679, 13395, 8784, 1817, 2450, 2657, 3372, 3042, 3703, 1132, 13114, 9674, 6520, 9631, 7692, 4122, 5797, 14974, 11232, 13212, 10701, 7833, 10306, 6115, 12612, 12672, 642, 9690, 1368, 11344, 13614, 6058, 8257, 13986, 10383, 6579, 13232, 5216, 672, 12149, 6238, 14323, 9803, 3740, 13455, 3200, 6499, 2248, 14365, 1432, 10203, 4512, 10779, 5002, 5507, 5076, 4706, 243, 1105, 13758, 416, 4355, 12464, 16208, 12377, 6988, 11375, 1498, 14917, 1003, 13563, 5993, 6847, 11417, 359, 13982, 7900, 6583, 14673, 15130, 12922, 541, 5896, 15201, 12209, 15745, 4636, 8959, 6783, 5145, 11236, 2516, 10463, 2782, 15368, 14095, 2271, 8708, 15529, 4389, 1258, 4500, 5751, 11729, 734, 4349, 4079, 14184, 14363, 6523, 15976, 500, 4200, 11911, 14199, 4365, 10460, 2976, 11716, 3287, 13784, 8985, 7682, 3806, 2595, 9514, 5243, 5526, 13179, 14254, 3101, 4037, 10508, 9479, 5870, 7992, 260, 7109, 3139, 12134, 14407, 3074, 452, 2763, 9121, 15521, 6035, 3828, 7451, 1654, 10035, 5842, 11479, 14911, 2191, 9237, 14260, 982, 11669, 13948, 9399, 13565, 5614, 3336, 2240, 3631, 1715, 2630, 14126, 9375, 15744, 28, 15969, 7781, 8352, 8964, 6599, 3792, 6810, 10763, 14150, 15031, 5716, 4466, 15598, 10439, 8041, 4747, 7526, 7980, 6248, 15247, 11010, 15134, 8350, 13932, 10086, 8659, 6888, 9774, 4887, 5090, 11340, 13235, 9420, 9421, 8760, 14253, 7004, 10527, 9979, 3687, 6818, 16068, 4360, 13682, 7316, 16093, 3492, 16115, 7237, 5768, 5280, 9103, 9198, 2672, 4861, 8266, 6927, 4953, 14338, 9568, 7344, 6126, 15420, 1537, 1116, 14165, 6546, 7683, 10554, 9694, 14654, 7176, 14666, 8571, 2223, 8006, 9831, 3554, 12127, 2799, 2778, 385, 1480, 7322, 14783, 8990, 4733, 456, 5395, 3624, 9853, 13080, 9865, 1044, 6337, 2007, 3720, 6959, 9362, 11367, 14990, 12226, 1163, 3244, 2152, 15179, 3276, 6710, 13128, 11244, 6025, 13654, 4282, 14868, 15882, 6105, 10066, 963, 9867, 4478, 6762, 14894, 9439, 1157, 11299, 10381, 13671, 2115, 3338, 12883, 10319, 8478, 12523, 6207, 16151, 4410, 8242, 12915, 10459, 9476, 13618, 12531, 15396, 15225, 14651, 5665, 8411, 3277, 7866, 9637, 12473, 14022, 333, 9541, 9845, 14129, 14663, 15681, 780, 3306, 6385, 15732, 9282, 15182, 8274, 4831, 2286, 8200, 1294, 7137, 1283, 4077, 8880, 14406, 10808, 12269, 16264, 10029, 14080, 2482, 10165, 13336, 2916, 1857, 7919, 15845, 7424, 4461, 10676, 12679, 15634, 15216, 5781, 9951, 4508, 9178, 9884, 12932, 10753, 9615, 13453, 10965, 5335, 3159, 10612, 4834, 9001, 6714, 8539, 11390, 13594, 5322, 4303, 8103, 7920, 3269, 574, 2988, 296, 5461, 11265, 1137, 5799, 468, 16047, 3519, 12140, 4783, 11145, 8475, 10329, 5620, 15423, 13186, 12725, 8660, 7731, 9097, 6161, 2063, 4763, 13551, 13438, 5760, 12594, 15061, 9136, 995, 12157, 10958, 13963, 8340, 292, 3068, 6146, 14238, 14959, 14789, 10133, 8829, 10678, 9910, 7073, 9562, 2102, 7479, 6845, 12540, 3462, 15863, 3715, 1128, 6687, 1501, 3975, 15292, 2596, 11243, 15186, 11215, 13104, 6972, 15673, 13188, 10974, 6222, 15055, 11187, 4006, 4552, 15033, 11814, 4665, 15962, 14535, 6749, 3633, 10513, 1069, 13210, 7181, 11099, 12777, 5464, 11618, 9265, 15708, 8537, 2656, 3069, 6147, 12764, 15763, 1878, 16111, 14479, 8877, 4019, 14336, 3747, 1755, 15712, 370, 14989, 13382, 899, 15886, 6232, 2468, 6877, 3465, 1652, 13637, 13419, 3838, 12258, 4901, 15295, 14233, 1552, 12719, 14387, 10052, 15431, 4320, 1369, 12962, 87, 8052, 14681, 8785, 16295, 9201, 6664, 14153, 14596, 8471, 602, 4843, 9700, 736, 3696, 4731, 4178, 11890, 10722, 2066, 15549, 8068, 6064, 13078, 3647, 171, 14785, 7343, 9322, 16088, 10355, 7826, 6143, 7994, 11722, 12438, 14842, 4498, 5155, 3500, 14553, 2336, 1155, 601, 13404, 13003, 6077, 12175, 8873, 281, 6856, 3472, 11935, 10509, 4093, 16127, 3531, 2686, 15718, 10918, 578, 4685, 13075, 1573, 13101, 1109, 9090, 10695, 10059, 1467, 7275, 14603, 10476, 4226, 6242, 1645, 275, 12428, 1148, 9052, 1259, 445, 11324, 11474, 5391, 7797, 4062, 9830, 9358, 11140, 6140, 5052, 10032, 7405, 1304, 10571, 7587, 3801, 11357, 12992, 972, 14925, 3237, 1792, 7035, 2588, 11718, 9085, 9144, 5973, 4497, 9478, 10107, 13962, 12369, 14620, 15241, 3497, 6471, 5257, 16344, 1465, 5914, 5761, 15040, 15693, 8824, 9229, 1202, 9243, 7170, 10817, 4194, 3132, 4445, 9241, 11207, 10931, 15544, 16307, 15908, 14717, 13729, 15721, 8930, 8867, 999, 1210, 6339, 2561, 1262, 15027, 15850, 14111, 8866, 2698, 14629, 11048, 1118, 5915, 13806, 13836, 3765, 13181, 3376, 8979, 2185, 14309, 15977, 1318, 14205, 10375, 8888, 14556, 7070, 12729, 14304, 2714, 770, 12557, 5409, 6178, 10478, 1026, 4577, 7129, 5510, 2710, 9149, 10805, 60, 13289, 9893, 11136, 12483, 5670, 7124, 6913, 16278, 2531, 8934, 96, 6046, 1081, 1632, 11428, 14712, 3738, 15810, 5654, 6240, 9401, 5385, 14110, 13400, 13122, 12601, 10697, 846, 14938, 9641, 6575, 8641, 10303, 12213, 11264, 12570, 6740, 13379, 13299, 6326, 82, 11521, 3770, 3292, 3578, 2093, 10358, 8020, 10009, 11132, 9065, 1749, 15257, 12069, 7401, 11190, 14313, 14373, 7367, 9956, 10683, 6286, 142, 11708, 7908, 13595, 4920, 11854, 9250, 4286, 9821, 1831, 4108, 12071, 7165, 11260, 855, 8136, 10633, 11225, 14341, 12714, 7455, 5490, 16223, 5848, 645, 99, 1121, 10941, 1954, 16175, 10689, 3490, 15063, 6226, 5636, 7258, 11993, 12194, 539, 11056, 8807, 14557, 11640, 4647, 12121, 3482, 5513, 9489, 2416, 3560, 5780, 11947, 15724, 9455, 12077, 7820, 1008, 4922, 657, 4807, 9800, 12132, 11239, 8129, 9336, 13444, 6130, 7410, 12295, 10274, 12490, 7497, 15900, 12998, 5194, 9357, 8100, 3710, 15197, 10333, 8204, 11273, 9042, 694, 12001, 7376, 707, 16082, 8997, 10268, 4446, 1449, 11490, 489, 1433, 11796, 3145, 2577, 13899, 13092, 13074, 14697, 5040, 5660, 5822, 14487, 11039, 9165, 9925, 971, 12423, 12075, 8045, 3564, 11724, 14926, 8518, 207, 2389, 10096, 3049, 6310, 10277, 15321, 12461, 11950, 9440, 176, 11703, 10844, 12995, 8259, 4790, 3719, 11327, 9516, 7897, 8502, 6123, 939, 4080, 4090, 13500, 6623, 2092, 15023, 6200, 11755, 798, 12122, 1636, 14793, 9353, 7670, 1698, 13333, 807, 9657, 8748, 6162, 13245, 11469, 2050, 5442, 8770, 2105, 16174, 9753, 6442, 6276, 12460, 7187, 6891, 853, 9518, 7720, 3922, 11234, 1865, 15552, 15465, 2986, 9909, 12130, 3054, 12744, 91, 8986, 7804, 8538, 7448, 4408, 9855, 8202, 1874, 5299, 6567, 1777, 5344, 9765, 14960, 15480, 15537, 4236, 8913, 822, 6350, 47, 12090, 7219, 12315, 14412, 14733, 8268, 7779, 5796, 12742, 3046, 3793, 7617, 13944, 3466, 3169, 505, 5619, 11164, 5089, 2661, 4630, 4754, 3803, 9616, 4885, 977, 10938, 12571, 14244, 94, 3877, 624, 2401, 1826, 10075, 4086, 2539, 6612, 12163, 16040, 2161, 5608, 7944, 9002, 1209, 11551, 15028, 10206, 1959, 120, 2884, 8214, 13995, 10752, 14887, 3761, 5110, 11051, 10253, 13347, 13476, 1671, 2806, 6651, 7714, 729, 14764, 8585, 7161, 6217, 1052, 5060, 13236, 15902, 11160, 5160, 7007, 3316, 911, 10542, 10784, 8290, 14749, 16188, 5861, 7993, 9816, 555, 11206, 8713, 6282, 5265, 4276, 8126, 16218, 9771, 5036, 9871, 78, 16113, 152, 7039, 15151, 6898, 5511, 7559, 12411, 5081, 7842, 11026, 5622, 15851, 12391, 11011, 10592, 8479, 8835, 12328, 15564, 4075, 15065, 13533, 336, 15575, 2705, 5557, 3659, 828, 7202, 6135, 6378, 3812, 12253, 8613, 10732, 14716, 1977, 5961, 11989, 34, 2106, 666, 6799, 14252, 7127, 2135, 4670, 11109, 2860, 6548, 9584, 10503, 869, 15102, 3031, 5603, 14703, 10825, 15246, 2724, 11959, 702, 12687, 1485, 5141, 9626, 1240, 8646, 9398, 4504, 12453, 6726, 6001, 2853, 214, 4946, 6566, 15993, 16081, 10799, 434, 11120, 9345, 8837, 8865, 6603, 4417, 9360, 15169, 14897, 12983, 15504, 413, 3760, 6868, 13402, 12585, 7309, 5366, 3867, 14870, 6979, 6939, 9039, 13420, 10157, 13858, 6689, 4507, 11468, 10353, 9699, 9230, 3143, 447, 5835, 4060, 7303, 14098, 12494, 12972, 9366, 11176, 8201, 5889, 11408, 10523, 6027, 4788, 11642, 14058, 10773, 9721, 6114, 15607, 10835, 755, 2836, 327, 8267, 1851, 15293, 3906, 11630, 3729, 4650, 15013, 8723, 13965, 5981, 5324, 1201, 12304, 8918, 10795, 14680, 14773, 9037, 10982, 2, 511, 1154, 15823, 14096, 11444, 15224, 6453, 13687, 4277, 3308, 9776, 6085, 1575, 11129, 11586, 11057, 2981, 3563, 4578, 15111, 6763, 15187, 3036, 3156, 9604, 4990, 8763, 3387, 13005, 4020, 9141, 48, 10758, 2863, 13572, 14861, 15291, 10414, 15379, 5421, 1918, 12088, 15411, 8551, 5400, 15891, 4052, 4927, 10149, 6780, 9509, 3473, 10711, 12022, 15534, 1078, 14375, 10616, 42, 10340, 3215, 1319, 5633, 3487, 6279, 304, 5688, 14292, 16136, 14186, 4590, 8906, 330, 1722, 8276, 7162, 10135, 10644, 6015, 15550, 8535, 9389, 13124, 4402, 2936, 7092, 13161, 2751, 15561, 10858, 3713, 10718, 12242, 1028, 4469, 13767, 2607, 10573, 2496, 15499, 2741, 14532, 631, 3675, 6016, 10222, 6404, 11103, 8319, 11981, 5121, 1860, 1864, 7503, 12910, 7572, 8658, 364, 13149, 15603, 2449, 9981, 14147, 3725, 16000, 3815, 6886, 9664, 6290, 654, 16061, 1293, 1945, 5245, 10518, 11517, 6826, 1070, 14484, 3153, 88, 16027, 9665, 399, 6034, 2548, 422, 11975, 15376, 10596, 2131, 5197, 7952, 14953, 5256, 8575, 488, 11278, 13809, 1566, 6534, 531, 16226, 4951, 1533, 3861, 3665, 968, 7312, 7960, 1624, 6684, 1180, 11465, 15256, 5745, 5997, 8993, 11386, 6823, 4586, 320, 10050, 16260, 13403, 781, 11248, 1437, 549, 4698, 12446, 1559, 7717, 59, 11919, 2640, 6006, 2493, 16272, 1663, 3619, 795, 3967, 13142, 6179, 6496, 10292, 4791, 16249, 11992, 9629, 12128, 15104, 4430, 1774, 7136, 5678, 10196, 3455, 15367, 7864, 13853, 4207, 3712, 6501, 3220, 2979, 7267, 15874, 12089, 7816, 10231, 1616, 10242, 15297, 3956, 12576, 1060, 11125, 11674, 6817, 9606, 13953, 166, 12648, 10409, 15209, 4855, 12166, 11836, 5463, 4358, 10679, 13252, 9100, 2507, 3644, 4682, 3848, 13952, 10390, 7838, 4739, 3654, 15633, 2523, 14316, 15095, 8197, 162, 2620, 6039, 6157, 11582, 13431, 15062, 5500, 1189, 8381, 9015, 9944, 3660, 3013, 357, 9393, 12032, 8982, 16207, 6679, 611, 13821, 6253, 8527, 11677, 4044, 15011, 3826, 14135, 13352, 12103, 14574, 15635, 4675, 10087, 5864, 5924, 4193, 10429, 7962, 14819, 14107, 10841, 5494, 13465, 13316, 8663, 8495, 8198, 6405, 852, 13964, 1233, 10887, 5449, 3642, 6742, 4156, 6134, 11271, 4598, 13698, 1423, 174, 15686, 4811, 1122, 1691, 7823, 804, 8795, 6761, 12403, 559, 15032, 3017, 4187, 5711, 1714, 13781, 5524, 5707, 2622, 2586, 7790, 2994, 7402, 9056, 4333, 10802, 13577, 10568, 15259, 6288, 6968, 8139, 287, 122, 15139, 12484, 199, 7744, 9994, 4595, 572, 13334, 1799, 387, 1401, 4029, 16280, 9594, 5969, 8294, 8105, 5793, 3846, 14719, 4118, 1038, 13601, 13482, 12015, 8512, 12779, 5747, 3453, 5584, 6721, 425, 831, 3142, 15558, 15910, 5803, 4943, 12796, 12135, 5203, 15584, 2417, 6361, 1801, 7848, 2553, 10410, 14185, 9685, 11097, 1229, 16107, 1146, 1542, 7077, 11003, 1678, 2651, 12536, 7867, 10622, 14016, 4627, 1866, 16140, 15682, 13547, 12184, 771, 15798, 9838, 7666, 6928, 15972, 6379, 5168, 10510, 7761, 10926, 2070, 9783, 953, 2103, 15324, 6428, 4234, 8429, 11284, 15846, 10079, 5562, 1384, 13823, 2848, 8621, 15605, 9802, 10166, 2314, 4849, 4067, 5264, 9205, 7813, 3000, 4476, 6229, 8671, 8570, 1174, 5685, 341, 5021, 7101, 12867, 1754, 16360, 3218, 12344, 5295, 10105, 128, 16029, 8155, 13712, 16020, 15727, 12474, 787, 4267, 6400, 10236, 8476, 9759, 9813, 13468, 5387, 3805, 2559, 14919, 219, 933, 11939, 6479, 10501, 1271, 93, 4366, 13430, 14891, 7074, 7910, 2054, 2872, 10040, 3357, 1544, 4668, 5354, 12252, 2292, 14559, 1882, 8289, 4611, 2785, 15331, 4711, 3377, 10167, 7514, 3730, 9459, 14980, 11029, 276, 4749, 12005, 12041, 15835, 13169, 6299, 11290, 4385, 5926, 4343, 1628, 11577, 5579, 6218, 10266, 7210, 540, 12669, 16016, 3990, 14200, 11588, 12653, 14973, 3324, 318, 5061, 5158, 15006, 6895, 2304, 3461, 2334, 39, 7299, 12397, 13575, 6605, 13278, 9302, 3981, 12271, 5734, 16046, 11208, 14181, 10996, 11186, 6752, 5828, 4325, 13498, 4211, 10344, 9653, 517, 2506, 2235, 9558, 4012, 4984, 4391, 14152, 14461, 4629, 3807, 7898, 6741, 2812, 3178, 15180, 11502, 1296, 3242, 13583, 9217, 11823, 16308, 6562, 2369, 12715, 14266, 2619, 10145, 7239, 2084, 10330, 15294, 16156, 4064, 7776, 11170, 7690, 4833, 16238, 1440, 6736, 5027, 9363, 188, 4375, 5319, 13646, 7578, 11969, 11205, 4517, 3886, 14182, 7342, 2122, 9233, 11021, 10212, 4083, 2700, 9729, 8631, 8147, 13941, 13871, 13922, 1162, 14947, 14390, 6439, 14638, 15683, 3947, 13410, 11821, 3785, 10692, 2094, 8947, 1815, 2422, 7017, 3421, 9010, 6396, 11509, 11254, 12822, 5284, 4453, 2598, 11041, 12614, 8912, 8508, 3928, 10988, 13745, 7061, 6011, 9686, 321, 8222, 202, 4596, 7398, 4295, 1546, 13256, 1460, 12912, 6828, 14862, 3616, 14699, 1370, 13170, 4745, 8055, 4224, 1642, 10532, 9989, 1000, 8358, 6000, 1599, 8802, 12718, 11761, 13367, 14758, 4608, 2403, 194, 11247, 16364, 10766, 6069, 5851, 12985, 5476, 1472, 4829, 15142, 11616, 6491, 4457, 2677, 4363, 1348, 3905, 7167, 14453, 5234, 14005, 12101, 7247, 2382, 8965, 9878, 14235, 2845, 10910, 10807, 8080, 12782, 4344, 632, 11832, 13620, 5428, 3515, 5787, 8385, 5351, 13155, 4792, 6918, 3089, 13913, 6298, 7976, 14280, 3191, 12940, 11363, 3243, 9801, 1704, 7747, 3871, 8530, 12486, 7491, 10250, 3229, 1524, 10917, 6273, 15627, 9688, 5653, 11887, 6992, 8297, 15342, 9789, 12501, 3028, 10494, 8710, 8721, 2910, 14103, 13832, 1958, 10223, 13849, 16052, 15041, 15352, 9544, 7228, 4786, 3250, 4728, 1781, 6587, 4689, 16306, 13630, 12173, 9193, 12738, 15711, 932, 4662, 15070, 11124, 1282, 6448, 4817, 786, 10458, 7365, 9179, 9811, 12321, 15343, 6899, 13192, 404, 4456, 12388, 3628, 2846, 8547, 11533, 4329, 10989, 11704, 5672, 15764, 13162, 8219, 9388, 6480, 5727, 960, 11487, 10621, 1506, 13052, 12616, 9556, 2025, 3443, 7598, 5588, 2591, 10204, 3033, 13516, 731, 13004, 2738, 11142, 4447, 7579, 3265, 10194, 4311, 13876, 11467, 14023, 12820, 12560, 15515, 3390, 14852, 13710, 11436, 7427, 13446, 11906, 10474, 2208, 1246, 12096, 1435, 3988, 14050, 14364, 7970, 11738, 871, 13841, 264, 6062, 11038, 8869, 8265, 1317, 13931, 10957, 6003, 9329, 6089, 6648, 4146, 689, 10903, 12716, 11213, 11197, 151, 14720, 271, 10295, 16125, 10530, 11514, 9648, 7449, 12333, 13924, 5338, 15887, 2016, 700, 12757, 14519, 10264, 820, 7052, 11483, 4434, 12418, 4436, 446, 10002, 1388, 10116, 11310, 12283, 7819, 7698, 7496, 9986, 2928, 5756, 16067, 7417, 2479, 5016, 1412, 1205, 4142, 4991, 13363, 6070, 8841, 14803, 7945, 542, 3822, 2231, 2794, 646, 938, 15377, 1989, 308, 2077, 9511, 14286, 613, 9216, 11173, 7249, 15918, 7975, 13912, 12923, 11043, 638, 11709, 720, 9142, 12086, 15164, 11574, 9308, 3920, 10775, 4401, 7311, 12467, 13327, 15327, 9102, 16232, 7638, 9174, 7726, 4151, 2746, 9731, 1015, 14674, 15030, 10822, 4263, 15639, 14381, 68, 13681, 9252, 14100, 6260, 1104, 16382, 14089, 658, 15663, 4454, 817, 109, 1010, 3186, 4616, 15382, 13459, 918, 6104, 1359, 12019, 11778, 8692, 4962, 15491, 11853, 8720, 12332, 14134, 9891, 8847, 10948, 13471, 14831, 10315, 8656, 4035, 14477, 3217, 15203, 6701, 11542, 3225, 7763, 3683, 14830, 4967, 9035, 14242, 10010, 1586, 3456, 3764, 14295, 11256, 6415, 5035, 7063, 293, 7207, 3345, 9695, 14274, 9076, 15236, 9525, 14909, 13592, 13208, 13621, 8143, 14956, 10382, 9021, 2742, 10158, 3318, 10900, 15743, 1504, 15323, 2308, 8777, 8104, 6738, 10314, 7987, 3436, 956, 3205, 13097, 306, 7436, 9923, 4752, 507, 4510, 16197, 16132, 5885, 9146, 3199, 6854, 6693, 6626, 15044, 5922, 16095, 14975, 6756, 15508, 6555, 8618, 6638, 5142, 5318, 1312, 5210, 8522, 15806, 7229, 3634, 10426, 12748, 8928, 13229, 12949, 7277, 5772, 3348, 7727, 455, 5952, 3669, 14955, 7263, 4955, 13283, 1387, 11337, 13418, 11150, 5876, 3930, 2603, 230, 15178, 3875, 15353, 4688, 6063, 10729, 9761, 5379, 14275, 10385, 11295, 10422, 14658, 8113, 8734, 11512, 11023, 6294, 1168, 11884, 10432, 6556, 4872, 7567, 12751, 13112, 10023, 10968, 3097, 14059, 12528, 4328, 12414, 4563, 14551, 12196, 6923, 6494, 6590, 3688, 2053, 14944, 10641, 5111, 2101, 5251, 1539, 15486, 10940, 1771, 9043, 15205, 12511, 7668, 8681, 3249, 8749, 183, 13263, 8166, 16198, 10498, 7242, 14284, 3592, 10259, 3809, 11505, 714, 11963, 12625, 14790, 15871, 8911, 3594, 1786, 6999, 14065, 9906, 10456, 4799, 16243, 13902, 16235, 10090, 11297, 15171, 15107, 7778, 12325, 3261, 1605, 11782, 516, 6408, 4227, 1302, 1757, 2902, 10285, 9596, 740, 4805, 8589, 6571, 14243, 464, 761, 11606, 397, 8443, 653, 9583, 11680, 7428, 10076, 7570, 12784, 14741, 1277, 312, 9997, 13036, 13862, 9868, 10665, 7746, 1273, 9154, 1968, 3135, 16072, 7098, 3413, 4225, 3349, 12864, 5353, 5504, 14459, 11275, 11559, 10889, 139, 11174, 13388, 8026, 4039, 8554, 7222, 8540, 2252, 4987, 3532, 1321, 554, 9177, 16262, 5566, 10574, 4170, 11928, 1279, 1791, 1987, 6695, 6855, 11541, 4112, 7563, 12153, 6141, 2546, 5887, 6663, 12737, 10127, 9858, 58, 3517, 1668, 2997, 2368, 8583, 11958, 916, 13342, 3539, 8203, 11834, 966, 2621, 11116, 10742, 10094, 15191, 8348, 2031, 12126, 12676, 4889, 1115, 12065, 9187, 3814, 7582, 10663, 13972, 6137, 10611, 7883, 9151, 8778, 12481, 4316, 14472, 11791, 3503, 10267, 11530, 4547, 1434, 6655, 137, 13692, 4604, 604, 460, 2022, 6650, 3657, 3247, 4132, 9589, 15580, 7413, 9207, 5044, 10780, 11810, 11263, 12534, 1956, 14628, 8687, 4540, 1931, 7425, 16187, 4387, 5445, 5542, 15026, 2298, 10419, 1462, 9625, 2477, 16228, 5746, 3620, 10230, 14970, 10960, 15777, 10848, 8373, 12906, 3222, 2756, 13055, 11335, 8364, 15879, 15373, 5117, 14268, 10832, 4741, 12656, 6219, 354, 13432, 11104, 4757, 11185, 7041, 11083, 14692, 6505, 461, 7470, 2813, 1734, 14929, 1428, 2357, 9574, 6925, 7295, 5642, 7917, 4144, 3047, 12217, 1675, 12028, 15716, 405, 14534, 9608, 1337, 3984, 3808, 697, 10207, 1475, 13961, 3411, 12830, 6502, 3062, 5426, 4918, 6067, 4021, 13021, 8474, 6866, 196, 14913, 9331, 226, 10801, 12050, 8382, 2355, 2611, 9788, 3655, 7157, 12392, 1161, 11086, 10496, 1323, 4609, 7687, 1378, 1041, 6967, 5886, 12911, 2278, 10467, 5079, 16293, 1473, 9901, 11888, 11837, 4998, 8690, 12160, 6440, 5943, 11523, 13132, 5443, 958, 4273, 2509, 10516, 501, 11634, 10219, 2436, 12033, 3829, 8405, 5201, 2428, 12487, 920, 1048, 13505, 10550, 8288, 14820, 8277, 14452, 6389, 6667, 11216, 12931, 13597, 10370, 5063, 14371, 10556, 443, 9553, 9195, 6794, 14756, 15339, 12266, 12448, 5336, 3110, 11012, 3059, 11748, 12114, 13848, 1980, 6489, 3540, 6552, 1365, 3934, 15844, 3397, 7105, 16051, 15804, 3385, 2633, 9915, 6622, 5626, 9412, 11382, 4519, 11394, 621, 3364, 1356, 1641, 12251, 7767, 8065, 11705, 16248, 15088, 11262, 2141, 7806, 832, 2127, 3454, 14009, 8094, 7676, 11317, 3892, 10444, 12383, 5410, 13978, 11637, 1112, 12281, 8043, 1346, 16327, 8454, 5883, 14067, 3451, 1960, 12692, 8962, 4561, 7232, 6707, 2837, 15461, 15282, 8002, 11253, 486, 9188, 175, 3176, 5950, 12876, 15064, 8529, 6478, 11330, 1845, 16363, 3315, 13549, 16247, 12067, 10687, 5786, 2701, 14584, 662, 14727, 13153, 8386, 12881, 2792, 1699, 15741, 12930, 10607, 9475, 15155, 15864, 2362, 7677, 5146, 7114, 15688, 7022, 4566, 15562, 7028, 1503, 229, 10121, 2599, 709, 9808, 16013, 8500, 6586, 4986, 6258, 4579, 8127, 8058, 5125, 16279, 11030, 10760, 3721, 14057, 4400, 8159, 14389, 2642, 2489, 13802, 14011, 14465, 3668, 5959, 10853, 4373, 12439, 1495, 12794, 3128, 15452, 6874, 2843, 1160, 5059, 1849, 2158, 10260, 3065, 7548, 8110, 4672, 15697, 9274, 10014, 4529, 12349, 3608, 7541, 383, 7359, 14686, 6757, 965, 2095, 15978, 14577, 9605, 7626, 7765, 8669, 14422, 12565, 15150, 11376, 7789, 13795, 13642, 7515, 504, 15511, 9176, 11220, 4877, 1366, 1944, 11794, 12510, 4551, 10998, 1159, 13870, 11970, 9545, 4549, 15003, 726, 13064, 15290, 6120, 14398, 11179, 5001, 5071, 9472, 6683, 12158, 9754, 14743, 6191, 6277, 6813, 5663, 8157, 10185, 5841, 9656, 12555, 1392, 53, 5651, 1719, 4160, 9018, 12654, 3305, 14511, 8622, 2881, 288, 3674, 8733, 3505, 15189, 3355, 3162, 9161, 6187, 3410, 13890, 3682, 5515, 6368, 16054, 9082, 7200, 3304, 107, 603, 11912, 6573, 11449, 7018, 259, 9215, 5547, 9463, 4331, 12222, 5704, 15642, 7519, 14261, 10044, 14543, 13878, 12027, 13610, 7233, 8216, 1665, 7710, 10933, 12317, 12264, 11092, 11047, 13415, 4308, 12759, 11146, 12670, 12496, 14446, 2922, 9258, 14996, 8657, 5532, 10816, 10031, 16039, 11736, 13582, 13269, 14211, 8920, 3168, 4036, 7701, 10055, 4292, 4865, 11377, 10335, 15963, 587, 9693, 14037, 5821, 5695, 7808, 8078, 9088, 12839, 16053, 8756, 8890, 15774, 309, 9638, 14583, 7134, 754, 6099, 6387, 9218, 343, 12060, 13977, 3678, 9347, 6127, 13366, 12888, 8445, 1684, 8860, 8241, 586, 6596, 1130, 12631, 10735, 13589, 2962, 4219, 12097, 11662, 9383, 8576, 6367, 1870, 2832, 7903, 14073, 9493, 7545, 10515, 10012, 4433, 15542, 1985, 12760, 6160, 8767, 2454, 2805, 15641, 14425, 13044, 1391, 10272, 12731, 14835, 834, 14234, 3381, 14757, 6827, 3006, 3649, 8378, 11166, 6074, 2265, 1013, 3183, 4147, 10560, 8346, 11111, 272, 7260, 5497, 8086, 9835, 7809, 6858, 14245, 942, 3351, 979, 14883, 4968, 1763, 3933, 3004, 15481, 8436, 1249, 7637, 15983, 2348, 1085, 13059, 8935, 628, 10971, 9777, 4923, 16074, 3514, 13084, 1006, 13822, 2072, 213, 5967, 6892, 4703, 14262, 13050, 1833, 13607, 10839, 16116, 2524, 111, 16162, 8806, 4131, 10386, 15839, 8017, 12316, 2783, 4166, 7949, 11134, 5977, 12443, 6352, 5530, 11726, 7446, 6681, 2171, 15997, 7549, 483, 872, 467, 919, 11976, 11831, 13960, 856, 7613, 1738, 9756, 13550, 13580, 8000, 11378, 11286, 6331, 8463, 14344, 8273, 15262, 13906, 8898, 10652, 3320, 708, 8816, 2580, 15285, 9344, 3085, 12092, 11235, 13540, 3122, 16312, 5233, 15581, 5037, 7163, 450, 688, 12270, 7802, 4448, 12261, 6212, 13134, 14210, 10362, 5124, 4222, 3916, 14985, 2373, 14766, 3811, 1597, 15593, 3182, 10762, 5843, 13025, 10311, 10020, 7733, 11845, 11596, 4306, 5008, 10310, 9769, 5956, 1429, 10985, 3879, 8732, 7556, 12941, 13756, 2186, 10606, 11747, 12538, 5791, 7383, 13387, 3088, 6953, 10698, 8452, 3780, 15687, 7032, 6398, 12190, 6729, 12350, 6072, 15498, 3188, 10997, 7216, 1762, 5849, 1881, 362, 3783, 4411, 6540, 2059, 14548, 1199, 13608, 10364, 4350, 2299, 12164, 701, 6748, 12717, 12926, 5632, 4298, 6407, 15239, 8605, 6861, 8424, 4424, 481, 5701, 9254, 13198, 14568, 9828, 15218, 11548, 3149, 13844, 9573, 13649, 11633, 12849, 1220, 159, 2388, 10782, 6283, 11554, 1055, 15298, 5143, 15349, 13406, 6985, 9253, 13638, 11202, 3728, 15733, 4917, 9303, 9738, 13928, 4565, 14614, 6255, 1583, 7741, 3623, 9004, 3755, 5047, 4370, 905, 7719, 11788, 10557, 11879, 11015, 5559, 2877, 16333, 6375, 11316, 3583, 10949, 16086, 13966, 4353, 5609, 14158, 7274, 14026, 13102, 10081, 4813, 14307, 6395, 15819, 6668, 15395, 4235, 4960, 7096, 12697, 10791, 12882, 13534, 5073, 14159, 4898, 4607, 6045, 11152, 13568, 9900, 7089, 1584, 15690, 3958, 9416, 5307, 2645, 98, 1596, 1535, 14433, 12809, 12735, 12647, 9071, 6915, 2723, 11078, 652, 12430, 11303, 16085, 3698, 7253, 12567, 15629, 1375, 15770, 10189, 16199, 67, 5738, 4125, 5062, 15192, 8146, 8056, 4948, 11920, 4154, 3329, 8347, 6504, 6044, 9506, 9569, 1525, 5611, 3460, 912, 10436, 15357, 8007, 10561, 1420, 5352, 3044, 2379, 15815, 8150, 3223, 14432, 5855, 198, 326, 14533, 7671, 4155, 799, 11342, 9227, 10017, 273, 12591, 13276, 9894, 2291, 13255, 16322, 13285, 914, 3332, 3209, 15147, 14469, 4628, 11785, 3297, 15505, 2411, 682, 11860, 8447, 10399, 14501, 3356, 12598, 11946, 13531, 14443, 9939, 6750, 10770, 9498, 12586, 5860, 9285, 6052, 13631, 11679, 14393, 8472, 2234, 4694, 3596, 14613, 11827, 3272, 8286, 4895, 6920, 7625, 11687, 12967, 7332, 15036, 1082, 377, 989, 4637, 4199, 2438, 10298, 5709, 9872, 944, 11697, 4264, 15488, 13851, 14366, 10058, 15156, 14317, 4701, 12771, 6441, 5970, 2602, 6138, 3445, 5798, 16048, 12606, 2938, 11564, 15858, 8593, 8786, 14231, 6973, 6653, 6010, 3208, 10430, 9875, 11446, 3437, 15535, 15097, 2930, 5910, 13763, 11700, 15261, 16134, 2047, 3084, 8488, 3600, 11940, 11766, 5480, 15539, 11695, 8321, 14454, 11843, 15346, 8494, 2439, 13357, 14410, 6657, 4082, 7931, 2625, 12895, 9577, 4275, 12478, 11891, 10787, 13221, 3367, 618, 12836, 12412, 4827, 10909, 16371, 6272, 5980, 12298, 14895, 6351, 6476, 8844, 16316, 14380, 4307, 15193, 14149, 8464, 3322, 8164, 13688, 4141, 763, 6815, 2376, 9070, 5288, 3550, 8897, 6905, 11060, 4775, 9300, 12497, 5191, 12407, 3262, 5420, 4511, 1361, 10659, 10721, 73, 2880, 11084, 3775, 4119, 9410, 12076, 562, 15946, 13034, 727, 10092, 3144, 6906, 1809, 7738, 12813, 5874, 14269, 6426, 6275, 5122, 13933, 480, 794, 2165, 11508, 16110, 10030, 12359, 8742, 5068, 15621, 1999, 14076, 14918, 10124, 3946, 4874, 2391, 503, 15438, 13842, 10312, 10005, 10877, 8819, 5430, 12878, 16277, 179, 8193, 7547, 2876, 2864, 15530, 12037, 13569, 7081, 12454, 11044, 2784, 3081, 12493, 126, 3096, 13641, 9330, 6843, 13988, 9715, 12133, 16089, 15587, 7088, 2176, 9764, 4336, 2614, 11550, 12247, 4158, 13110, 10325, 2849, 11358, 10619, 15876, 2139, 8460, 7959, 2048, 3161, 13896, 3979, 2564, 13048, 10485, 12072, 8821, 7878, 14402, 9962, 2573, 16252, 484, 2501, 14647, 186, 16294, 11348, 9309, 7414, 12818, 8128, 15133, 13372, 8076, 3399, 10608, 14665, 8602, 7437, 13847, 15375, 5184, 15947, 13904, 14310, 12971, 9486, 13152, 2808, 859, 11141, 2126, 8499, 12154, 9718, 3769, 4632, 4859, 9482, 14008, 3486, 5473, 6944, 9196, 7431, 7723, 13805, 12655, 14636, 9708, 10566, 192, 12186, 6334, 257, 6538, 16339, 7527, 11789, 12776, 3429, 14357, 929, 2116, 14906, 4794, 890, 6228, 10755, 8196, 9919, 508, 4883, 1957, 3706, 6486, 4699, 3003, 783, 7184, 1247, 15454, 3733, 154, 15925, 3878, 14480, 4393, 14036, 14225, 9515, 13301, 11741, 13882, 13451, 15484, 7830, 13640, 1889, 5880, 15426, 6432, 12819, 4617, 13321, 14419, 3099, 12482, 8010, 11058, 7093, 9597, 6685, 1602, 1324, 6152, 10182, 5153, 2608, 12948, 14555, 15283, 7716, 8936, 16212, 280, 14349, 13725, 522, 1740, 14518, 9456, 12754, 11321, 1907, 9714, 12803, 3506, 815, 5043, 2408, 10482, 9504, 4499, 7694, 1570, 1876, 10601, 6506, 15950, 14964, 6116, 2399, 13386, 10768, 10728, 10684, 9548, 10141, 3422, 7531, 15278, 575, 15660, 1692, 1993, 3804, 1579, 10384, 6091, 8220, 11720, 15599, 16045, 13261, 2241, 9773, 12811, 3627, 6167, 14196, 4635, 3140, 7468, 12052, 8702, 8899, 15988, 5446, 7748, 4676, 14358, 2307, 7745, 7447, 13249, 845, 15263, 11698, 6204, 14877, 11070, 11440, 5677, 573, 13325, 8876, 5206, 9069, 9652, 2958, 14257, 4755, 3467, 13270, 15847, 7062, 13535, 8315, 12371, 9294, 12176, 9429, 15015, 8148, 10068, 16062, 9299, 7876, 13250, 2337, 4710, 4444, 14379, 1812, 2680, 2359, 2227, 5186, 7650, 16008, 1169, 7185, 9116, 6859, 9991, 7075, 12702, 12850, 8450, 18, 12875, 8924, 103, 7280, 7337, 8034, 15114, 9128, 6322, 16270, 12974, 1385, 15083, 13751, 4543, 10878, 9276, 14248, 1802, 10308, 3593, 13015, 5484, 12990, 1839, 9273, 12741, 3120, 9791, 8272, 8526, 5668, 9510, 2879, 5576, 10604, 217, 3073, 2264, 3181, 1633, 6455, 7517, 7577, 1971, 5805, 14060, 12195, 10093, 5161, 1547, 2170, 5104, 14881, 11246, 6849, 10551, 8754, 14115, 6425, 4580, 8905, 1929, 9341, 5590, 13775, 5628, 9645, 5582, 4798, 2381, 4646, 3964, 10883, 8359, 13663, 14331, 1844, 7979, 14537, 2715, 2260, 14383, 9945, 8567, 12677, 7418, 13815, 3294, 9938, 3187, 9794, 7584, 10486, 15329, 6225, 4762, 14939, 9280, 15921, 11000, 8186, 1274, 1946, 11359, 9436, 14491, 16185, 12856, 1568, 14943, 10481, 12787, 4149, 5503, 4337, 15056, 15129, 12282, 7208, 13481, 10798, 5404, 12874, 5378, 5452, 11492, 15736, 10597, 2800, 1014, 14841, 558, 2581, 64, 11218, 11454, 5133, 15669, 9268, 7537, 14322, 15009, 2297, 5339, 1688, 9014, 15604, 1314, 2963, 5447, 7286, 528, 9109, 8046, 1972, 8496, 9752, 4821, 8149, 279, 4582, 1658, 6811, 1353, 3741, 2132, 4217, 15862, 15731, 4916, 10373, 6269, 6582, 10977, 9324, 224, 7373, 10626, 15288, 4055, 16157, 13039, 14691, 3179, 2870, 9418, 7024, 14296, 9646, 9469, 7865, 1637, 13901, 9990, 12723, 13491, 9711, 2267, 6380, 12030, 11690, 2999, 2890, 9885, 11326, 1811, 14490, 10392, 5013, 8011, 11100, 15098, 14522, 3450, 9780, 9908, 3405, 6708, 6550, 15674, 14828, 14297, 201, 5662, 3493, 5456, 2810, 4252, 173, 13253, 15852, 11960, 6047, 12746, 14267, 13242, 5176, 12280, 14236, 7462, 14226, 5748, 7725, 15450, 1443, 16381, 15974, 46, 687, 9143, 16123, 7473, 6724, 3582, 8524, 8024, 5313, 9940, 9281, 12471, 6703, 670, 5680, 11464, 11631, 8746, 15464, 12726, 7382, 242, 7313, 1120, 2484, 11850, 6814, 1281, 14056, 1589, 15849, 8361, 15631, 13939, 13168, 14784, 7020, 13392, 11743, 2592, 15968, 2068, 3767, 12524, 5350, 13396, 15183, 3538, 9921, 11488, 12424, 4709, 14112, 14053, 5136, 10118, 14273, 8077, 15286, 594, 14791, 301, 9933, 1096, 2790, 13555, 14977, 7544, 15251, 9860, 7783, 10291, 10833, 6805, 1924, 15018, 9435, 1464, 14478, 1261, 6782, 15273, 3011, 1846, 10669, 9424, 9445, 5468, 2748, 7589, 13877, 13596, 7029, 13294, 3116, 479, 4567, 7033, 1139, 6688, 300, 4228, 11269, 12016, 13035, 8975, 4753, 2803, 7565, 13033, 5150, 4660, 6427, 2793, 5771, 1880, 4065, 5945, 10838, 2018, 16017, 14188, 12120, 13297, 14718, 9284, 12425, 908, 6781, 10882, 376, 14655, 11066, 3508, 5971, 11480, 810, 4994, 7906, 10309, 13343, 14641, 2557, 5792, 13317, 3900, 485, 941, 5830, 9826, 10562, 12704, 13295, 2780, 4771, 1453, 774, 2196, 7896, 6055, 7478, 8895, 5258, 14581, 2833, 1922, 6131, 13043, 13588, 11304, 2414, 2574, 16239, 8420, 4300, 2987, 3552, 4120, 3546, 2081, 14468, 13362, 818, 10428, 5664, 8531, 7636, 3409, 1836, 11601, 3382, 11941, 940, 11572, 2542, 14, 747, 6686, 1219, 2669, 4671, 8187, 8552, 12230, 934, 6747, 3108, 9466, 8774, 1820, 7319, 16189, 15906, 4835, 7659, 5778, 439, 6349, 11122, 8790, 15555, 12802, 12091, 10820, 1372, 10658, 12695, 13018, 10654, 1803, 2120, 14954, 1696, 7602, 15242, 8603, 3087, 11423, 15380, 15364, 11819, 2743, 894, 12021, 10213, 3559, 10374, 4819, 15249, 993, 6795, 6984, 5767, 10643, 10261, 10420, 9055, 3446, 10756, 5550, 10972, 16258, 6394, 532, 371, 5189, 4708, 7538, 520, 5818, 12505, 1769, 12297, 8122, 16059, 1991, 11414, 4102, 348, 1171, 15137, 14860, 4313, 3618, 13370, 4959, 14333, 12235, 14530, 7469, 6431, 14837, 232, 12833, 9164, 12010, 145, 4016, 7581, 7909, 842, 524, 13566, 14882, 11448, 10555, 15308, 8594, 15909, 6281, 8757, 4092, 14298, 5554, 7331, 423, 3701, 8049, 11867, 12806, 5834, 838, 16206, 5054, 14545, 8355, 14662, 8780, 3239, 3788, 3258, 5389, 12203, 3459, 1333, 13182, 14013, 12193, 6647, 2873, 13517, 14742, 8591, 1969, 11110, 13647, 3343, 7555, 3574, 7432, 4394, 15540, 15766, 15370, 13700, 8919, 6246, 5115, 9913, 3692, 3942, 69, 373, 6800, 13625, 7083, 11315, 3105, 1932, 9317, 13090, 610, 14781, 4674, 4281, 3884, 2163, 8545, 8396, 8393, 13472, 8932, 9040, 12402, 8814, 13548, 4421, 7209, 13499, 7645, 7546, 6149, 4663, 1667, 14796, 13867, 1840, 7122, 2821, 16276, 5227, 9050, 10662, 7857, 1252, 8258, 7498, 384, 13173, 10317, 10108, 16341, 3790, 16298, 16193, 2380, 31, 12824, 2258, 7340, 6806, 1830, 10060, 4619, 5171, 14197, 12743, 9049, 361, 12070, 2875, 811, 16372, 7718, 1785, 5397, 3502, 15037, 9968, 11590, 10188, 13683, 10493, 5398, 1805, 4490, 7494, 8303, 7351, 823, 4091, 6997, 13914, 1290, 11904, 8012, 6879, 9290, 2823, 9204, 7796, 4423, 12249, 12476, 2514, 6727, 2249, 3032, 1381, 8815, 9023, 12953, 10234, 1927, 4165, 15125, 5871, 543, 5625, 7475, 14853, 10994, 2276, 4550, 462, 11624, 5935, 13341, 5516, 9874, 809, 12999, 5469, 11813, 1058, 4169, 3547, 426, 1587, 5083, 4774, 8655, 11090, 1424, 13573, 12592, 5884, 12696, 110, 13817, 90, 15929, 11972, 5056, 711, 16044, 408, 14922, 931, 245, 4714, 8789, 10727, 8725, 13850, 8109, 10927, 2735, 11848, 3129, 2155, 13216, 1459, 12168, 10630, 10789, 3606, 2164, 4903, 1995, 4088, 15572, 16255, 9183, 236, 12260, 2245, 2643, 2129, 7385, 7817, 340, 7195, 10737, 2437, 4836, 14875, 14151, 6237, 8845, 8307, 15867, 15789, 10969, 8581, 141, 3498, 11518, 12574, 15991, 7863, 9036, 7037, 7368, 1204, 1983, 14483, 7702, 10064, 14961, 11752, 2629, 4870, 12228, 8255, 10338, 4559, 3882, 11589, 6831, 16070, 14689, 8830, 3366, 15487, 1541, 10796, 76, 10898, 3335, 5682, 15277, 6485, 11922, 10824, 7112, 7155, 8430, 8863, 7525, 6325, 4680, 4152, 11820, 12177, 11670, 7388, 2330, 6951, 2571, 5867, 997, 4911, 3309, 5472, 2253, 7640, 12480, 16256, 2274, 12924, 16342, 11415, 5218, 584, 5342, 9415, 7760, 7599, 12572, 5953, 3152, 10812, 13695, 14426, 9500, 14708, 6465, 12044, 3198, 15473, 2110, 15586, 6330, 14829, 6527, 13762, 5374, 14845, 11604, 3605, 10594, 1582, 4489, 6357, 1053, 9796, 813, 7409, 9862, 3438, 7289, 13257, 14066, 12417, 4830, 5533, 1510, 12564, 16274, 6472, 15144, 1877, 8773, 5583, 16022, 2504, 4570, 4395, 4197, 10642, 15996, 5881, 14305, 15336, 10967, 5405, 15366, 12355, 15720, 6301, 2822, 15840, 14608, 6635, 4669, 1554, 13248, 745, 12602, 8682, 5459, 15447, 7926, 8811, 643, 6168, 10731, 8215, 9453, 16005, 225, 11379, 15717, 13040, 10585, 8944, 14088, 6535, 14759, 5836, 7091, 9407, 12768, 10980, 13421, 11774, 8838, 11227, 9999, 8380, 1152, 10668, 14187, 14885, 5023, 12073, 9543, 11563, 7457, 8861, 3573, 16179, 470, 12118, 2982, 10169, 6975, 16049, 8945, 15578, 2312, 3115, 13799, 6702, 9111, 14001, 15462, 5975, 14212, 2683, 3993, 16205, 9044, 2513, 12009, 14715, 10623, 9118, 9304, 2995, 5103, 7390, 10694, 13628, 8404, 1955, 4431, 2903, 10349, 12517, 12667, 14497, 5931, 15545, 5689, 6559, 9617, 15213, 10818, 3471, 4376, 3798, 5770, 1134, 1930, 13777, 9814, 2649, 5228, 9426, 12781, 3160, 10235, 2415, 13783, 11416, 13217, 7657, 9866, 14466, 6574, 1471, 13787, 14306, 11009, 14356, 764, 2868, 3230, 13389, 866, 12921, 7130, 8716, 14092, 11210, 13425, 8771, 10733, 5807, 8481, 5279, 5540, 8976, 1076, 14311, 5948, 14739, 8439, 3055, 4995, 13690, 9223, 15619, 1898, 4538, 719, 62, 13165, 1099, 13502, 499, 2838, 11143, 13852, 3480, 876, 9635, 12793, 11544, 6732, 12786, 6964, 7217, 9843, 2754, 14856, 792, 8677, 13765, 9876, 6215, 5737, 15405, 14542, 3757, 10138, 9670, 4096, 5936, 13786, 15780, 6359, 8542, 3041, 6508, 10156, 11484, 15522, 332, 9873, 12357, 15069, 3901, 2779, 8624, 648, 16332, 10224, 95, 12095, 16236, 8737, 5850, 10558, 4592, 12200, 7284, 14826, 14451, 8296, 10179, 11555, 8670, 16014, 15270, 13306, 15412, 14075, 2739, 7827, 6493, 16375, 11381, 5182, 7080, 1703, 6150, 7953, 14630, 9542, 6797, 16287, 2831, 14573, 9522, 15807, 7533, 8511, 9244, 6363, 15371, 16160, 12662, 7915, 8759, 12466, 1650, 16036, 14818, 5837, 9064, 285, 13081, 5613, 1911, 10339, 1213, 2294, 7858, 4030, 14495, 10593, 16263, 9108, 15059, 11200, 7394, 11214, 14659, 7536, 10227, 6341, 12996, 10814, 11772, 8425, 6645, 5357, 11790, 925, 4198, 5139, 7227, 2807, 886, 5140, 568, 7036, 2842, 3724, 2012, 1110, 14230, 4033, 15761, 9349, 9592, 14014, 3795, 6356, 41, 11557, 4964, 15074, 8397, 1712, 3749, 14173, 15772, 2980, 8678, 7508, 8752, 400, 15767, 2178, 8543, 4560, 11648, 15384, 13456, 3679, 15230, 14064, 3581, 6734, 9277, 9343, 992, 12892, 15341, 1902, 5641, 15456, 2277, 8018, 12279, 7380, 7042, 16289, 9624, 13717, 3484, 13339, 13879, 11765, 4600, 10759, 10899, 1728, 1695, 11619, 2242, 3817, 1564, 15474, 13539, 3334, 7840, 9496, 13000, 157, 4380, 13218, 13611, 10716, 14502, 705, 2852, 4921, 13024, 3999, 1517, 9651, 1621, 13996, 4256, 11138, 4315, 567, 267, 11230, 12763, 16368, 12360, 4462, 13448, 1567, 6507, 4850, 8753, 7847, 11402, 11693, 165, 8379, 15079, 5549, 3352, 4583, 614, 11641, 6068, 13105, 9912, 72, 10685, 14116, 12499, 9751, 13511, 12343, 9766, 7203, 8349, 2750, 2269, 2684, 10470, 13428, 5525, 14417, 3874, 6807, 5725, 8887, 3651, 14063, 5020, 16250, 5415, 164, 4458, 12843, 9432, 9600, 639, 4157, 13755, 9840, 3253, 16240, 9534, 6314, 13184, 2552, 6274, 13030, 2594, 14814, 10761, 8108, 6304, 1623, 1186, 7609, 2623, 1919, 6836, 2844, 2365, 9681, 10300, 9667, 5396, 12199, 2613, 7892, 4697, 6342, 6897, 1709, 13125, 15211, 8282, 6996, 10113, 3379, 12013, 12208, 11931, 14442, 10600, 10232, 13910, 9396, 1556, 11749, 495, 15749, 13672, 2583, 9602, 11552, 943, 5050, 15306, 14015, 7904, 13373, 12980, 9975, 6932, 1822, 6048, 15374, 4244, 14464, 11339, 1114, 10559, 7244, 13246, 10647, 8620, 12167, 2289, 9397, 3996, 2885, 9163, 372, 11076, 665, 15449, 8317, 13480, 4736, 15524, 13449, 10880, 6211, 6185, 11193, 5312, 8408, 5212, 9465, 4837, 3358, 7646, 3359, 7146, 4042, 5129, 3150, 11636, 8001, 2679, 15381, 11300, 11157, 14506, 5198, 9011, 13045, 6785, 13515, 7377, 13973, 11547, 12522, 2331, 8864, 13461, 6315, 6665, 8758, 10288, 8761, 5522, 3124, 8248, 11016, 521, 16011, 10168, 1595, 11872, 2829, 15057, 9903, 8051, 4615, 14606, 7241, 663, 3346, 5369, 8862, 5593, 6713, 7442, 3380, 2285





};  // 6 input={0, 2, 4, 8, 9, 10, 11, 12, 16, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 39, 40, 44, 46, 49, 51, 52, 61, 63};
  // input={0, 2, 3, 5, 6, 9, 10, 11, 12, 13, 15, 17, 18, 19, 21, 27, 28, 30, 32, 34, 35, 36, 41, 42, 43, 44, 47, 51, 52, 56, 57, 58, 63, 67, 69, 70, 74, 76, 77, 78, 79, 81, 88, 89, 91, 93, 94, 97, 98, 99, 101, 103, 106, 107, 110, 112, 113, 114, 118, 119, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 141, 142, 144, 145, 147, 148, 149, 151, 152, 154, 158, 159, 163, 165, 166, 167, 168, 170, 171, 172, 174, 175, 176, 178, 181, 182, 183, 185, 187, 188, 189, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 210, 214, 218, 219, 220, 221, 222, 223, 228, 229, 231, 232, 235, 236, 241, 245, 249, 250, 251, 252, 254, 258, 262, 265, 266, 267, 269, 270, 271, 273, 274, 280, 282, 285, 289, 290, 291, 292, 298, 301, 302, 304, 306, 307, 308, 310, 312, 313, 316, 317, 318, 319, 320, 321, 323, 325, 327, 328, 331, 338, 339, 340, 346, 348, 350, 352, 354, 355, 358, 359, 360, 363, 364, 369, 370, 373, 375, 380, 382, 385, 386, 387, 391, 392, 393, 396, 397, 400, 403, 405, 409, 411, 413, 414, 416, 417, 419, 421, 423, 424, 425, 426, 427, 429, 431, 435, 437, 439, 442, 443, 444, 448, 450, 452, 454, 456, 460, 461, 463, 465, 469, 472, 474, 475, 477, 478, 479, 485, 486, 487, 489, 492, 493, 496, 499, 500, 501, 503, 511, 512, 513, 519, 520, 521, 522, 525, 527, 531, 532, 534, 535, 536, 541, 543, 546, 548, 549, 550, 551, 554, 555, 556, 557, 558, 561, 563, 564, 567, 568, 569, 573, 574, 575, 576, 577, 580, 582, 583, 584, 586, 588, 590, 591, 593, 594, 596, 598, 601, 609, 611, 613, 615, 617, 620, 625, 628, 629, 630, 631, 632, 633, 634, 635, 640, 643, 644, 647, 648, 649, 650, 652, 654, 655, 657, 658, 659, 660, 661, 662, 667, 668, 670, 671, 672, 673, 675, 682, 686, 689, 690, 701, 702, 704, 706, 707, 708, 709, 710, 712, 713, 714, 719, 720, 722, 727, 728, 731, 732, 733, 735, 736, 737, 739, 740, 743, 744, 745, 746, 748, 751, 753, 756, 760, 763, 764, 765, 767, 769, 770, 772, 773, 774, 776, 778, 781, 782, 783, 784, 787, 788, 789, 790, 791, 794, 798, 799, 800, 801, 802, 803, 804, 807, 809, 812, 813, 818, 820, 822, 823, 825, 827, 828, 829, 830, 831, 832, 834, 836, 837, 838, 840, 842, 843, 844, 845, 846, 848, 849, 852, 854, 856, 857, 859, 860, 863, 864, 865, 866, 867, 872, 873, 874, 875, 878, 879, 880, 881, 882, 885, 886, 888, 890, 895, 896, 902, 904, 905, 907, 908, 909, 910, 913, 915, 919, 921, 922, 923, 924, 925, 929, 932, 933, 934, 935, 938, 939, 945, 951, 952, 954, 956, 957, 962, 963, 966, 967, 968, 969, 971, 975, 981, 982, 984, 986, 991, 997, 1000};


  // input={40, 51, 37, 38, 27, 50, 14, 5, 42, 53, 61, 20, 21, 16, 15, 22, 63, 30, 25, 47, 6, 19, 17, 23, 13, 56, 26, 9, 52, 45, 24, 12, 1, 7, 62, 41, 28, 32, 58, 8, 0, 29, 39, 35, 43, 60, 57, 59, 11, 31, 3, 44, 54, 46, 36, 4, 48, 2, 34, 18};
// input={104, 89, 69, 74, 25, 31, 23, 75, 57, 81, 0, 13, 60, 61, 119, 71, 79, 46, 124, 93, 22, 32, 112, 39, 102, 94, 41, 28, 101, 64, 17, 77, 21, 35, 83, 99, 88, 54, 53, 26, 92, 18, 55, 36, 48, 125, 68, 91, 49, 42, 4, 33, 27, 44, 84, 107, 12, 6, 34, 66, 123, 113, 5, 30, 16, 38, 116, 15, 29, 37, 97, 115, 73, 62, 78, 96, 87, 50, 63, 45, 8, 7, 10, 100, 11, 19, 105, 82, 76, 20, 9, 98, 108, 1, 52, 51, 2, 118, 120, 110, 122, 59, 103, 86, 109, 3, 58, 65, 126, 106, 95, 80, 70, 72, 90, 127, 114, 56, 121, 67, 85, 111, 14, 117, 40, 47, 24, 43};
// input={0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31};
  if(outputToFile){
    freopen("output.txt","w",stdout);
  }

  // std::vector<std::string> fvalues={"000000","000001","000100","001000","000101","001010","001100","100100","001101","001110","110010","001111"};
  // std::vector<std::string> fvalues={"000000","000001","000010","000100","001000","000101","001010","001100","100100","001101","001110","110010","001111"};
  std::vector<std::string> fvalues;
  genInput(input,bitsize,fvalues);
  printV(input);
  printV(fvalues);

  auto begin = std::chrono::high_resolution_clock::now();
  bdt fbdt=buildcompactbdt(fvalues);
  auto end = std::chrono::high_resolution_clock::now();

  // for(int i=0;i<fvalues.size();i++){
  //   std::cout << evalcompactbdt(fbdt,fvalues[i])<<" | "<< std::bitset<bitsize>(fvalues[i]) << '\n';
  // }
  //
  // std::cout << evalcompactbdt(fbdt,"1111") << '\n';

  testCorrectness(fbdt,input);

  printTree(fbdt,fvalues[0].size()+1);
std::cerr <<'\n';

// std::cout << evalcompactbdt(fbdt,"0100") << '\n';

  double nodeNum=getTreeNodeNum(fbdt);
  std::cout << "\n\n the tree has "<<nodeNum << " nodes\ncompare to tree in ass1 require "<<getAss1NodeNum()<<" node\nreduced by "<<((getAss1NodeNum()-nodeNum)*100/getAss1NodeNum())<<"%\n";
  double t=std::chrono::duration_cast<std::chrono::nanoseconds>(end-begin).count();
  std::cout << "\n the buildcompactbdt function takes "<< t/1000000 << "ms\n";
  std::cerr <<'\n';

  deltree(fbdt);
  return 0;
}

void genMinterm(const std::vector<std::string>& fvalues, std::vector<term>& minterms){ //checked order right
  int numwd=fvalues[0].size()/wdlength;
  int lastlen=fvalues[0].size()%wdlength;
  for(int i=0;i<fvalues.size();i++){
    term minterm(numwd+1,0);
    int p=fvalues[0].size()-1;

    //MS wd
    wd word=0;
    for(int z=lastlen-1;z>=0;--z){
      if(is1(fvalues[i][p])){
        word=word*2+1;
      }else{
        word=word*2;
      }
      --p;
    }
    minterm[numwd]=word;

    //less siginficant wd
    while (p>=0) {
      wd word=0;
      for(int z=wdlength-1;z>=0;--z){
        if(is1(fvalues[i][p])){
          word=word*2+1;
        }else{
          word=word*2;
        }
        --p;
      }

      minterm[(p+1)/wdlength]=word;
    }
    //   std::cout << minterm[0] << '\n';
    // printMinterm(minterm);
    minterms[i]=minterm;
  }
}

bool is1(char c){
  if(int(c)==48){
  //check if the char is "0"
    return false;
  }else{
  // treat not "0" as 1
    return true;
  }
}

template <class T>
bool notRepeated(std::vector<T>& v, T a){
  for(int i=0;i<v.size();i++){
    if(v[i]==a){
      return false;
    }
  }
  v.push_back(a);
  return true;
}

bdt newnode(std::string val, bdt left, bdt right){
  bdt pt=new bdnode;
  pt->val=val;
  pt->left=left;
  pt->right=right;
  return pt;
}

bool isPower2(const term& v){
  bool alreadyPw2=false;
  for(int i=0;i<v.size();++i){
    if(v[i] != 0){
      if((v[i] & (v[i] - 1))){//if is pw2, x&(x-1) is 0
        //when is not pw2
        return false;
      }else{
        //when is  pw2
        if(alreadyPw2){
          return false;
        }
        alreadyPw2=true;
      }
    }
  }
  return alreadyPw2; //will return true if is not all 0
}

// modeified from https://stackoverflow.com/questions/23856596/how-to-count-leading-zeros-in-a-32-bit-unsigned-integer
inline int leading1(uint64_t x){ ///01000 returns 4
  x=x|(x>>1);
  x=x|(x>>2);
  x=x|(x>>4);
  x=x|(x>>8);
  x=x|(x>>16);
  x=x|(x>>32);

  return popcount(x);

}

// copyed from https://en.wikipedia.org/wiki/Hamming_weight
const uint64_t m1  = 0x5555555555555555; //binary: 0101...
const uint64_t m2  = 0x3333333333333333; //binary: 00110011..
const uint64_t m4  = 0x0f0f0f0f0f0f0f0f; //binary:  4 zeros,  4 ones ...
const uint64_t h01 = 0x0101010101010101; //the sum of 256 to the power of 0,1,2,3...
inline int popcount(uint64_t x){
    x -= (x >> 1) & m1;             //put count of each 2 bits into those 2 bits
    x = (x & m2) + ((x >> 2) & m2); //put count of each 4 bits into those 4 bits
    x = (x + (x >> 4)) & m4;        //put count of each 8 bits into those 8 bits
    return (x * h01) >> 56;  //returns left 8 bits of x + (x<<8) + (x<<16) + (x<<24) + ...

}
int popcount(const term& v){
  int count=0;
  for(term::const_iterator it=v.begin(); it!=v.end(); ++it){
    count+=popcount(*it);
  }
  return count;
}


// inline int popcount(long a){
//   return __builtin_popcountl(a);
// }

bdt buildcompactbdt(const std::vector<std::string>& fvalues){
  std::vector<implicant> primes;

    if(!startwithPI){
            std::cout << "start building trees" << '\n';
            /// write the implementation for the function here

            //convert to minterm
            //string cant be termer than 64 bit, using template to solve this
            std::cerr << "gen minterms" << '\n';
            std::vector<term> minterms(fvalues.size());
            genMinterm(fvalues,minterms);

            //find prime implicants by useing Quine–McCluskey
            ItmList itmList;

            //first pass
            // std::cout << "process first pass" << '\n';
            std::cerr << "pepare to gen prime implicant" << '\n';
            intermittent* itmPtr=new intermittent();
            term zeroMask(fvalues[0].size()/wdlength+1,0);
            itmPtr->construct(zeroMask,fvalues[0].size());
            for(int i=0;i<minterms.size();i++){
              itmPtr->add(minterms[i]);
            }
            std::cerr << "gen prime implicant" << '\n';
            itmPtr->compareAll(zeroMask,primes,itmList);

            delete itmPtr;

            //all other pass
            while (!itmList.empty()) {//!itmList.empty()
              // std::cout << "process "<<debugcount<<" pass" << '\n';
              ItmList tempList;
              ///DEBUG
              if(!tempList.empty()){
                std::cout << "ERROE, init tempList is not empty" << '\n';
              }
              //END_DEBUG
              for(ItmList::const_iterator  itr=itmList.begin();itr!=itmList.end();++itr ){//use iterator  if throw error
                intermittent* itmPtr=itr->second;
                // insert alternative here to exist earily
                // std::cout << "1 | ";
                itmPtr->compareAll(itr->first,primes,tempList);
                delete itmPtr; // avoid memroy leak & same memroy when map swap
              }

              itmList.swap(tempList);
              std::cout << "next iteration" << '\n';
            }


            std::cout << "\n====================================\nsimplifted min term are:" << '\n';

            for(int x=0;x<primes.size();x++){
              printPrime(primes[x].mask,primes[x].minterm,fvalues[0].size());
            }

            //reduce no. of term of prime implicants by using Petrick's method

    }else{
            bool fromfvalues=true;
            std::string PI;

            std::cout << "is it from fvalues? 1 or 0" << '\n';
            std::cin >> PI;
            if(PI=="0"){
              fromfvalues=false;
            }
            PI="";

            std::cout << "debug file, enter prime implicant" << '\n';
            std::cin >> PI;
            while (PI!="c"){
              appedPrime(PI,primes,fromfvalues);
              PI="";
              std::cin >> PI;
            };
            // std::cout << "/* message */" << '\n';
    }



    //make tree
    bdt rootpt = newnode();

    term nodeRemains;
    int numwd=fvalues[0].size()/wdlength;
    int lastlen=fvalues[0].size()%wdlength;

    for(int i=0;i<numwd;++i){
      nodeRemains.push_back(wdMax);
    }

    if(lastlen>0){
      nodeRemains.push_back((1ULL<<lastlen)-1);
    }

    for(int o=0;o<primes.size();o++){
      printMinterm(primes[o].minterm);
    }

    // term tempNodeRemains=(signed long long)-1; //strange behavier of  1ULL<<fvalues[0].size() evaulated as 1 when size is 64???? should be 0
    // if(fvalues[0].size()<64){
    //   tempNodeRemains=(1ULL<<fvalues[0].size())-1;
    // }
    // std::cout << "defualt node"<<std::bitset<64>(tempNodeRemains) << '\n';
    std::cout << "\n\n==================================\nstart building tree, with node in consideration\n";
    printMinterm(nodeRemains);
    std::cout << '\n';
    recTreeConstructor(rootpt,primes,nodeRemains);

    return rootpt;
}

void recTreeConstructor(bdnode* node,std::vector<implicant>& primes,const term& nodeRemains){//nodeRemains => 0 for not used node, 1 for used node
  if(primes.size()==0){
    //check if case for 0, empty primes
    node->val="0";
    return;
  }else{
    // int maskSum;

    //check if case for 1, one prime with --------
    int maxMaskCount=popcount(nodeRemains);
    // std::cout << "maxMaskCount "<<maxMaskCount << '\n';
    // std::cout << "/* maxMaskCount */"<<maxMaskCount << '\n';
    printMinterm(nodeRemains);
    // std::vector<int> maskCount(primes.size(),0);//TODO this vec can be removec
    for(int i=0;i<primes.size();i++){
      // std::cout << "/* message */" << '\n';
      int cm=popcount(primes[i].mask);
      // printMinterm(primes[i].mask);
      // std::cout << "cm "<<cm << '\n';

      if(cm==maxMaskCount){
        node->val="1";
        return; //terminate loop
      }
      // maskCount[i]=cm;
      // maskSum=maskSum+cm;
    }

    //check if no mask, no "-"; use tree builder in ass1
    //not nessuary for correctness, speed up in case with no "-"
    // if(maskSum==0){
    //
    //   return;
    // }

    // hestristc, find node to chooice as mask next
    // direction of scan MSB <-- <-- LSB
    bitCount cnt;
    unsigned int mincount=(int)-1;//get 0xffff....
    unsigned int mostUnbalanced=(int)-1;
    int optimalDigit;

    cnt.construct(primes);
    int counter=popcount(nodeRemains);
    int digit=0;
        // std::cout << "rec" << '\n';

        // std::cout << "/* peacking */" << '\n';
    while (counter>0) {
      if((1ULL<<(digit%wdlength))&nodeRemains[digit/wdlength]){
        counter--;
        //node that is not in the tree, chooice between these
        // std::cout << "digit"<<digit<<": "<<cnt.getMask(digit) << '\n';
        if(cnt.getMask(digit)<mincount /*|| (cnt.getMask(digit)==mincount && maskCount[]) */){

          optimalDigit=digit;
          mincount=cnt.getMask(digit);
          mostUnbalanced=cnt.getTermLeast(digit);
          // std::cout << "due mask"<<digit << '\n';
        }else if(cnt.getMask(digit)==mincount && cnt.getTermLeast(digit)<mostUnbalanced){
          optimalDigit=digit;
          mostUnbalanced=cnt.getTermLeast(digit);
          // std::cout << "due term"<<digit << '\n';
        }
      }
      digit++;
    }



    node->val="x"+std::to_string(optimalDigit+1);

    //RecCall, maske sub tree
    std::vector<implicant> leftPrimes;//left node, 0
    std::vector<implicant> rightPrimes;//right node, 1

    wd optimalWord=1ULL<<(optimalDigit%wdlength);
    int optimalNum=optimalDigit/wdlength;
    term NotOptimalMask(nodeRemains.size(),wdMax);
    NotOptimalMask[optimalNum]=~optimalWord;

    for(int i=0;i<primes.size();i++){
      if( (primes[i].minterm[optimalNum]&optimalWord)==0){
        //when minterm[digit]==0, mask[digit] may =1
        if( (primes[i].mask[optimalNum]&optimalWord)!=0 ){
          //mask is one, need normalise mask and copy to both right & left listLb
          implicant temp=primes[i];
          temp.mask=temp.mask & NotOptimalMask;
          leftPrimes.push_back(temp);
          rightPrimes.push_back(temp);
        }else{
          //mask is 0, normal case
          leftPrimes.push_back(primes[i]);
        }
      }else{
        //minterm[digit]==1 -> mask[digit] cant be 1, no need to check
        rightPrimes.push_back(primes[i]);
      }
    }

    // node->val="x"+
    term nextNodeRemains=nodeRemains;
    nextNodeRemains[optimalNum]=nextNodeRemains[optimalNum] & (~optimalWord);

    node->left=newnode();
    recTreeConstructor(node->left,leftPrimes, nextNodeRemains);

    node->right=newnode();
    recTreeConstructor(node->right,rightPrimes, nextNodeRemains);
  }
}

std::string evalcompactbdt(bdt t, const std::string& input){
    while(t->val.size()>1){
      if(is1(input[stoi(t->val.substr(1))-1])){
        //right node
        t=t->right;
      }else{
        //left node
        t=t->left;
      }
    }

    return t->val;
}


//overload operator
//NOTE:: Have contact Max for exception of return vector in overload function below
term operator~(const term& v1){
  term out;
  out.reserve(v1.size());
  for(term::const_iterator it=v1.begin(); it!=v1.end(); ++it){
    out.push_back(~(*it));
  }
  return out;
}
term operator&(const term& v1,const term& v2){
  term out;
  out.reserve(v1.size());
  for(int i=0;i<v1.size();++i){
    out.push_back(v1[i]&v2[i]);
  }
  return out;
}
term operator|(const term& v1,const term& v2){
  term out;
  out.reserve(v1.size());
  for(int i=0;i<v1.size();++i){
    out.push_back(v1[i]|v2[i]);
  }
  return out;
}
term operator^(const term& v1,const term& v2){
  term out;
  out.reserve(v1.size());
  for(int i=0;i<v1.size();++i){
    out.push_back(v1[i]^v2[i]);
  }
  return out;
}



/// add here the implementation for any other functions you wish to define and use
//DEBUG FUNC
void printMinterm(const term& minterm){
std::cout << "from Xn <-- X1: ";
for(int i=minterm.size()-1;i>=0;--i){

  std::cout << std::bitset<wdlength>(minterm[i])<<' ';
}
std::cout << '\n';
}
void appedPrime(std::string str, std::vector<implicant>& primes, bool fval){
  wd mask=0;
  wd minterm=0;
  // term printmask=1;
  if(fval){
    for(int i=0;i<str.length();i++){
      if(int(str[i])==45){
        mask=mask|(1ULL<<i);
      }else if(int(str[i]==49)){
        minterm=minterm|(1ULL<<i);
      }
    }
  }else{
    for(int i=0;i<str.length();i++){
      if(int(str[i])==45){
        mask=mask|(1ULL<<(str.length()-i-1));
      }else if(int(str[i]==49)){
        minterm=minterm|(1ULL<<(str.length()-i-1));
      }
    }
  }

  primes.push_back((implicant){{mask},{minterm}});
  printPrime({mask},{minterm},bitsize);
}

  template <class T>
  int find(std::vector<T>& v, T a){
    for(int i=0;i<v.size();i++){
      if(v[i]==a){
        return i;
      }
    }
    // v.push_back(a);
    return -1;
  }

  std::string getMinterm(wd i){
    uint64_t printmask=1;
    std::string temp;
    for(int j=0;j<bitsize;j++){
      if(i&(printmask<<(j))){
        temp+='1';
      }else{
        temp+='0';
      }
    }
    return temp;
  }

  template <class T>
  void printV(std::vector<T>& v, char end, char m){
    for (int i=0;i<v.size();++i){
      std::cout << v[i]<<m;
    }
    std::cout << end;
  }

  template <class T>
  void printBit(std::vector<T>& v, char end, char m){
    for (int i=0;i<v.size();++i){
      std::bitset<bitsize> b(v[i]);
      std::cout << b<<m;
    }
    std::cout << end;
  }

  void printPrime(const term& mask,const term& minterm, int len, char end){
    wd printmask=1;
    int numWord=len/wdlength;
    int lastlen=len%wdlength;

    std::cout << "from Xn <-- X1: ";

    for(int i=lastlen-1;i>=0;i--){
      if(mask[numWord]&(printmask<<(i))){
        std::cout<<'-';
      }else{
        if(minterm[numWord]&(printmask<<(i))){
          std::cout<<'1';
        }else{
          std::cout<<'0';
        }
      }
    }

    numWord--;

    while (numWord>=0) {
      std::cout << " " << '\n';
      for(int i=wdlength-1;i>=0;i--){
        if(mask[numWord]&(printmask<<(i))){
          std::cout<<'-';
        }else{
          if(minterm[numWord]&(printmask<<(i))){
            std::cout<<'1';
          }else{
            std::cout<<'0';
          }
        }
      }
      numWord--;
    }

    std::cout << end;
  }

  void genInput(std::vector<wd>& in,int digit,std::vector<std::string>& out){
    wd printmask=1;
    for(int i=0;i<in.size();i++){
      std::string temp;
      for(int j=0;j<digit;j++){
        if(in[i]&(printmask<<(j))){
          temp+='1';
        }else{
          temp+='0';
        }
      }
      // std::cout << in << '\n';
      out.push_back(temp);
    }
  }

  double getAss1NodeNum(){
    return(pow(2.0,bitsize+1)-1);
  }

  void deltree(bdt t){
    if(t!=NULL){
      deltree(t->left);
      deltree(t->right);
      delete t;
    }
  }


  int getTreeNodeNum(bdnode*  t) {
    int count=0;
    getTreeNodeNumRec(t,count);
    return count;
  }

  void getTreeNodeNumRec(bdnode*  t,int& count){
    if(t!=NULL){
      count++;
      getTreeNodeNumRec(t->left,count);
      getTreeNodeNumRec(t->right,count);
    }
  }

  void printTreeRec( bdnode*  t, int depth,std::vector<std::string>& out){
    if(t!=NULL){
      // out[depth].append("\t"+(t->val));
      out[depth]=out[depth]+"  "+t->val;
      printTreeRec(t->left,depth+1,out);
      printTreeRec(t->right,depth+1,out);
    }
  }

  void printTree(bdt t, int depth){
    std::vector<std::string> out;

    for(int i=0;i<depth;i++){
      out.push_back("");
    }

    printTreeRec(t,0,out);

    for (int i=0;i<depth;i++){
      std::cout << i<<"\t| "<<out[i]  << '\n';
    }

  }

  void testCorrectness(bdt rt, const std::vector<wd>& correct){
    std::cerr << "test start" << '\n';
    wd max=(1ULL<<bitsize)-1;
    std::vector<wd> outTerm;
    std::vector<bool> outBool;
    outTerm.reserve(correct.size());
    outBool.reserve(correct.size());


    for(wd i=0;i<=max;i++){
      std::string temp=getMinterm(i);

      if(is1(evalcompactbdt(rt,temp)[0])){
        std::cout << temp<<"("<<i<<") " << ' '<<std::flush;
        outTerm.push_back(i);
        outBool.push_back(false);
      }
    }

    std::cout << "\n\n*************************************\n* all test done, generateing errors *\n*************************************\n";

    std::cout << "below should return 0, but should be 1:" << '\n';
    for(int i=0;i<correct.size();i++){
      int f=find(outTerm,correct[i]);
      if(f>=0){
        outBool[f]=true;
        // std::cout << outTerm[f] << '\n';
      }else{
        std::cout <<"term "<< getMinterm(outTerm[i])<< "("<<outTerm[i]<<")" << '\n';
      }
    }

    std::cout << "\nbelow should return 1, but should be 0:" << '\n';

    for(int i=0;i<outBool.size();i++){
      if(outBool[i]!=true){
        std::cout <<"term "<< getMinterm(outTerm[i])<< "("<<outTerm[i]<<")" << '\n';
      }
    }

    std::cout << "\nend of errors" << '\n';


  }

//END DEBUG FUNC
