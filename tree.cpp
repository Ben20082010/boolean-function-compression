//use c++11
//in term:: MSB(xmsb).x4.x3.x2.x1.LSB(x0)



#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <stdlib.h>
#include <bitset>
#include <chrono>




typedef uint64_t term;
// #define popcount(x) __builtin_popcountl(x)



struct bdnode{
    std::string val;
    bdnode* left;
    bdnode* right;

};

struct implicant{
  term mask;
  term minterm;
};

template <class T>
bool notRepeated(std::vector<T>& v, T a);
void printPrime(term mask,term minterm,int len=27,char end='\n');
inline int popcount(uint64_t x);
inline int leading1(uint64_t x);


struct intermittent{
    int max1s;
    // term basemask;
    term baseNot;
    std::vector<std::vector<term>> minterms;
    std::vector<std::vector<bool>> used;

    void construct(term mask,int len){
      // basemask=mask;
      max1s=len;
      baseNot=~mask;
      // std::vector<std::vector<term>> minterms=std::vector<std::vector<term>> minterms(len+1);
      // std::vector<std::vector<bool>> used=std::vector<std::vector<bool>> used(len+1);
      for(int i=0;i<=max1s;i++){
        minterms.push_back(std::vector<term>());
        used.push_back(std::vector<bool>());
      }

    };
    void add(term minterm) {
      minterm=minterm&baseNot; // filter minterm[digit] to 0, when mask[digit]=1 (is "-")
      int pcount=popcount(minterm);

      if(notRepeated(minterms[pcount],minterm)){
        used[pcount].push_back(false);
      }

      // minterms[pcount].push_back(minterm);
      // used[pcount].push_back(false);


    };
    void compareAll(term basemask, std::vector<implicant>& primes,std::map<term,intermittent*>& itmList){
      std::map<term,intermittent*>::iterator listLb;
      ///////////
      // for(int i=0;i<minterms.size();i++){
      //   std::cout << i<<" ones | ";
      //   printV(minterms[i]);
      // }
      /////////////////
      for(int ones=0;ones<minterms.size()-1;ones++){
        //compare between level
          for(int i=0;i<minterms[ones].size();i++){
            for(int j=0;j<minterms[ones+1].size();j++){
              //i is in lower 1s group [0...l-2], j is higher 1s group [1...l-1]
              term mask=minterms[ones][i] ^ minterms[ones+1][j];
              // std::cout << "mask is "<<mask <<" | "<<!(mask & (mask-1))<< '\n';
              if(!(mask & (mask-1))){ //check if mask is power of 2, *0 will always be false
                // i&j can be simplifted
                used[ones][i]=true;
                used[ones+1][j]=true;
                // std::cout << "find" << '\n';

                /// add mask & data
                mask=basemask|mask;
                listLb=itmList.lower_bound(mask);
                  //BUG:work for empty map?
                if(listLb!=itmList.end() && !(itmList.key_comp()(mask,listLb->first))){ //from https://stackoverflow.com/questions/97050/stdmap-insert-or-stdmap-find
                  //mask exist, apped to struct
                  listLb->second->add(minterms[ones][i]);
                  // std::cout << "b1" << '\n';
                  // std::cout << "mask used "<<std::bitset<8>(mask) << '\n';

                }else{
                  std::cout <<"mask is "<< std::bitset<8>(mask) << '\n';
                  //mask not exist, make new
                  intermittent* itmPtr=new intermittent();
                  itmPtr->construct(mask,max1s-1);
                  itmPtr->add(minterms[ones][i]);
                  itmList.insert(listLb,std::map<term,intermittent*>::value_type(mask,itmPtr));
                  ////////
                  // std::cout << "b2" << '\n';
                  // auto xxx1=itmList.rbegin()->second->minterms;
                  // auto xxx2=itmList.rbegin()->first;

                  // for(int ii=0;ii<xxx1.size();ii++){
                  //   for(int jj=0;jj<xxx1[ii].size();jj++){
                  //     printPrime(xxx2,xxx1[ii][jj]);
                  //   }
                  // }
                  ////////
                }

                //// CHECK/BUG: CAN SAME MASK SHOW MUTIPLE TIMES? => YES!, using map

              }
            }
          }
      }

      // std::cout << "start xxxxxxxxxxxx all" << '\n';


      // move unsed case to prime implicant
      std::vector<term> v;
      for(int ones=0;ones<used.size();ones++){
        for(int i=0;i<used[ones].size();i++){
          if(!used[ones][i] && notRepeated(v,minterms[ones][i])){
            /////
            // std::cout << "term: " << '\n';
            printPrime(basemask,minterms[ones][i]);

            //////
            primes.push_back((implicant){basemask,minterms[ones][i]});
          }
        }
      }
    }
};

struct bitCount{
  int space;//space for count of single bit, (least to avoid overflow)
  std::vector<uint64_t> count;//can be optimsed, current method waste higher bit when length is small, merge term for large operation

  void construct(const std::vector<implicant>& in) {
    // std::cout << "****require 64 bit long******" << '\n';
    space=leading1(in.size());//leading 1 from RHS
    // std::cout << "space is "<<space << '\n';

    //set up correct mask
    uint64_t mask=1;
    for(int i=space;i<64;){
      mask=mask|(mask<<(i));
      i=i*2;
    }
    // std::cout << "mask is "<<std::bitset<64>(mask) << '\n';

    //cacualte the vec
    count.reserve(space);
    uint64_t tm=in[0].mask;

    //1st
    for(int j=0;j<space;j++){
      count.push_back( (tm>>j) & (mask) );
      // std::cout << count[j] << '\n';
    }
    // std::cout << "first count is" << '\n';
    // for(int i=0;i<count.size();i++){
    //   std::cout << std::bitset<64>(count[i]) << '\n';
    // }
    //after 1
    for(int i=1;i<in.size();i++){
      tm=in[i].mask;
      for(int j=0;j<space;j++){
        count[j]=count[j]+ ((tm>>j) & (mask));
      }
      // std::cout << i<<" count is" << '\n';
      // for(int xx=0;xx<count.size();xx++){
      //   std::cout << std::bitset<64>(count[xx]) << '\n';
      // }
      // std::cout << '\n';
    }
  }

  int get(int digit){
    uint64_t shift=digit/space*space;
    // std::cout << "shift is "<<shift << '\n';
    // std::cerr << (((long)1<<(space+1))-1) << '\n';
    return (count[digit%space]>>shift) &  ((1ULL<<(space))-1);//(((long)1<<(space+1))-1) produce a mask of 1 [from LSB to space], x^(space+1)-1
  }

};

typedef bdnode* bdt;
typedef std::map<term,intermittent*> ItmList;
typedef std::map<term, std::vector<implicant>> PIchart;


//DEBUG FUNC
  template <class T>
  void printV(std::vector<T>& v, char end='\n', char m=' ');

  template <class T>
  void printBit(std::vector<T>& v, char end='\n', char m=' ');

  template <class T>
  int find(std::vector<T>& v, T a);

  void genInput(std::vector<term>& in,int digit,std::vector<std::string>& out);
  void printTree(bdt t, int depth);
  void printTreeRec( bdnode*  t, int depth,std::vector<std::string>& out);
  bool testCorrectness(bdt rt, std::vector<term> correct);
  int getTreeNodeNum(bdnode*  t);
  void getTreeNodeNumRec(bdnode*  t,int& count);
  std::string getMinterm(term i);
  uint64_t getAss1NodeNum();

  void appedPrime(std::string str, std::vector<implicant>& primes,bool fval=true);

  void deltree(bdt t);

//END DEBUG FUNC

/// do not alter these two function declarations
bdt buildcompactbdt(const std::vector<std::string>& fvalues);
std::string evalcompactbdt(bdt t, const std::string& input);

bdt newnode(std::string val=std::string(), bdt left=NULL, bdt right=NULL );
void recTreeConstructor(bdnode* node,std::vector<implicant>& primes, term nodeRemains);
// inline int uint64_tt(long a);
void genMinterm(const std::vector<std::string>& fvalues, std::vector<term>& minterms);
bool is1(char c);




// template <typename T>
// std::ostream& operator << (std::ostream &o, const implicant &a){
//   term printmask=1;
//   for(int i=0;i<(inputLen);++i){
//     if(a.mask&(printmask<<(i))){
//       o<<'-';
//     }else{
//       if(a.minterm&(printmask<<(i))){
//         o<<'1';
//       }else{
//         o<<'0';
//       }
//     }
//   }
//   return o;
// }

/// you can define and use additional functions
/// for the implementation of buildcompactbdt and evalcompactbdt

/// add here the declarations (not the implementation)
/// for any other functions you wish to define and use



int main(){
  #define bitsize 64
  #define startwithPI false
  #define outputToFile false

  std::vector<term> input;
  input={0,1,2,5,6,7,8,9,10,14};
  // input={4, 7, 8, 15, 20, 21, 26, 29, 30, 32, 35, 38, 43, 45, 46, 49, 52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 68, 69, 71, 72, 74, 77, 80, 82, 84, 88, 89, 90, 91, 92, 94, 95, 96, 100, 104, 105, 106, 109, 110, 111, 114, 115, 117, 121, 123, 126, 127, 129, 131, 132, 133, 137, 138, 139, 142, 143, 145, 146, 147, 150, 152, 153, 158, 160, 162, 163, 165, 166, 167, 168, 170, 171, 172, 173, 176, 177, 178, 179, 181, 183, 185, 186, 188, 190, 191, 195, 196, 197, 200};
  // 6 input={0, 2, 4, 8, 9, 10, 11, 12, 16, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 39, 40, 44, 46, 49, 51, 52, 61, 63};
  // input={0, 2, 3, 5, 6, 9, 10, 11, 12, 13, 15, 17, 18, 19, 21, 27, 28, 30, 32, 34, 35, 36, 41, 42, 43, 44, 47, 51, 52, 56, 57, 58, 63, 67, 69, 70, 74, 76, 77, 78, 79, 81, 88, 89, 91, 93, 94, 97, 98, 99, 101, 103, 106, 107, 110, 112, 113, 114, 118, 119, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 141, 142, 144, 145, 147, 148, 149, 151, 152, 154, 158, 159, 163, 165, 166, 167, 168, 170, 171, 172, 174, 175, 176, 178, 181, 182, 183, 185, 187, 188, 189, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 210, 214, 218, 219, 220, 221, 222, 223, 228, 229, 231, 232, 235, 236, 241, 245, 249, 250, 251, 252, 254, 258, 262, 265, 266, 267, 269, 270, 271, 273, 274, 280, 282, 285, 289, 290, 291, 292, 298, 301, 302, 304, 306, 307, 308, 310, 312, 313, 316, 317, 318, 319, 320, 321, 323, 325, 327, 328, 331, 338, 339, 340, 346, 348, 350, 352, 354, 355, 358, 359, 360, 363, 364, 369, 370, 373, 375, 380, 382, 385, 386, 387, 391, 392, 393, 396, 397, 400, 403, 405, 409, 411, 413, 414, 416, 417, 419, 421, 423, 424, 425, 426, 427, 429, 431, 435, 437, 439, 442, 443, 444, 448, 450, 452, 454, 456, 460, 461, 463, 465, 469, 472, 474, 475, 477, 478, 479, 485, 486, 487, 489, 492, 493, 496, 499, 500, 501, 503, 511, 512, 513, 519, 520, 521, 522, 525, 527, 531, 532, 534, 535, 536, 541, 543, 546, 548, 549, 550, 551, 554, 555, 556, 557, 558, 561, 563, 564, 567, 568, 569, 573, 574, 575, 576, 577, 580, 582, 583, 584, 586, 588, 590, 591, 593, 594, 596, 598, 601, 609, 611, 613, 615, 617, 620, 625, 628, 629, 630, 631, 632, 633, 634, 635, 640, 643, 644, 647, 648, 649, 650, 652, 654, 655, 657, 658, 659, 660, 661, 662, 667, 668, 670, 671, 672, 673, 675, 682, 686, 689, 690, 701, 702, 704, 706, 707, 708, 709, 710, 712, 713, 714, 719, 720, 722, 727, 728, 731, 732, 733, 735, 736, 737, 739, 740, 743, 744, 745, 746, 748, 751, 753, 756, 760, 763, 764, 765, 767, 769, 770, 772, 773, 774, 776, 778, 781, 782, 783, 784, 787, 788, 789, 790, 791, 794, 798, 799, 800, 801, 802, 803, 804, 807, 809, 812, 813, 818, 820, 822, 823, 825, 827, 828, 829, 830, 831, 832, 834, 836, 837, 838, 840, 842, 843, 844, 845, 846, 848, 849, 852, 854, 856, 857, 859, 860, 863, 864, 865, 866, 867, 872, 873, 874, 875, 878, 879, 880, 881, 882, 885, 886, 888, 890, 895, 896, 902, 904, 905, 907, 908, 909, 910, 913, 915, 919, 921, 922, 923, 924, 925, 929, 932, 933, 934, 935, 938, 939, 945, 951, 952, 954, 956, 957, 962, 963, 966, 967, 968, 969, 971, 975, 981, 982, 984, 986, 991, 997, 1000};

  // input={5, 8, 9, 12, 14, 15, 16, 18, 19, 22, 23, 24, 25, 26, 27, 29, 31, 32, 35, 36, 37, 38, 40, 41, 42, 45, 46, 48, 50, 51, 52, 53, 56, 57, 62, 63, 66, 67, 70, 71, 72, 78, 79, 82, 84, 85, 86, 90, 91, 93, 94, 97, 100, 102, 103, 104, 106, 107, 108, 111, 112, 117, 118, 119, 120, 122, 124, 127, 128, 129, 130, 131, 132, 133, 134, 136, 143, 145, 146, 148, 149, 150, 152, 153, 156, 158, 159, 160, 162, 166, 167, 168, 171, 173, 177, 181, 182, 185, 186, 188, 190, 193, 196, 200, 205, 208, 209, 210, 211, 213, 215, 217, 220, 221, 223, 226, 231, 238, 240, 242, 243, 247, 253, 256, 259, 260, 262, 264, 269, 274, 275, 277, 282, 284, 285, 286, 288, 291, 293, 296, 297, 298, 300, 302, 304, 305, 308, 309, 310, 311, 313, 320, 321, 326, 328, 329, 330, 331, 333, 334, 336, 337, 338, 339, 341, 342, 343, 348, 350, 353, 355, 359, 360, 365, 367, 369, 370, 371, 372, 374, 376, 378, 379, 381, 382, 383, 385, 386, 387, 388, 393, 396, 397, 398, 400, 403, 404, 405, 408, 415, 416, 419, 421, 422, 424, 429, 432, 435, 436, 438, 440, 441, 442, 443, 444, 448, 450, 452, 455, 456, 457, 459, 467, 468, 469, 474, 477, 478, 480, 485, 487, 489, 490, 492, 494, 498, 500, 501, 503, 505, 506, 509, 510, 511, 512, 514, 516, 517, 518, 519, 520, 523, 525, 527, 528, 532, 533, 534, 535, 536, 539, 540, 541, 544, 546, 547, 551, 553, 555, 556, 558, 559, 560, 562, 563, 564, 565, 566, 568, 569, 570, 572, 574, 575, 577, 578, 579, 581, 583, 584, 586, 588, 590, 592, 594, 596, 597, 598, 599, 600, 602, 604, 605, 606, 608, 610, 612, 613, 614, 617, 618, 619, 620, 621, 622, 625, 626, 629, 630, 631, 634, 637, 638, 640, 642, 644, 647, 648, 651, 652, 655, 656, 658, 659, 662, 664, 668, 669, 670, 672, 674, 675, 676, 680, 687, 692, 693, 694, 700, 702, 703, 704, 706, 707, 708, 710, 714, 718, 719, 722, 723, 725, 730, 731, 734, 736, 738, 739, 740, 741, 743, 747, 749, 750, 752, 753, 754, 755, 758, 760, 764, 773, 776, 777, 780, 782, 783, 784, 786, 788, 792, 794, 795, 796, 799, 802, 803, 808, 809, 811, 812, 813, 815, 817, 819, 822, 823, 824, 828, 830, 831, 832, 836, 837, 838, 840, 841, 843, 844, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 861, 862, 863, 864, 865, 868, 876, 877, 883, 884, 885, 887, 889, 890, 891, 893, 895, 897, 898, 899, 902, 903, 905, 907, 910, 912, 915, 916, 917, 921, 922, 923, 926, 927, 928, 929, 930, 932, 933, 935, 936, 943, 944, 945, 950, 951, 954, 955, 956, 957, 959, 962, 963, 965, 966, 967, 969, 970, 972, 974, 976, 980, 981, 984, 985, 987, 988, 991, 993, 994, 997, 999, 1005, 1006, 1007, 1009, 1010, 1013, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1031, 1032, 1033, 1036, 1038, 1041, 1042, 1046, 1048, 1050, 1051, 1052, 1054, 1056, 1058, 1061, 1063, 1064, 1067, 1069, 1074, 1075, 1076, 1077, 1079, 1083, 1089, 1092, 1094, 1098, 1100, 1101, 1102, 1103, 1104, 1107, 1109, 1111, 1112, 1114, 1115, 1116, 1118, 1119, 1120, 1123, 1126, 1127, 1128, 1129, 1131, 1134, 1135, 1136, 1137, 1141, 1142, 1147, 1148, 1149, 1151, 1154, 1158, 1161, 1162, 1163, 1168, 1169, 1175, 1176, 1179, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1192, 1193, 1197, 1199, 1200, 1201, 1202, 1208, 1209, 1210, 1211, 1212, 1213, 1215, 1217, 1218, 1219, 1220, 1224, 1230, 1232, 1233, 1234, 1239, 1243, 1244, 1245, 1252, 1255, 1256, 1257, 1258, 1259, 1261, 1262, 1264, 1265, 1267, 1268, 1269, 1272, 1273, 1275, 1276, 1278, 1280, 1281, 1282, 1283, 1284, 1287, 1288, 1289, 1291, 1296, 1297, 1299, 1306, 1307, 1309, 1310, 1311, 1312, 1313, 1314, 1316, 1321, 1324, 1327, 1329, 1330, 1332, 1341, 1344, 1346, 1347, 1349, 1353, 1354, 1355, 1361, 1365, 1366, 1370, 1375, 1376, 1378, 1379, 1382, 1384, 1386, 1389, 1390, 1391, 1392, 1399, 1401, 1402, 1403, 1404, 1405, 1406, 1409, 1410, 1413, 1418, 1419, 1421, 1422, 1423, 1424, 1426, 1428, 1430, 1433, 1434, 1435, 1437, 1442, 1443, 1446, 1447, 1449, 1450, 1452, 1453, 1457, 1461, 1469, 1471, 1478, 1479, 1481, 1483, 1486, 1490, 1491, 1492, 1493, 1500, 1501, 1502, 1504, 1505, 1506, 1508, 1512, 1514, 1518, 1521, 1523, 1524, 1529, 1530, 1531, 1534, 1538, 1539, 1545, 1546, 1547, 1549, 1550, 1551, 1553, 1554, 1556, 1560, 1561, 1564, 1568, 1569, 1571, 1572, 1575, 1576, 1581, 1583, 1584, 1585, 1587, 1588, 1590, 1591, 1594, 1597, 1599, 1600, 1603, 1604, 1605, 1607, 1608, 1611, 1612, 1613, 1614, 1616, 1617, 1619, 1625, 1627, 1628, 1629, 1630, 1631, 1634, 1635, 1640, 1643, 1648, 1653, 1657, 1658, 1661, 1662, 1663, 1665, 1671, 1676, 1677, 1680, 1681, 1683, 1684, 1685, 1686, 1688, 1689, 1690, 1691, 1694, 1695, 1696, 1697, 1700, 1701, 1702, 1703, 1706, 1707, 1709, 1710, 1712, 1716, 1717, 1721, 1722, 1724, 1728, 1729, 1730, 1731, 1737, 1739, 1740, 1741, 1747, 1748, 1750, 1754, 1757, 1762, 1763, 1765, 1766, 1768, 1771, 1777, 1778, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1789, 1792, 1795, 1796, 1797, 1798, 1801, 1802, 1804, 1806, 1807, 1808, 1810, 1813, 1816, 1819, 1820, 1825, 1827, 1831, 1832, 1834, 1836, 1838, 1841, 1843, 1844, 1846, 1847, 1849, 1852, 1857, 1859, 1862, 1864, 1865, 1867, 1868, 1869, 1870, 1871, 1874, 1875, 1877, 1878, 1879, 1886, 1889, 1893, 1897, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1912, 1914, 1915, 1916, 1917, 1918, 1919, 1922, 1924, 1928, 1929, 1931, 1933, 1934, 1935, 1936, 1938, 1939, 1940, 1941, 1943, 1946, 1949, 1951, 1952, 1956, 1957, 1958, 1959, 1961, 1962, 1963, 1967, 1968, 1975, 1977, 1980, 1981, 1982, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2005, 2006, 2015, 2016, 2017, 2018, 2021, 2023, 2024, 2029, 2030, 2031, 2036, 2039, 2041, 2044, 2045, 2049, 2050, 2054, 2056, 2057, 2059, 2062, 2066, 2067, 2068, 2070, 2073, 2075, 2076, 2078, 2080, 2081, 2083, 2084, 2086, 2087, 2089, 2090, 2091, 2092, 2096, 2098, 2099, 2101, 2102, 2109, 2110, 2111, 2112, 2115, 2118, 2120, 2121, 2123, 2124, 2126, 2127, 2128, 2130, 2135, 2139, 2140, 2141, 2142, 2143, 2144, 2145, 2149, 2151, 2152, 2153, 2154, 2156, 2157, 2159, 2160, 2166, 2168, 2169, 2170, 2171, 2175, 2176, 2180, 2182, 2183, 2189, 2190, 2191, 2193, 2194, 2195, 2198, 2199, 2200, 2202, 2203, 2207, 2212, 2214, 2217, 2219, 2220, 2221, 2222, 2223, 2224, 2225, 2228, 2229, 2234, 2236, 2239, 2246, 2247, 2250, 2253, 2256, 2260, 2261, 2262, 2263, 2264, 2265, 2266, 2268, 2270, 2272, 2274, 2275, 2276, 2278, 2279, 2280, 2281, 2282, 2286, 2289, 2290, 2291, 2295, 2296, 2297, 2299, 2300, 2303, 2304, 2305, 2306, 2307, 2310, 2314, 2315, 2316, 2317, 2318, 2319, 2320, 2321, 2322, 2323, 2325, 2326, 2327, 2328, 2329, 2332, 2333, 2334, 2335, 2338, 2339, 2342, 2345, 2346, 2347, 2348, 2349, 2350, 2351, 2353, 2357, 2358, 2359, 2360, 2361, 2363, 2364, 2367, 2368, 2370, 2371, 2374, 2375, 2377, 2378, 2382, 2383, 2385, 2387, 2388, 2389, 2390, 2391, 2393, 2398, 2400, 2401, 2403, 2408, 2409, 2411, 2413, 2414, 2419, 2422, 2423, 2426, 2427, 2429, 2430, 2431, 2432, 2433, 2434, 2435, 2436, 2437, 2438, 2443, 2444, 2445, 2446, 2447, 2448, 2449, 2451, 2455, 2456, 2457, 2461, 2463, 2464, 2465, 2469, 2471, 2474, 2476, 2477, 2478, 2480, 2484, 2485, 2486, 2487, 2488, 2491, 2493, 2495, 2496, 2497, 2498, 2499, 2500, 2501, 2503, 2504, 2505, 2510, 2513, 2515, 2517, 2519, 2520, 2522, 2526, 2527, 2534, 2536, 2537, 2538, 2539, 2540, 2542, 2544, 2545, 2546, 2547, 2548, 2549, 2551, 2553, 2555, 2556, 2557, 2559, 2560, 2562, 2563, 2565, 2568, 2569, 2570, 2571, 2573, 2578, 2579, 2580, 2581, 2582, 2584, 2587, 2589, 2590, 2593, 2594, 2596, 2597, 2598, 2603, 2604, 2605, 2608, 2611, 2616, 2618, 2619, 2622, 2624, 2625, 2626, 2628, 2630, 2631, 2632, 2634, 2636, 2637, 2638, 2639, 2642, 2643, 2647, 2649, 2650, 2651, 2652, 2653, 2654, 2655, 2656, 2659, 2661, 2664, 2666, 2669, 2670, 2672, 2673, 2674, 2675, 2676, 2677, 2680, 2681, 2685, 2686, 2687, 2688, 2690, 2693, 2695, 2696, 2697, 2699, 2700, 2701, 2702, 2705, 2709, 2711, 2713, 2718, 2719, 2725, 2726, 2728, 2729, 2731, 2732, 2735, 2737, 2739, 2740, 2741, 2742, 2744, 2745, 2746, 2748, 2750, 2752, 2754, 2755, 2757, 2758, 2760, 2761, 2762, 2763, 2764, 2765, 2766, 2769, 2770, 2772, 2773, 2775, 2777, 2779, 2780, 2781, 2782, 2783, 2785, 2789, 2790, 2791, 2792, 2795, 2796, 2798, 2800, 2802, 2803, 2806, 2809, 2810, 2813, 2818, 2820, 2821, 2824, 2828, 2830, 2832, 2833, 2836, 2837, 2839, 2841, 2842, 2845, 2846, 2847, 2848, 2849, 2851, 2852, 2853, 2856, 2857, 2858, 2859, 2860, 2865, 2866, 2869, 2872, 2874, 2875, 2877, 2879, 2889, 2890, 2895, 2899, 2902, 2903, 2904, 2906, 2908, 2909, 2910, 2911, 2915, 2916, 2918, 2926, 2928, 2929, 2930, 2931, 2932, 2936, 2943, 2944, 2947, 2948, 2949, 2950, 2952, 2955, 2958, 2959, 2961, 2965, 2967, 2969, 2971, 2973, 2980, 2982, 2984, 2987, 2989, 2990, 2993, 2996, 2999, 3002, 3005, 3007, 3009, 3010, 3012, 3013, 3014, 3016, 3019, 3020, 3022, 3025, 3026, 3027, 3028, 3032, 3033, 3037, 3038, 3039, 3041, 3042, 3046, 3049, 3050, 3052, 3054, 3055, 3057, 3058, 3059, 3060, 3061, 3063, 3065, 3067, 3068, 3069, 3073, 3074, 3076, 3077, 3078, 3080, 3081, 3083, 3084, 3086, 3089, 3090, 3092, 3096, 3099, 3103, 3104, 3105, 3107, 3109, 3111, 3112, 3113, 3114, 3116, 3117, 3119, 3124, 3126, 3127, 3133, 3135, 3137, 3140, 3141, 3142, 3143, 3144, 3147, 3148, 3149, 3152, 3153, 3156, 3158, 3162, 3164, 3165, 3167, 3170, 3171, 3172, 3173, 3175, 3176, 3178, 3179, 3181, 3183, 3184, 3185, 3188, 3189, 3191, 3192, 3193, 3198, 3199, 3201, 3202, 3203, 3205, 3207, 3208, 3211, 3213, 3215, 3217, 3219, 3224, 3226, 3232, 3235, 3242, 3245, 3248, 3251, 3253, 3254, 3255, 3256, 3260, 3265, 3266, 3269, 3270, 3271, 3272, 3273, 3276, 3277, 3278, 3279, 3280, 3282, 3283, 3287, 3288, 3289, 3290, 3295, 3296, 3306, 3307, 3308, 3309, 3310, 3311, 3312, 3313, 3314, 3316, 3317, 3320, 3321, 3324, 3328, 3329, 3330, 3331, 3332, 3335, 3336, 3337, 3339, 3346, 3349, 3354, 3356, 3357, 3362, 3363, 3364, 3365, 3366, 3367, 3368, 3371, 3372, 3374, 3375, 3377, 3378, 3379, 3380, 3381, 3382, 3383, 3384, 3388, 3389, 3392, 3395, 3396, 3397, 3398, 3399, 3400, 3405, 3406, 3407, 3410, 3411, 3416, 3420, 3421, 3426, 3428, 3435, 3439, 3441, 3442, 3445, 3447, 3448, 3450, 3451, 3452, 3454, 3457, 3459, 3461, 3463, 3468, 3469, 3471, 3472, 3474, 3475, 3477, 3478, 3479, 3480, 3482, 3483, 3484, 3485, 3486, 3487, 3488, 3490, 3493, 3494, 3495, 3498, 3499, 3501, 3503, 3504, 3505, 3507, 3510, 3511, 3515, 3516, 3517, 3519, 3527, 3528, 3530, 3532, 3533, 3534, 3538, 3539, 3543, 3544, 3546, 3547, 3548, 3553, 3555, 3556, 3560, 3562, 3567, 3570, 3571, 3572, 3573, 3575, 3577, 3578, 3579, 3584, 3586, 3590, 3591, 3592, 3593, 3594, 3596, 3597, 3598, 3600, 3602, 3603, 3604, 3608, 3609, 3613, 3615, 3618, 3619, 3622, 3623, 3624, 3626, 3627, 3628, 3629, 3630, 3631, 3633, 3634, 3635, 3636, 3637, 3638, 3641, 3643, 3645, 3647, 3649, 3650, 3652, 3655, 3658, 3659, 3665, 3668, 3672, 3676, 3679, 3682, 3684, 3685, 3693, 3694, 3695, 3696, 3699, 3703, 3705, 3706, 3707, 3708, 3710, 3712, 3715, 3718, 3719, 3721, 3723, 3725, 3727, 3731, 3732, 3735, 3737, 3739, 3740, 3742, 3744, 3745, 3746, 3747, 3750, 3752, 3755, 3757, 3758, 3765, 3766, 3768, 3769, 3772, 3774, 3775, 3778, 3779, 3780, 3782, 3783, 3784, 3786, 3787, 3788, 3791, 3794, 3797, 3798, 3799, 3800, 3801, 3802, 3804, 3806, 3808, 3810, 3811, 3813, 3814, 3815, 3817, 3820, 3821, 3822, 3823, 3824, 3826, 3828, 3829, 3834, 3835, 3836, 3838, 3839, 3840, 3842, 3844, 3845, 3846, 3847, 3848, 3849, 3851, 3852, 3854, 3860, 3861, 3862, 3865, 3868, 3870, 3871, 3872, 3874, 3877, 3880, 3881, 3882, 3884, 3886, 3890, 3892, 3896, 3898, 3902, 3908, 3910, 3911, 3912, 3913, 3914, 3920, 3921, 3922, 3924, 3925, 3927, 3929, 3930, 3932, 3933, 3940, 3941, 3943, 3946, 3947, 3951, 3952, 3956, 3958, 3960, 3961, 3962, 3967, 3969, 3970, 3973, 3974, 3975, 3976, 3979, 3981, 3982, 3985, 3987, 3988, 3989, 3991, 3992, 3993, 3997, 4000, 4003, 4004, 4005, 4009, 4013, 4014, 4016, 4017, 4019, 4020, 4021, 4022, 4025, 4027, 4028, 4031, 4036, 4038, 4039, 4040, 4041, 4043, 4046, 4047, 4049, 4055, 4057, 4061, 4064, 4065, 4066, 4068, 4070, 4071, 4073, 4076, 4078, 4081, 4086, 4087, 4088, 4089, 4090, 4098, 4103, 4106, 4112, 4114, 4115, 4117, 4118, 4121, 4123, 4126, 4129, 4130, 4133, 4134, 4137, 4138, 4140, 4142, 4148, 4151, 4154, 4156, 4159, 4160, 4164, 4166, 4167, 4168, 4174, 4176, 4177, 4178, 4179, 4180, 4184, 4185, 4187, 4188, 4191, 4192, 4195, 4196, 4197, 4199, 4203, 4208, 4209, 4212, 4213, 4215, 4217, 4219, 4220, 4221, 4224, 4225, 4227, 4228, 4230, 4233, 4235, 4236, 4238, 4239, 4240, 4245, 4248, 4250, 4253, 4255, 4257, 4261, 4264, 4267, 4269, 4270, 4271, 4273, 4277, 4278, 4279, 4280, 4283, 4284, 4286, 4290, 4292, 4293, 4294, 4296, 4298, 4299, 4300, 4303, 4308, 4314, 4316, 4318, 4327, 4328, 4330, 4331, 4334, 4335, 4337, 4340, 4344, 4346, 4347, 4349, 4350, 4351, 4352, 4353, 4354, 4355, 4356, 4357, 4360, 4361, 4364, 4368, 4369, 4373, 4375, 4376, 4380, 4383, 4386, 4388, 4392, 4399, 4400, 4401, 4402, 4405, 4408, 4409, 4412, 4413, 4417, 4418, 4419, 4420, 4421, 4422, 4424, 4427, 4428, 4429, 4432, 4433, 4434, 4435, 4437, 4438, 4439, 4440, 4441, 4442, 4443, 4446, 4450, 4452, 4454, 4456, 4457, 4459, 4461, 4463, 4464, 4465, 4466, 4469, 4470, 4473, 4477, 4478, 4479, 4480, 4481, 4482, 4484, 4487, 4490, 4492, 4493, 4495, 4497, 4502, 4505, 4506, 4507, 4508, 4509, 4512, 4521, 4523, 4524, 4525, 4528, 4529, 4531, 4532, 4535, 4536, 4539, 4540, 4543, 4544, 4549, 4552, 4553, 4555, 4557, 4559, 4560, 4561, 4564, 4565, 4566, 4570, 4571, 4574, 4575, 4576, 4577, 4578, 4580, 4581, 4583, 4584, 4585, 4590, 4597, 4598, 4599, 4602, 4604, 4610, 4612, 4614, 4615, 4616, 4618, 4621, 4624, 4625, 4628, 4629, 4631, 4633, 4634, 4635, 4638, 4641, 4643, 4649, 4652, 4655, 4657, 4661, 4665, 4666, 4669, 4670, 4671, 4672, 4674, 4676, 4677, 4678, 4680, 4681, 4684, 4687, 4688, 4690, 4691, 4694, 4697, 4698, 4700, 4702, 4703, 4707, 4709, 4711, 4712, 4715, 4716, 4717, 4719, 4720, 4721, 4722, 4723, 4724, 4727, 4732, 4736, 4737, 4738, 4739, 4741, 4743, 4745, 4747, 4749, 4751, 4752, 4754, 4755, 4756, 4758, 4760, 4761, 4763, 4765, 4766, 4767, 4769, 4771, 4773, 4774, 4775, 4777, 4778, 4779, 4782, 4786, 4787, 4788, 4789, 4791, 4795, 4796, 4797, 4798, 4799, 4800, 4805, 4808, 4809, 4812, 4815, 4817, 4818, 4820, 4822, 4825, 4827, 4828, 4830, 4831, 4832, 4833, 4836, 4837, 4838, 4840, 4841, 4844, 4848, 4850, 4851, 4852, 4853, 4854, 4857, 4858, 4859, 4861, 4862, 4865, 4866, 4867, 4871, 4873, 4874, 4875, 4876, 4877, 4882, 4884, 4888, 4890, 4892, 4893, 4894, 4895, 4898, 4899, 4903, 4905, 4907, 4910, 4912, 4913, 4916, 4917, 4918, 4919, 4920, 4921, 4923, 4924, 4925, 4926, 4929, 4937, 4939, 4940, 4946, 4948, 4953, 4954, 4955, 4957, 4958, 4959, 4960, 4963, 4966, 4968, 4972, 4973, 4975, 4976, 4978, 4979, 4980, 4981, 4982, 4983, 4984, 4985, 4986, 4989, 4991, 4994, 4996, 4997, 4998, 4999, 5001, 5003, 5004, 5005, 5007, 5010, 5011, 5012, 5013, 5015, 5018, 5019, 5020, 5022, 5023, 5025, 5026, 5036, 5037, 5038, 5040, 5046, 5048, 5050, 5051, 5052, 5053, 5054, 5056, 5058, 5061, 5067, 5069, 5072, 5073, 5075, 5076, 5077, 5082, 5083, 5085, 5089, 5090, 5091, 5092, 5096, 5097, 5098, 5099, 5101, 5103, 5105, 5106, 5107, 5108, 5109, 5110, 5112, 5114, 5115, 5118, 5119, 5124, 5125, 5129, 5130, 5131, 5133, 5138, 5140, 5143, 5144, 5146, 5147, 5148, 5149, 5155, 5157, 5159, 5160, 5165, 5168, 5169, 5173, 5177, 5178, 5181, 5182, 5183, 5184, 5185, 5189, 5190, 5191, 5194, 5195, 5196, 5197, 5199, 5201, 5202, 5203, 5205, 5208, 5209, 5211, 5212, 5213, 5214, 5216, 5219, 5221, 5222, 5224, 5228, 5229, 5231, 5232, 5233, 5235, 5237, 5244, 5245, 5246, 5247, 5248, 5249, 5251, 5252, 5253, 5254, 5258, 5259, 5261, 5265, 5266, 5267, 5270, 5273, 5278, 5279, 5283, 5287, 5288, 5289, 5291, 5294, 5295, 5296, 5297, 5301, 5302, 5304, 5306, 5307, 5308, 5313, 5314, 5316, 5317, 5319, 5320, 5321, 5322, 5325, 5328, 5330, 5331, 5332, 5333, 5334, 5335, 5336, 5337, 5341, 5343, 5344, 5345, 5346, 5347, 5348, 5349, 5353, 5354, 5355, 5357, 5362, 5364, 5365, 5366, 5367, 5368, 5369, 5375, 5377, 5378, 5381, 5382, 5384, 5385, 5390, 5391, 5393, 5394, 5395, 5396, 5397, 5399, 5400, 5405, 5406, 5409, 5412, 5413, 5416, 5417, 5420, 5421, 5422, 5425, 5427, 5428, 5432, 5434, 5435, 5436, 5438, 5439, 5441, 5446, 5448, 5452, 5453, 5457, 5458, 5460, 5461, 5462, 5463, 5464, 5465, 5468, 5469, 5470, 5471, 5475, 5479, 5480, 5481, 5483, 5484, 5485, 5486, 5489, 5490, 5492, 5494, 5495, 5498, 5500, 5503, 5504, 5508, 5509, 5510, 5511, 5514, 5516, 5518, 5519, 5522, 5523, 5524, 5526, 5530, 5534, 5538, 5539, 5542, 5546, 5547, 5550, 5552, 5553, 5554, 5555, 5556, 5557, 5559, 5560, 5561, 5562, 5563, 5564, 5565, 5567, 5568, 5569, 5571, 5573, 5574, 5575, 5580, 5581, 5582, 5583, 5584, 5585, 5587, 5589, 5590, 5591, 5593, 5594, 5595, 5598, 5599, 5601, 5603, 5605, 5606, 5607, 5610, 5612, 5613, 5615, 5616, 5617, 5623, 5624, 5627, 5628, 5629, 5631, 5633, 5634, 5635, 5636, 5637, 5639, 5640, 5641, 5642, 5643, 5646, 5647, 5649, 5652, 5654, 5655, 5658, 5661, 5664, 5666, 5669, 5670, 5673, 5674, 5675, 5676, 5679, 5680, 5686, 5687, 5691, 5692, 5695, 5697, 5698, 5699, 5701, 5703, 5704, 5705, 5707, 5709, 5711, 5712, 5715, 5718, 5721, 5723, 5724, 5726, 5728, 5729, 5730, 5735, 5740, 5742, 5744, 5745, 5746, 5755, 5760, 5762, 5766, 5767, 5769, 5770, 5772, 5773, 5777, 5778, 5779, 5783, 5784, 5785, 5788, 5789, 5790, 5791, 5792, 5797, 5798, 5799, 5804, 5805, 5808, 5810, 5811, 5812, 5815, 5816, 5817, 5818, 5820, 5822, 5829, 5831, 5833, 5834, 5836, 5838, 5841, 5844, 5845, 5846, 5847, 5848, 5850, 5851, 5853, 5854, 5855, 5856, 5858, 5861, 5862, 5863, 5867, 5869, 5871, 5874, 5875, 5878, 5880, 5885, 5886, 5887, 5889, 5890, 5895, 5896, 5897, 5900, 5901, 5902, 5904, 5906, 5907, 5914, 5918, 5919, 5921, 5922, 5926, 5929, 5931, 5934, 5940, 5941, 5942, 5944, 5946, 5949, 5951, 5953, 5954, 5956, 5957, 5960, 5961, 5963, 5967, 5969, 5970, 5971, 5973, 5974, 5975, 5976, 5978, 5982, 5985, 5986, 5987, 5988, 5990, 5994, 5995, 5999, 6000, 6002, 6005, 6006, 6007, 6011, 6013, 6014, 6018, 6020, 6021, 6024, 6026, 6027, 6029, 6030, 6031, 6032, 6033, 6034, 6035, 6037, 6039, 6040, 6042, 6046, 6048, 6050, 6051, 6052, 6054, 6057, 6065, 6066, 6068, 6071, 6072, 6074, 6076, 6078, 6084, 6087, 6089, 6091, 6092, 6093, 6095, 6098, 6100, 6101, 6104, 6107, 6108, 6109, 6110, 6111, 6112, 6115, 6117, 6119, 6123, 6124, 6125, 6128, 6129, 6131, 6132, 6134, 6135, 6136, 6138, 6139, 6141, 6142, 6143, 6144, 6147, 6150, 6152, 6153, 6157, 6158, 6159, 6161, 6162, 6163, 6167, 6169, 6170, 6171, 6172, 6174, 6177, 6178, 6179, 6180, 6182, 6186, 6188, 6190, 6193, 6194, 6196, 6197, 6201, 6202, 6206, 6208, 6211, 6214, 6222, 6224, 6227, 6230, 6231, 6232, 6233, 6234, 6236, 6237, 6238, 6242, 6244, 6245, 6246, 6250, 6251, 6252, 6254, 6256, 6259, 6262, 6266, 6267, 6268, 6269, 6272, 6273, 6274, 6275, 6277, 6278, 6279, 6280, 6282, 6287, 6289, 6294, 6295, 6297, 6298, 6299, 6305, 6306, 6308, 6310, 6311, 6313, 6318, 6319, 6320, 6323, 6324, 6325, 6328, 6329, 6330, 6332, 6335, 6337, 6341, 6342, 6343, 6345, 6350, 6351, 6353, 6357, 6363, 6365, 6366, 6370, 6373, 6376, 6377, 6381, 6382, 6383, 6385, 6386, 6389, 6390, 6391, 6395, 6396, 6397, 6398, 6400, 6403, 6405, 6407, 6408, 6409, 6410, 6411, 6413, 6414, 6417, 6422, 6423, 6426, 6431, 6432, 6433, 6435, 6436, 6437, 6438, 6439, 6440, 6442, 6447, 6449, 6450, 6451, 6457, 6458, 6459, 6460, 6463, 6466, 6467, 6471, 6472, 6475, 6479, 6480, 6482, 6483, 6486, 6487, 6488, 6489, 6490, 6492, 6494, 6497, 6501, 6502, 6504, 6505, 6507, 6508, 6509, 6510, 6512, 6513, 6514, 6516, 6517, 6518, 6520, 6522, 6523, 6529, 6530, 6531, 6532, 6533, 6535, 6536, 6538, 6545, 6546, 6547, 6549, 6550, 6552, 6555, 6559, 6562, 6563, 6564, 6565, 6566, 6568, 6569, 6572, 6573, 6574, 6579, 6580, 6581, 6582, 6583, 6585, 6586, 6589, 6590, 6591, 6592, 6593, 6594, 6595, 6598, 6600, 6603, 6604, 6608, 6610, 6611, 6612, 6614, 6618, 6619, 6621, 6624, 6626, 6631, 6632, 6633, 6635, 6640, 6641, 6642, 6645, 6647, 6648, 6649, 6657, 6659, 6660, 6662, 6663, 6666, 6668, 6669, 6671, 6672, 6673, 6674, 6680, 6681, 6682, 6684, 6686, 6687, 6688, 6689, 6690, 6691, 6692, 6693, 6694, 6695, 6697, 6698, 6699, 6700, 6701, 6704, 6713, 6714, 6715, 6717, 6718, 6722, 6726, 6727, 6729, 6732, 6733, 6734, 6735, 6739, 6741, 6742, 6746, 6748, 6750, 6751, 6752, 6754, 6756, 6757, 6761, 6763, 6764, 6765, 6768, 6770, 6771, 6773, 6775, 6776, 6778, 6779, 6780, 6781, 6784, 6787, 6788, 6789, 6790, 6794, 6796, 6797, 6798, 6799, 6800, 6801, 6804, 6806, 6810, 6812, 6814, 6816, 6818, 6824, 6828, 6830, 6832, 6834, 6835, 6838, 6842, 6844, 6847, 6848, 6851, 6857, 6863, 6864, 6867, 6869, 6872, 6875, 6876, 6878, 6880, 6882, 6885, 6888, 6889, 6890, 6891, 6897, 6902, 6904, 6905, 6906, 6908, 6911, 6912, 6915, 6916, 6917, 6918, 6921, 6922, 6926, 6927, 6929, 6931, 6932, 6933, 6937, 6938, 6939, 6940, 6941, 6942, 6943, 6946, 6947, 6948, 6950, 6951, 6953, 6954, 6955, 6956, 6957, 6960, 6963, 6965, 6966, 6968, 6969, 6970, 6972, 6973, 6976, 6977, 6980, 6981, 6982, 6983, 6985, 6987, 6988, 6989, 6991, 6993, 6996, 6997, 6998, 6999, 7001, 7005, 7009, 7011, 7012, 7014, 7016, 7018, 7020, 7022, 7024, 7026, 7032, 7033, 7034, 7035, 7037, 7038, 7039, 7040, 7042, 7045, 7046, 7052, 7056, 7061, 7063, 7064, 7066, 7068, 7070, 7071, 7072, 7073, 7078, 7081, 7083, 7085, 7087, 7090, 7092, 7093, 7094, 7095, 7096, 7102, 7103, 7104, 7105, 7106, 7107, 7108, 7112, 7114, 7116, 7118, 7120, 7124, 7126, 7127, 7130, 7132, 7134, 7137, 7138, 7140, 7144, 7145, 7146, 7147, 7148, 7149, 7150, 7151, 7155, 7157, 7159, 7161, 7163, 7168, 7172, 7174, 7178, 7180, 7181, 7183, 7187, 7189, 7190, 7191, 7193, 7196, 7197, 7199, 7201, 7202, 7203, 7204, 7206, 7209, 7210, 7211, 7213, 7215, 7220, 7221, 7224, 7228, 7229, 7232, 7235, 7236, 7238, 7239, 7240, 7242, 7247, 7249, 7251, 7252, 7253, 7256, 7259, 7260, 7261, 7269, 7270, 7273, 7274, 7275, 7276, 7278, 7279, 7280, 7284, 7285, 7288, 7289, 7290, 7292, 7293, 7295, 7296, 7297, 7300, 7301, 7302, 7303, 7304, 7305, 7308, 7312, 7314, 7319, 7320, 7322, 7324, 7326, 7328, 7329, 7333, 7334, 7336, 7338, 7339, 7342, 7343, 7344, 7347, 7348, 7350, 7354, 7357, 7358, 7360, 7361, 7362, 7364, 7365, 7367, 7369, 7370, 7371, 7372, 7373, 7374, 7375, 7376, 7378, 7379, 7380, 7381, 7386, 7388, 7389, 7390, 7395, 7396, 7398, 7399, 7400, 7401, 7404, 7405, 7406, 7408, 7410, 7412, 7413, 7414, 7415, 7417, 7420, 7421, 7427, 7431, 7432, 7433, 7434, 7436, 7437, 7438, 7439, 7441, 7447, 7449, 7454, 7455, 7457, 7458, 7460, 7464, 7465, 7466, 7468, 7470, 7471, 7478, 7480, 7484, 7485, 7486, 7487, 7490, 7491, 7492, 7494, 7500, 7501, 7502, 7503, 7504, 7505, 7514, 7515, 7517, 7518, 7519, 7520, 7524, 7527, 7529, 7530, 7531, 7533, 7534, 7540, 7541, 7542, 7544, 7545, 7546, 7548, 7550, 7551, 7553, 7554, 7559, 7564, 7567, 7572, 7573, 7577, 7578, 7579, 7580, 7581, 7585, 7588, 7595, 7597, 7598, 7599, 7601, 7602, 7604, 7605, 7609, 7611, 7612, 7614, 7616, 7621, 7622, 7623, 7624, 7626, 7627, 7630, 7631, 7633, 7636, 7638, 7639, 7641, 7644, 7649, 7650, 7651, 7653, 7656, 7658, 7659, 7660, 7661, 7662, 7663, 7664, 7665, 7666, 7667, 7669, 7673, 7676, 7677, 7681, 7683, 7684, 7685, 7686, 7687, 7692, 7693, 7698, 7699, 7700, 7701, 7702, 7704, 7705, 7706, 7713, 7714, 7716, 7717, 7718, 7727, 7730, 7731, 7733, 7734, 7736, 7738, 7739, 7740, 7742, 7743, 7744, 7748, 7749, 7751, 7754, 7755, 7758, 7760, 7761, 7764, 7765, 7767, 7768, 7769, 7771, 7772, 7782, 7783, 7786, 7789, 7791, 7795, 7796, 7797, 7798, 7801, 7802, 7803, 7806, 7809, 7811, 7812, 7813, 7814, 7822, 7823, 7825, 7826, 7827, 7828, 7830, 7834, 7835, 7837, 7839, 7840, 7841, 7842, 7846, 7847, 7850, 7851, 7853, 7859, 7860, 7861, 7862, 7863, 7864, 7865, 7871, 7877, 7881, 7884, 7885, 7886, 7888, 7889, 7892, 7893, 7894, 7896, 7897, 7898, 7899, 7900, 7901, 7903, 7904, 7905, 7906, 7908, 7911, 7913, 7915, 7918, 7919, 7921, 7925, 7928, 7931, 7936, 7937, 7938, 7939, 7940, 7942, 7945, 7947, 7950, 7951, 7954, 7955, 7956, 7960, 7961, 7966, 7972, 7977, 7979, 7980, 7981, 7984, 7986, 7988, 7990, 7991, 7993, 7995, 7996, 7997, 7999, 8003, 8005, 8006, 8008, 8009, 8010, 8011, 8013, 8015, 8016, 8019, 8025, 8026, 8028, 8030, 8032, 8034, 8036, 8038, 8043, 8044, 8045, 8048, 8049, 8050, 8052, 8053, 8057, 8058, 8060, 8061, 8062, 8064, 8065, 8066, 8068, 8069, 8071, 8073, 8074, 8077, 8079, 8082, 8084, 8085, 8086, 8090, 8091, 8093, 8097, 8100, 8102, 8107, 8108, 8110, 8111, 8112, 8113, 8114, 8115, 8116, 8119, 8121, 8122, 8123, 8124, 8125, 8129, 8130, 8132, 8134, 8137, 8138, 8140, 8144, 8145, 8147, 8151, 8152, 8153, 8156, 8157, 8159, 8161, 8162, 8163, 8164, 8166, 8167, 8171, 8173, 8178, 8181, 8182, 8183, 8185, 8188, 8189, 8190, 8192, 8193, 8194, 8198, 8201, 8202, 8205, 8206, 8207, 8209, 8211, 8213, 8220, 8222, 8227, 8228, 8229, 8233, 8235, 8236, 8238, 8240, 8243, 8244, 8246, 8247, 8248, 8249, 8250, 8251, 8253, 8254, 8256, 8257, 8259, 8262, 8264, 8265, 8266, 8267, 8268, 8270, 8271, 8272, 8276, 8280, 8281, 8284, 8287, 8289, 8290, 8291, 8293, 8296, 8298, 8300, 8303, 8311, 8316, 8317, 8318, 8319, 8324, 8325, 8326, 8327, 8328, 8331, 8334, 8338, 8339, 8340, 8341, 8345, 8347, 8349, 8350, 8352, 8353, 8362, 8363, 8364, 8365, 8368, 8369, 8372, 8373, 8374, 8376, 8377, 8379, 8381, 8384, 8386, 8391, 8393, 8396, 8398, 8399, 8400, 8401, 8402, 8404, 8406, 8407, 8409, 8410, 8411, 8414, 8415, 8420, 8422, 8423, 8424, 8425, 8426, 8427, 8429, 8430, 8433, 8436, 8437, 8439, 8441, 8443, 8445, 8447, 8449, 8450, 8453, 8457, 8458, 8459, 8461, 8465, 8467, 8469, 8470, 8471, 8472, 8473, 8477, 8482, 8483, 8485, 8486, 8487, 8489, 8491, 8493, 8494, 8495, 8496, 8498, 8500, 8501, 8503, 8505, 8508, 8509, 8510, 8511, 8512, 8514, 8516, 8519, 8521, 8522, 8523, 8526, 8528, 8529, 8531, 8532, 8534, 8535, 8538, 8540, 8541, 8542, 8548, 8550, 8554, 8556, 8562, 8563, 8566, 8567, 8568, 8573, 8576, 8577, 8579, 8583, 8585, 8587, 8591, 8592, 8598, 8599, 8600, 8602, 8605, 8608, 8609, 8610, 8611, 8612, 8613, 8615, 8616, 8618, 8621, 8624, 8626, 8629, 8630, 8631, 8633, 8634, 8635, 8636, 8637, 8640, 8641, 8643, 8644, 8646, 8648, 8649, 8650, 8651, 8652, 8653, 8659, 8663, 8664, 8665, 8667, 8668, 8669, 8673, 8675, 8676, 8678, 8680, 8681, 8684, 8687, 8691, 8693, 8694, 8695, 8697, 8698, 8699, 8700, 8702, 8703, 8705, 8707, 8708, 8710, 8711, 8712, 8713, 8714, 8716, 8717, 8719, 8721, 8723, 8728, 8729, 8732, 8735, 8738, 8739, 8740, 8746, 8747, 8751, 8753, 8754, 8755, 8758, 8759, 8760, 8761, 8762, 8763, 8767, 8768, 8772, 8774, 8775, 8776, 8777, 8780, 8781, 8785, 8787, 8792, 8793, 8795, 8797, 8799, 8800, 8801, 8803, 8804, 8805, 8806, 8807, 8809, 8810, 8813, 8814, 8816, 8818, 8823, 8824, 8825, 8826, 8829, 8831, 8832, 8833, 8834, 8837, 8838, 8839, 8841, 8842, 8843, 8848, 8849, 8852, 8853, 8854, 8858, 8860, 8865, 8869, 8871, 8873, 8875, 8876, 8877, 8879, 8880, 8883, 8884, 8887, 8888, 8889, 8890, 8895, 8896, 8897, 8898, 8904, 8906, 8907, 8908, 8911, 8912, 8913, 8916, 8917, 8918, 8920, 8922, 8923, 8925, 8928, 8931, 8932, 8934, 8935, 8936, 8943, 8945, 8947, 8948, 8951, 8952, 8953, 8955, 8963, 8967, 8968, 8970, 8971, 8973, 8974, 8976, 8977, 8978, 8979, 8980, 8985, 8987, 8989, 8991, 8994, 8996, 8999, 9002, 9005, 9006, 9009, 9013, 9022, 9026, 9027, 9028, 9029, 9031, 9032, 9034, 9036, 9038, 9040, 9045, 9047, 9048, 9049, 9051, 9053, 9056, 9061, 9062, 9063, 9064, 9065, 9069, 9071, 9072, 9075, 9079, 9081, 9082, 9083, 9084, 9088, 9089, 9093, 9094, 9097, 9098, 9100, 9101, 9102, 9104, 9107, 9108, 9110, 9111, 9112, 9113, 9115, 9119, 9122, 9128, 9131, 9134, 9135, 9137, 9139, 9141, 9144, 9145, 9147, 9149, 9150, 9151, 9153, 9155, 9156, 9157, 9158, 9161, 9162, 9163, 9164, 9168, 9169, 9170, 9172, 9175, 9176, 9179, 9183, 9184, 9188, 9190, 9191, 9192, 9193, 9194, 9198, 9199, 9200, 9201, 9203, 9204, 9205, 9208, 9210, 9211, 9215, 9216, 9217, 9219, 9220, 9222, 9223, 9224, 9226, 9227, 9228, 9229, 9233, 9237, 9238, 9239, 9240, 9242, 9244, 9246, 9248, 9249, 9250, 9251, 9256, 9260, 9262, 9266, 9268, 9270, 9271, 9272, 9273, 9274, 9275, 9277, 9279, 9284, 9286, 9288, 9292, 9294, 9297, 9298, 9299, 9301, 9304, 9306, 9307, 9308, 9311, 9313, 9316, 9317, 9321, 9323, 9327, 9329, 9331, 9332, 9333, 9334, 9335, 9338, 9340, 9341, 9342, 9345, 9348, 9354, 9355, 9357, 9361, 9362, 9363, 9367, 9370, 9375, 9376, 9377, 9378, 9379, 9380, 9381, 9382, 9383, 9388, 9390, 9391, 9394, 9396, 9397, 9398, 9399, 9400, 9402, 9405, 9407, 9408, 9410, 9411, 9418, 9425, 9427, 9428, 9429, 9430, 9433, 9436, 9440, 9442, 9445, 9446, 9449, 9450, 9453, 9455, 9457, 9463, 9465, 9467, 9472, 9474, 9477, 9481, 9483, 9484, 9485, 9490, 9492, 9493, 9494, 9495, 9496, 9498, 9505, 9506, 9507, 9510, 9514, 9515, 9518, 9520, 9522, 9523, 9524, 9525, 9526, 9527, 9529, 9530, 9531, 9532, 9534, 9536, 9539, 9542, 9546, 9547, 9549, 9550, 9552, 9553, 9556, 9557, 9561, 9562, 9563, 9571, 9572, 9577, 9580, 9582, 9587, 9588, 9589, 9590, 9591, 9592, 9593, 9596, 9597, 9598, 9600, 9601, 9602, 9605, 9607, 9610, 9612, 9614, 9615, 9619, 9620, 9625, 9631, 9633, 9635, 9636, 9637, 9638, 9639, 9640, 9641, 9642, 9643, 9644, 9645, 9647, 9648, 9651, 9652, 9653, 9656, 9658, 9660, 9661, 9663, 9664, 9665, 9666, 9668, 9669, 9671, 9675, 9679, 9680, 9682, 9686, 9687, 9688, 9692, 9694, 9698, 9703, 9708, 9709, 9710, 9711, 9716, 9717, 9718, 9719, 9724, 9725, 9726, 9729, 9731, 9733, 9734, 9735, 9738, 9740, 9743, 9745, 9746, 9750, 9751, 9752, 9754, 9755, 9758, 9759, 9762, 9765, 9766, 9767, 9769, 9770, 9771, 9774, 9776, 9779, 9780, 9781, 9783, 9784, 9785, 9786, 9788, 9789, 9790, 9791, 9796, 9804, 9805, 9810, 9811, 9815, 9820, 9821, 9824, 9825, 9826, 9827, 9829, 9836, 9838, 9841, 9842, 9843, 9844, 9845, 9847, 9855, 9857, 9858, 9860, 9861, 9865, 9866, 9870, 9872, 9879, 9885, 9889, 9892, 9893, 9895, 9900, 9902, 9905, 9907, 9909, 9914, 9915, 9916, 9918, 9919, 9920, 9921, 9922, 9924, 9933, 9934, 9936, 9937, 9938, 9939, 9941, 9945, 9947, 9951, 9953, 9955, 9957, 9958, 9959, 9960, 9961, 9962, 9964, 9965, 9966, 9967, 9968, 9969, 9972, 9975, 9976, 9978, 9980, 9986, 9987, 9989, 9990, 9991, 9993, 9995, 9996, 9999, 10000, 10003, 10005, 10006, 10007, 10010, 10014, 10017, 10018, 10019, 10020, 10023, 10025, 10026, 10028, 10029, 10031, 10033, 10034, 10036, 10043, 10046, 10047, 10049, 10050, 10051, 10052, 10053, 10054, 10057, 10058, 10059, 10061, 10063, 10065, 10067, 10068, 10070, 10071, 10072, 10073, 10076, 10079, 10080, 10084, 10085, 10086, 10087, 10088, 10090, 10097, 10098, 10104, 10108, 10109, 10113, 10114, 10117, 10118, 10121, 10122, 10124, 10125, 10126, 10127, 10129, 10130, 10131, 10132, 10134, 10135, 10136, 10137, 10139, 10140, 10145, 10146, 10147, 10148, 10149, 10150, 10151, 10154, 10158, 10160, 10164, 10165, 10167, 10169, 10170, 10172, 10176, 10177, 10179, 10180, 10181, 10184, 10189, 10197, 10198, 10200, 10204, 10205, 10206, 10208, 10210, 10211, 10213, 10214, 10215, 10216, 10217, 10219, 10220, 10221, 10222, 10223, 10230, 10231, 10232, 10234, 10235, 10236, 10237, 10239, 10240, 10241, 10242, 10243, 10244, 10248, 10249, 10252, 10253, 10254, 10255, 10259, 10261, 10263, 10264, 10266, 10267, 10268, 10269, 10271, 10273, 10274, 10277, 10279, 10282, 10288, 10289, 10291, 10292, 10293, 10294, 10295, 10300, 10301, 10316, 10317, 10319, 10320, 10322, 10323, 10326, 10329, 10331, 10332, 10333, 10337, 10340, 10342, 10343, 10344, 10346, 10348, 10349, 10353, 10359, 10361, 10362, 10365, 10367, 10369, 10370, 10371, 10372, 10376, 10377, 10379, 10380, 10382, 10385, 10386, 10387, 10390, 10391, 10393, 10394, 10396, 10404, 10410, 10413, 10415, 10420, 10421, 10422, 10424, 10425, 10426, 10427, 10430, 10434, 10435, 10437, 10438, 10443, 10445, 10446, 10447, 10448, 10450, 10452, 10453, 10455, 10456, 10457, 10458, 10460, 10461, 10462, 10465, 10466, 10468, 10469, 10470, 10472, 10473, 10474, 10477, 10478, 10480, 10481, 10484, 10485, 10486, 10487, 10488, 10489, 10490, 10495, 10497, 10498, 10499, 10501, 10502, 10504, 10505, 10512, 10516, 10517, 10518, 10519, 10520, 10522, 10527, 10529, 10531, 10532, 10533, 10536, 10537, 10538, 10541, 10542, 10547, 10548, 10550, 10551, 10552, 10554, 10555, 10556, 10558, 10561, 10563, 10566, 10569, 10573, 10574, 10576, 10578, 10582, 10586, 10588, 10589, 10590, 10595, 10596, 10597, 10598, 10602, 10603, 10604, 10607, 10608, 10611, 10613, 10614, 10617, 10620, 10621, 10622, 10624, 10626, 10627, 10632, 10633, 10634, 10638, 10639, 10641, 10642, 10644, 10647, 10655, 10656, 10658, 10661, 10662, 10663, 10665, 10666, 10667, 10669, 10670, 10671, 10672, 10673, 10674, 10675, 10677, 10678, 10680, 10681, 10685, 10686, 10691, 10692, 10693, 10695, 10703, 10707, 10708, 10709, 10710, 10711, 10712, 10714, 10715, 10720, 10724, 10726, 10727, 10728, 10733, 10736, 10738, 10742, 10743, 10746, 10747, 10750, 10752, 10753, 10758, 10760, 10763, 10765, 10766, 10768, 10770, 10772, 10773, 10775, 10776, 10777, 10778, 10781, 10782, 10783, 10784, 10786, 10787, 10790, 10791, 10792, 10793, 10794, 10795, 10798, 10800, 10801, 10805, 10807, 10810, 10812, 10814, 10815, 10824, 10825, 10826, 10827, 10829, 10830, 10833, 10837, 10842, 10843, 10845, 10848, 10849, 10852, 10856, 10858, 10861, 10862, 10865, 10866, 10870, 10871, 10873, 10874, 10876, 10877, 10879, 10880, 10881, 10882, 10884, 10885, 10886, 10889, 10890, 10891, 10895, 10899, 10901, 10902, 10907, 10909, 10911, 10912, 10915, 10916, 10918, 10920, 10921, 10924, 10928, 10932, 10934, 10935, 10936, 10938, 10939, 10942, 10944, 10946, 10947, 10948, 10949, 10951, 10952, 10954, 10955, 10958, 10959, 10960, 10961, 10962, 10963, 10966, 10967, 10970, 10973, 10975, 10977, 10979, 10981, 10982, 10983, 10984, 10985, 10986, 10988, 10989, 10990, 10994, 10995, 10999, 11001, 11003, 11006, 11008, 11009, 11010, 11012, 11014, 11015, 11016, 11018, 11019, 11021, 11022, 11024, 11026, 11030, 11035, 11037, 11038, 11039, 11041, 11043, 11045, 11046, 11047, 11048, 11049, 11050, 11051, 11052, 11055, 11056, 11060, 11064, 11065, 11066, 11067, 11068, 11069, 11071, 11072, 11073, 11074, 11076, 11077, 11079, 11081, 11082, 11084, 11085, 11089, 11090, 11091, 11092, 11094, 11095, 11096, 11097, 11098, 11099, 11100, 11103, 11105, 11106, 11108, 11109, 11110, 11113, 11114, 11117, 11118, 11121, 11124, 11126, 11128, 11131, 11133, 11135, 11139, 11140, 11141, 11142, 11146, 11147, 11148, 11150, 11151, 11152, 11155, 11160, 11164, 11165, 11166, 11167, 11170, 11171, 11173, 11174, 11175, 11177, 11178, 11182, 11183, 11184, 11190, 11195, 11196, 11199, 11202, 11207, 11210, 11213, 11214, 11215, 11217, 11220, 11221, 11222, 11224, 11225, 11227, 11230, 11232, 11235, 11237, 11238, 11239, 11240, 11241, 11242, 11247, 11248, 11250, 11254, 11256, 11257, 11258, 11260, 11261, 11262, 11265, 11266, 11267, 11270, 11271, 11272, 11274, 11279, 11280, 11282, 11287, 11289, 11291, 11292, 11293, 11295, 11296, 11297, 11298, 11300, 11301, 11302, 11303, 11304, 11305, 11307, 11310, 11311, 11312, 11318, 11321, 11323, 11324, 11325, 11332, 11333, 11334, 11336, 11339, 11343, 11346, 11349, 11350, 11351, 11357, 11359, 11361, 11364, 11365, 11366, 11367, 11370, 11371, 11373, 11374, 11377, 11378, 11379, 11387, 11388, 11390, 11391, 11393, 11397, 11399, 11401, 11403, 11404, 11407, 11408, 11410, 11411, 11413, 11414, 11415, 11416, 11418, 11420, 11422, 11426, 11428, 11429, 11430, 11432, 11435, 11437, 11439, 11440, 11442, 11443, 11444, 11445, 11448, 11449, 11456, 11458, 11459, 11460, 11461, 11463, 11465, 11468, 11471, 11472, 11473, 11478, 11481, 11482, 11483, 11486, 11487, 11491, 11498, 11499, 11500, 11505, 11506, 11507, 11510, 11516, 11519, 11521, 11522, 11524, 11527, 11529, 11530, 11531, 11536, 11537, 11538, 11539, 11541, 11545, 11547, 11548, 11551, 11552, 11553, 11554, 11560, 11561, 11563, 11564, 11566, 11570, 11572, 11574, 11575, 11576, 11578, 11580, 11582, 11583, 11585, 11586, 11587, 11588, 11590, 11591, 11597, 11598, 11599, 11600, 11602, 11605, 11606, 11608, 11609, 11610, 11615, 11616, 11621, 11623, 11625, 11626, 11627, 11629, 11630, 11633, 11635, 11637, 11639, 11640, 11641, 11642, 11643, 11647, 11649, 11651, 11652, 11653, 11655, 11657, 11658, 11660, 11666, 11667, 11669, 11670, 11671, 11672, 11674, 11676, 11677, 11678, 11679, 11686, 11687, 11688, 11689, 11696, 11698, 11702, 11703, 11706, 11708, 11711, 11714, 11715, 11716, 11719, 11722, 11725, 11727, 11728, 11733, 11739, 11740, 11741, 11743, 11745, 11748, 11749, 11750, 11751, 11752, 11753, 11759, 11760, 11763, 11766, 11768, 11774, 11778, 11780, 11783, 11784, 11785, 11786, 11787, 11788, 11792, 11793, 11794, 11796, 11797, 11798, 11799, 11802, 11803, 11804, 11805, 11807, 11808, 11811, 11812, 11813, 11814, 11816, 11817, 11818, 11819, 11820, 11822, 11823, 11826, 11829, 11831, 11833, 11834, 11835, 11836, 11837, 11839, 11840, 11841, 11844, 11847, 11849, 11850, 11852, 11855, 11857, 11862, 11864, 11865, 11868, 11869, 11870, 11871, 11872, 11874, 11875, 11877, 11878, 11880, 11881, 11883, 11885, 11888, 11889, 11890, 11894, 11895, 11899, 11902, 11903, 11905, 11906, 11907, 11908, 11909, 11910, 11912, 11914, 11915, 11918, 11919, 11921, 11922, 11923, 11924, 11925, 11926, 11930, 11931, 11932, 11934, 11938, 11943, 11944, 11945, 11947, 11950, 11951, 11953, 11955, 11958, 11963, 11965, 11966, 11967, 11972, 11976, 11977, 11979, 11983, 11984, 11986, 11987, 11988, 11989, 11990, 11991, 11992, 11993, 11997, 11998, 12000, 12002, 12003, 12004, 12005, 12006, 12009, 12011, 12012, 12015, 12019, 12022, 12023, 12024, 12026, 12029, 12030, 12032, 12034, 12036, 12037, 12039, 12040, 12042, 12043, 12045, 12046, 12050, 12053, 12055, 12057, 12058, 12065, 12067, 12068, 12071, 12075, 12077, 12078, 12080, 12086, 12088, 12090, 12091, 12092, 12094, 12098, 12100, 12102, 12103, 12105, 12107, 12109, 12114, 12116, 12117, 12118, 12122, 12123, 12124, 12125, 12126, 12130, 12131, 12134, 12136, 12137, 12140, 12141, 12142, 12143, 12144, 12152, 12153, 12154, 12156, 12157, 12159, 12160, 12163, 12164, 12166, 12167, 12168, 12169, 12174, 12175, 12178, 12179, 12183, 12184, 12185, 12187, 12188, 12191, 12198, 12200, 12203, 12207, 12210, 12215, 12217, 12218, 12219, 12222, 12223, 12224, 12227, 12228, 12229, 12231, 12234, 12239, 12240, 12244, 12246, 12248, 12249, 12250, 12251, 12253, 12256, 12262, 12264, 12268, 12269, 12273, 12275, 12277, 12278, 12280, 12285, 12286, 12288, 12289, 12291, 12293, 12294, 12295, 12298, 12299, 12302, 12306, 12308, 12310, 12314, 12317, 12320, 12322, 12323, 12325, 12327, 12328, 12329, 12331, 12332, 12333, 12334, 12335, 12337, 12340, 12341, 12342, 12345, 12348, 12349, 12350, 12353, 12354, 12355, 12358, 12359, 12363, 12364, 12365, 12367, 12370, 12371, 12373, 12379, 12380, 12382, 12383, 12385, 12391, 12392, 12393, 12394, 12395, 12396, 12398, 12401, 12402, 12403, 12404, 12405, 12407, 12408, 12410, 12415, 12416, 12417, 12418, 12419, 12420, 12422, 12425, 12427, 12428, 12432, 12436, 12437, 12439, 12440, 12441, 12443, 12444, 12445, 12449, 12455, 12457, 12458, 12459, 12460, 12461, 12462, 12465, 12466, 12467, 12471, 12474, 12477, 12479, 12481, 12483, 12490, 12491, 12493, 12494, 12495, 12496, 12498, 12499, 12501, 12502, 12503, 12505, 12506, 12507, 12508, 12509, 12514, 12515, 12516, 12519, 12520, 12521, 12522, 12523, 12524, 12525, 12526, 12527, 12528, 12532, 12533, 12534, 12535, 12536, 12538, 12539, 12540, 12541, 12546, 12548, 12549, 12552, 12555, 12556, 12557, 12559, 12560, 12561, 12563, 12565, 12566, 12568, 12569, 12570, 12571, 12575, 12576, 12577, 12578, 12579, 12580, 12582, 12586, 12587, 12588, 12589, 12590, 12592, 12593, 12594, 12595, 12600, 12602, 12603, 12604, 12608, 12611, 12614, 12615, 12616, 12619, 12621, 12622, 12623, 12624, 12625, 12627, 12628, 12630, 12633, 12634, 12635, 12636, 12637, 12638, 12639, 12640, 12645, 12647, 12650, 12652, 12653, 12655, 12656, 12661, 12662, 12663, 12664, 12666, 12667, 12668, 12669, 12671, 12673, 12674, 12675, 12676, 12679, 12681, 12682, 12684, 12685, 12687, 12688, 12689, 12690, 12692, 12693, 12694, 12696, 12698, 12701, 12703, 12705, 12706, 12708, 12709, 12710, 12712, 12713, 12714, 12715, 12718, 12719, 12722, 12723, 12724, 12729, 12730, 12732, 12733, 12740, 12742, 12743, 12745, 12748, 12749, 12753, 12754, 12755, 12756, 12757, 12759, 12762, 12763, 12764, 12765, 12768, 12769, 12772, 12778, 12779, 12781, 12784, 12785, 12787, 12788, 12790, 12791, 12793, 12797, 12798, 12800, 12808, 12814, 12815, 12816, 12819, 12825, 12826, 12829, 12830, 12831, 12835, 12836, 12838, 12839, 12841, 12842, 12843, 12844, 12848, 12849, 12851, 12852, 12853, 12856, 12857, 12858, 12860, 12863, 12868, 12869, 12873, 12874, 12875, 12879, 12881, 12882, 12883, 12884, 12885, 12886, 12887, 12888, 12890, 12892, 12893, 12894, 12896, 12899, 12902, 12903, 12904, 12905, 12909, 12910, 12911, 12913, 12915, 12917, 12923, 12924, 12925, 12926, 12928, 12930, 12931, 12935, 12936, 12937, 12943, 12944, 12945, 12951, 12952, 12953, 12954, 12955, 12956, 12958, 12960, 12961, 12966, 12967, 12970, 12972, 12973, 12974, 12975, 12980, 12983, 12984, 12985, 12987, 12989, 12990, 12991, 12992, 12994, 12997, 12998, 12999, 13002, 13006, 13008, 13011, 13012, 13014, 13015, 13016, 13021, 13022, 13024, 13025, 13026, 13030, 13031, 13038, 13039, 13041, 13042, 13043, 13044, 13049, 13052, 13053, 13055, 13060, 13061, 13062, 13064, 13065, 13066, 13068, 13070, 13071, 13076, 13078, 13079, 13080, 13084, 13087, 13088, 13099, 13101, 13103, 13105, 13106, 13108, 13111, 13112, 13114, 13117, 13119, 13120, 13122, 13123, 13124, 13126, 13129, 13134, 13135, 13141, 13143, 13144, 13145, 13147, 13149, 13151, 13152, 13154, 13156, 13157, 13160, 13162, 13163, 13164, 13166, 13167, 13169, 13170, 13171, 13174, 13176, 13177, 13180, 13182, 13183, 13185, 13189, 13190, 13191, 13195, 13197, 13199, 13201, 13202, 13204, 13205, 13206, 13209, 13210, 13211, 13216, 13217, 13218, 13220, 13221, 13228, 13229, 13230, 13232, 13233, 13235, 13236, 13238, 13240, 13241, 13242, 13244, 13247, 13248, 13252, 13259, 13263, 13265, 13266, 13269, 13270, 13271, 13276, 13278, 13279, 13282, 13284, 13289, 13291, 13297, 13298, 13301, 13303, 13304, 13305, 13309, 13310, 13311, 13312, 13314, 13315, 13319, 13321, 13322, 13323, 13325, 13329, 13330, 13331, 13339, 13340, 13341, 13342, 13344, 13345, 13348, 13350, 13351, 13352, 13355, 13356, 13357, 13358, 13359, 13362, 13363, 13366, 13371, 13372, 13373, 13375, 13377, 13379, 13381, 13384, 13386, 13389, 13392, 13394, 13396, 13397, 13399, 13400, 13404, 13405, 13406, 13408, 13409, 13410, 13411, 13412, 13415, 13417, 13418, 13419, 13420, 13421, 13422, 13424, 13425, 13427, 13428, 13434, 13436, 13437, 13440, 13442, 13444, 13445, 13446, 13448, 13450, 13453, 13454, 13461, 13464, 13468, 13469, 13470, 13471, 13472, 13474, 13475, 13476, 13477, 13478, 13480, 13482, 13483, 13486, 13489, 13491, 13494, 13496, 13501, 13502, 13503, 13504, 13505, 13508, 13509, 13513, 13515, 13517, 13519, 13520, 13521, 13522, 13525, 13526, 13527, 13529, 13531, 13532, 13533, 13534, 13536, 13539, 13541, 13542, 13543, 13546, 13550, 13551, 13552, 13559, 13563, 13564, 13565, 13566, 13567, 13570, 13571, 13573, 13575, 13576, 13577, 13578, 13582, 13584, 13585, 13586, 13589, 13591, 13593, 13594, 13597, 13598, 13600, 13601, 13604, 13606, 13607, 13608, 13611, 13612, 13613, 13614, 13615, 13617, 13618, 13619, 13621, 13622, 13625, 13626, 13627, 13628, 13629, 13630, 13632, 13636, 13637, 13639, 13640, 13641, 13642, 13644, 13646, 13647, 13650, 13651, 13654, 13657, 13662, 13663, 13664, 13666, 13668, 13669, 13673, 13676, 13680, 13684, 13685, 13686, 13690, 13691, 13692, 13696, 13697, 13698, 13700, 13705, 13706, 13709, 13710, 13712, 13713, 13715, 13717, 13718, 13719, 13721, 13724, 13725, 13727, 13728, 13730, 13732, 13733, 13737, 13741, 13743, 13744, 13753, 13757, 13758, 13759, 13762, 13763, 13765, 13766, 13767, 13769, 13770, 13771, 13775, 13776, 13780, 13782, 13783, 13784, 13785, 13788, 13789, 13794, 13798, 13799, 13804, 13805, 13807, 13808, 13812, 13816, 13817, 13819, 13820, 13822, 13823, 13828, 13829, 13830, 13831, 13832, 13834, 13835, 13838, 13839, 13840, 13845, 13849, 13850, 13851, 13852, 13854, 13857, 13859, 13861, 13862, 13864, 13868, 13869, 13871, 13872, 13873, 13876, 13879, 13881, 13882, 13883, 13890, 13891, 13892, 13894, 13895, 13898, 13899, 13900, 13901, 13902, 13904, 13906, 13908, 13910, 13911, 13912, 13914, 13917, 13919, 13920, 13921, 13923, 13926, 13930, 13931, 13932, 13933, 13934, 13935, 13937, 13938, 13939, 13940, 13941, 13946, 13947, 13952, 13953, 13954, 13956, 13960, 13961, 13965, 13972, 13973, 13974, 13976, 13977, 13978, 13979, 13980, 13983, 13984, 13986, 13989, 13990, 13993, 13995, 14000, 14002, 14004, 14005, 14006, 14007, 14008, 14009, 14010, 14011, 14012, 14015, 14017, 14019, 14020, 14023, 14024, 14025, 14026, 14030, 14031, 14032, 14033, 14034, 14038, 14039, 14041, 14049, 14051, 14056, 14058, 14059, 14060, 14061, 14063, 14066, 14067, 14068, 14070, 14071, 14073, 14074, 14075, 14076, 14078, 14079, 14082, 14084, 14086, 14088, 14092, 14093, 14095, 14096, 14097, 14100, 14105, 14107, 14108, 14110, 14112, 14113, 14116, 14117, 14119, 14121, 14123, 14124, 14125, 14128, 14129, 14130, 14131, 14132, 14133, 14135, 14136, 14137, 14138, 14141, 14142, 14145, 14146, 14148, 14151, 14152, 14155, 14156, 14157, 14158, 14160, 14161, 14165, 14167, 14170, 14177, 14180, 14182, 14183, 14184, 14186, 14187, 14189, 14192, 14194, 14196, 14197, 14200, 14201, 14202, 14204, 14206, 14207, 14210, 14216, 14218, 14221, 14222, 14223, 14224, 14226, 14229, 14232, 14233, 14234, 14238, 14241, 14242, 14243, 14245, 14246, 14247, 14248, 14250, 14252, 14253, 14254, 14256, 14257, 14258, 14260, 14261, 14265, 14267, 14268, 14271, 14273, 14274, 14275, 14276, 14279, 14280, 14281, 14284, 14286, 14287, 14288, 14289, 14291, 14292, 14294, 14295, 14296, 14297, 14299, 14300, 14302, 14303, 14305, 14306, 14309, 14313, 14315, 14316, 14317, 14318, 14320, 14321, 14322, 14323, 14324, 14326, 14330, 14334, 14338, 14340, 14341, 14343, 14344, 14346, 14347, 14348, 14352, 14354, 14357, 14365, 14366, 14367, 14369, 14371, 14372, 14373, 14375, 14379, 14380, 14383, 14385, 14386, 14389, 14390, 14392, 14396, 14397, 14398, 14399, 14400, 14401, 14402, 14404, 14408, 14410, 14411, 14413, 14414, 14415, 14419, 14421, 14422, 14430, 14432, 14433, 14436, 14439, 14448, 14449, 14451, 14453, 14454, 14455, 14456, 14459, 14460, 14463, 14464, 14465, 14466, 14468, 14470, 14471, 14474, 14475, 14477, 14480, 14484, 14485, 14486, 14487, 14489, 14490, 14493, 14494, 14498, 14500, 14505, 14506, 14507, 14508, 14509, 14510, 14511, 14515, 14516, 14517, 14518, 14520, 14521, 14522, 14523, 14524, 14525, 14527, 14528, 14529, 14535, 14537, 14539, 14540, 14541, 14542, 14546, 14548, 14549, 14552, 14556, 14557, 14558, 14559, 14561, 14563, 14564, 14568, 14569, 14570, 14571, 14572, 14575, 14581, 14585, 14587, 14593, 14594, 14595, 14597, 14601, 14604, 14607, 14608, 14613, 14617, 14626, 14628, 14632, 14634, 14637, 14639, 14640, 14642, 14646, 14650, 14651, 14653, 14655, 14657, 14662, 14665, 14668, 14671, 14672, 14673, 14675, 14676, 14677, 14679, 14680, 14681, 14685, 14686, 14688, 14691, 14693, 14694, 14695, 14700, 14701, 14702, 14706, 14707, 14711, 14715, 14717, 14718, 14719, 14720, 14723, 14726, 14728, 14731, 14732, 14734, 14735, 14736, 14737, 14738, 14739, 14743, 14745, 14746, 14747, 14748, 14749, 14750, 14751, 14754, 14755, 14756, 14758, 14762, 14763, 14765, 14768, 14776, 14779, 14782, 14783, 14786, 14787, 14788, 14790, 14792, 14793, 14794, 14795, 14796, 14800, 14802, 14805, 14806, 14810, 14811, 14812, 14813, 14817, 14818, 14819, 14820, 14821, 14823, 14824, 14830, 14831, 14832, 14834, 14835, 14836, 14837, 14839, 14840, 14844, 14847, 14848, 14854, 14855, 14856, 14857, 14858, 14859, 14860, 14861, 14868, 14869, 14871, 14874, 14875, 14877, 14879, 14884, 14885, 14887, 14888, 14890, 14891, 14892, 14893, 14894, 14895, 14898, 14900, 14903, 14905, 14906, 14907, 14910, 14911, 14912, 14915, 14918, 14920, 14921, 14922, 14923, 14926, 14928, 14931, 14935, 14938, 14939, 14941, 14942, 14943, 14948, 14949, 14952, 14954, 14955, 14957, 14958, 14959, 14963, 14967, 14970, 14973, 14974, 14977, 14981, 14983, 14986, 14987, 14988, 14991, 14993, 14997, 14998, 14999, 15000, 15001, 15002, 15003, 15004, 15009, 15010, 15011, 15012, 15014, 15015, 15017, 15019, 15020, 15021, 15025, 15026, 15027, 15033, 15036, 15038, 15040, 15042, 15046, 15048, 15050, 15052, 15053, 15059, 15060, 15065, 15066, 15068, 15069, 15070, 15072, 15073, 15074, 15075, 15076, 15077, 15080, 15081, 15086, 15087, 15088, 15089, 15090, 15092, 15097, 15098, 15099, 15100, 15101, 15105, 15107, 15108, 15112, 15114, 15115, 15117, 15118, 15121, 15122, 15123, 15125, 15128, 15135, 15136, 15137, 15138, 15139, 15141, 15142, 15146, 15150, 15151, 15153, 15155, 15156, 15167, 15168, 15171, 15173, 15174, 15179, 15184, 15185, 15187, 15188, 15192, 15194, 15195, 15196, 15199, 15200, 15202, 15204, 15209, 15212, 15213, 15214, 15215, 15216, 15218, 15219, 15220, 15221, 15222, 15224, 15225, 15226, 15228, 15229, 15233, 15237, 15240, 15244, 15246, 15247, 15252, 15254, 15255, 15257, 15259, 15262, 15264, 15267, 15269, 15271, 15277, 15278, 15280, 15281, 15284, 15285, 15288, 15289, 15290, 15291, 15292, 15293, 15294, 15295, 15297, 15300, 15301, 15304, 15305, 15307, 15308, 15309, 15312, 15314, 15316, 15317, 15321, 15322, 15326, 15327, 15330, 15333, 15334, 15336, 15337, 15338, 15339, 15343, 15344, 15350, 15351, 15353, 15356, 15361, 15365, 15367, 15368, 15369, 15372, 15374, 15377, 15380, 15382, 15384, 15385, 15391, 15396, 15397, 15398, 15400, 15401, 15403, 15406, 15407, 15408, 15411, 15415, 15416, 15418, 15419, 15420, 15421, 15422, 15425, 15427, 15428, 15432, 15436, 15438, 15441, 15443, 15446, 15448, 15449, 15450, 15451, 15452, 15456, 15460, 15462, 15463, 15464, 15467, 15468, 15469, 15471, 15472, 15473, 15474, 15477, 15478, 15480, 15481, 15482, 15485, 15494, 15496, 15497, 15500, 15502, 15505, 15506, 15507, 15509, 15511, 15512, 15513, 15514, 15515, 15517, 15518, 15520, 15524, 15525, 15527, 15528, 15529, 15530, 15531, 15532, 15533, 15534, 15535, 15537, 15538, 15547, 15548, 15549, 15551, 15554, 15556, 15557, 15558, 15559, 15560, 15561, 15564, 15569, 15570, 15571, 15575, 15577, 15579, 15585, 15588, 15589, 15595, 15597, 15598, 15600, 15601, 15602, 15604, 15606, 15607, 15608, 15609, 15610, 15612, 15615, 15617, 15622, 15624, 15626, 15627, 15628, 15630, 15634, 15635, 15638, 15639, 15641, 15642, 15648, 15650, 15654, 15656, 15658, 15660, 15662, 15665, 15667, 15668, 15670, 15671, 15672, 15673, 15674, 15675, 15678, 15679, 15680, 15682, 15684, 15685, 15686, 15687, 15689, 15692, 15693, 15697, 15701, 15705, 15706, 15707, 15709, 15710, 15713, 15714, 15716, 15717, 15718, 15719, 15721, 15727, 15728, 15729, 15733, 15734, 15736, 15737, 15738, 15741, 15742, 15743, 15747, 15750, 15752, 15754, 15755, 15756, 15762, 15763, 15765, 15769, 15770, 15771, 15775, 15777, 15779, 15781, 15782, 15786, 15789, 15791, 15792, 15793, 15794, 15795, 15797, 15800, 15801, 15802, 15803, 15804, 15805, 15807, 15809, 15813, 15814, 15815, 15817, 15819, 15820, 15821, 15824, 15825, 15826, 15827, 15829, 15830, 15833, 15835, 15836, 15837, 15838, 15839, 15844, 15845, 15846, 15847, 15848, 15849, 15850, 15851, 15853, 15854, 15855, 15859, 15860, 15864, 15866, 15867, 15868, 15869, 15870, 15872, 15873, 15876, 15877, 15881, 15882, 15885, 15888, 15891, 15899, 15900, 15901, 15902, 15903, 15905, 15906, 15907, 15913, 15914, 15918, 15919, 15920, 15921, 15924, 15927, 15928, 15929, 15932, 15935, 15943, 15946, 15948, 15950, 15952, 15953, 15955, 15958, 15962, 15963, 15964, 15966, 15968, 15969, 15972, 15975, 15977, 15980, 15981, 15982, 15983, 15984, 15985, 15986, 15989, 15990, 15993, 15994, 16003, 16004, 16005, 16007, 16009, 16010, 16013, 16014, 16015, 16017, 16018, 16019, 16020, 16022, 16023, 16026, 16027, 16031, 16032, 16033, 16034, 16035, 16040, 16042, 16048, 16050, 16051, 16052, 16053, 16055, 16058, 16060, 16061, 16062, 16066, 16067, 16068, 16074, 16075, 16077, 16078, 16082, 16083, 16084, 16085, 16088, 16090, 16091, 16092, 16093, 16095, 16097, 16100, 16101, 16102, 16106, 16107, 16110, 16112, 16113, 16114, 16116, 16117, 16119, 16120, 16121, 16126, 16127, 16128, 16130, 16131, 16132, 16134, 16135, 16136, 16138, 16140, 16144, 16145, 16146, 16147, 16148, 16154, 16155, 16156, 16158, 16159, 16160, 16165, 16166, 16167, 16168, 16169, 16170, 16174, 16175, 16176, 16177, 16178, 16181, 16182, 16183, 16186, 16187, 16188, 16190, 16191, 16193, 16198, 16199, 16201, 16202, 16209, 16210, 16216, 16221, 16222, 16227, 16230, 16231, 16232, 16233, 16236, 16239, 16241, 16242, 16244, 16246, 16254, 16255, 16256, 16259, 16260, 16261, 16262, 16263, 16267, 16271, 16273, 16274, 16276, 16277, 16278, 16279, 16280, 16281, 16283, 16285, 16287, 16289, 16292, 16293, 16296, 16297, 16298, 16302, 16304, 16309, 16312, 16313, 16314, 16315, 16316, 16317, 16318, 16319, 16320, 16321, 16326, 16327, 16329, 16331, 16332, 16333, 16335, 16341, 16344, 16347, 16350, 16353, 16354, 16355, 16357, 16358, 16363, 16364, 16366, 16367, 16373, 16375, 16376, 16377, 16379, 16380, 16382, 16383, 16386, 16387, 16388, 16389, 16391, 16392, 16394, 16395, 16396, 16397, 16399, 16401, 16404, 16405, 16407, 16409, 16415, 16416, 16420, 16422, 16423, 16425, 16426, 16428, 16429, 16430, 16432, 16433, 16435, 16436, 16437, 16438, 16439, 16441, 16442, 16446, 16447, 16450, 16454, 16459, 16463, 16464, 16465, 16469, 16471, 16472, 16477, 16478, 16480, 16481, 16482, 16486, 16487, 16488, 16489, 16490, 16492, 16495, 16496, 16497, 16498, 16499, 16504, 16505, 16507, 16509, 16511, 16512, 16513, 16514, 16516, 16517, 16518, 16521, 16522, 16523, 16528, 16530, 16532, 16534, 16538, 16540, 16543, 16544, 16545, 16547, 16553, 16554, 16568, 16570, 16573, 16576, 16580, 16582, 16583, 16584, 16586, 16592, 16593, 16594, 16596, 16597, 16600, 16601, 16602, 16605, 16612, 16614, 16615, 16617, 16618, 16619, 16625, 16626, 16627, 16629, 16630, 16636, 16637, 16638, 16639, 16640, 16641, 16643, 16647, 16648, 16649, 16650, 16651, 16653, 16654, 16655, 16656, 16658, 16660, 16665, 16666, 16670, 16673, 16674, 16675, 16676, 16677, 16678, 16682, 16684, 16686, 16687, 16689, 16690, 16691, 16693, 16694, 16695, 16696, 16697, 16700, 16702, 16703, 16706, 16708, 16709, 16710, 16713, 16715, 16716, 16720, 16721, 16723, 16724, 16725, 16726, 16731, 16732, 16733, 16736, 16737, 16738, 16740, 16741, 16742, 16743, 16744, 16750, 16752, 16753, 16755, 16757, 16758, 16759, 16760, 16766, 16768, 16769, 16771, 16773, 16774, 16778, 16788, 16789, 16794, 16796, 16797, 16801, 16804, 16806, 16807, 16808, 16810, 16817, 16821, 16822, 16824, 16825, 16826, 16829, 16830, 16833, 16835, 16836, 16837, 16838, 16839, 16844, 16846, 16849, 16851, 16852, 16857, 16858, 16859, 16861, 16864, 16866, 16867, 16870, 16873, 16874, 16875, 16881, 16882, 16883, 16884, 16885, 16886, 16888, 16890, 16891, 16893, 16897, 16898, 16899, 16900, 16902, 16906, 16907, 16909, 16914, 16915, 16916, 16920, 16922, 16927, 16928, 16929, 16930, 16931, 16932, 16933, 16937, 16939, 16942, 16944, 16945, 16946, 16948, 16949, 16950, 16953, 16954, 16955, 16956, 16957, 16960, 16961, 16963, 16965, 16967, 16968, 16970, 16971, 16972, 16973, 16975, 16976, 16978, 16981, 16985, 16986, 16988, 16989, 16996, 16999, 17002, 17003, 17004, 17005, 17011, 17015, 17017, 17018, 17021, 17025, 17026, 17030, 17031, 17032, 17033, 17035, 17036, 17037, 17038, 17042, 17044, 17046, 17047, 17048, 17050, 17053, 17055, 17058, 17061, 17063, 17064, 17066, 17069, 17070, 17071, 17072, 17075, 17078, 17082, 17083, 17084, 17085, 17087, 17092, 17093, 17094, 17095, 17098, 17102, 17103, 17105, 17107, 17108, 17110, 17112, 17114, 17118, 17128, 17130, 17138, 17140, 17143, 17147, 17148, 17151, 17152, 17153, 17154, 17156, 17157, 17158, 17163, 17164, 17170, 17176, 17181, 17182, 17185, 17187, 17188, 17189, 17192, 17193, 17194, 17198, 17199, 17200, 17201, 17202, 17204, 17205, 17207, 17208, 17211, 17215, 17218, 17220, 17221, 17224, 17225, 17227, 17230, 17232, 17233, 17236, 17237, 17238, 17239, 17241, 17243, 17244, 17245, 17246, 17247, 17248, 17250, 17251, 17255, 17257, 17260, 17262, 17264, 17265, 17268, 17271, 17272, 17273, 17277, 17278, 17279, 17280, 17285, 17287, 17291, 17295, 17296, 17297, 17299, 17301, 17304, 17305, 17306, 17307, 17309, 17310, 17311, 17312, 17318, 17322, 17324, 17326, 17327, 17328, 17329, 17332, 17333, 17334, 17337, 17338, 17339, 17340, 17343, 17344, 17346, 17347, 17349, 17350, 17351, 17354, 17355, 17356, 17357, 17363, 17364, 17365, 17367, 17370, 17371, 17375, 17377, 17379, 17380, 17384, 17385, 17386, 17390, 17391, 17392, 17393, 17394, 17395, 17399, 17400, 17402, 17404, 17412, 17417, 17419, 17421, 17422, 17423, 17424, 17427, 17430, 17431, 17432, 17433, 17434, 17435, 17436, 17444, 17446, 17449, 17450, 17455, 17457, 17458, 17459, 17461, 17462, 17463, 17464, 17465, 17466, 17467, 17468, 17469, 17471, 17475, 17476, 17477, 17478, 17479, 17484, 17488, 17489, 17490, 17491, 17492, 17493, 17495, 17496, 17499, 17502, 17503, 17507, 17508, 17511, 17513, 17515, 17516, 17519, 17520, 17521, 17528, 17529, 17530, 17533, 17535, 17538, 17539, 17541, 17542, 17545, 17546, 17547, 17550, 17551, 17552, 17554, 17555, 17556, 17559, 17560, 17561, 17562, 17564, 17567, 17569, 17572, 17575, 17577, 17578, 17579, 17581, 17582, 17583, 17588, 17589, 17591, 17595, 17597, 17599, 17602, 17603, 17607, 17610, 17611, 17612, 17614, 17617, 17618, 17619, 17622, 17624, 17625, 17627, 17630, 17631, 17632, 17634, 17635, 17636, 17637, 17641, 17642, 17643, 17649, 17650, 17651, 17652, 17654, 17655, 17657, 17658, 17661, 17662, 17663, 17666, 17668, 17672, 17674, 17676, 17678, 17679, 17680, 17681, 17683, 17686, 17692, 17694, 17696, 17697, 17698, 17699, 17700, 17702, 17704, 17707, 17710, 17711, 17712, 17713, 17714, 17715, 17717, 17718, 17720, 17723, 17725, 17729, 17730, 17731, 17737, 17739, 17740, 17743, 17747, 17751, 17752, 17753, 17754, 17755, 17758, 17764, 17765, 17766, 17768, 17769, 17770, 17773, 17779, 17781, 17783, 17784, 17788, 17789, 17791, 17792, 17793, 17795, 17796, 17798, 17799, 17801, 17802, 17803, 17806, 17807, 17808, 17811, 17816, 17818, 17819, 17820, 17825, 17827, 17828, 17829, 17830, 17832, 17833, 17834, 17835, 17836, 17837, 17838, 17840, 17844, 17846, 17851, 17852, 17858, 17860, 17863, 17864, 17865, 17867, 17868, 17870, 17872, 17875, 17876, 17881, 17887, 17889, 17891, 17892, 17894, 17897, 17898, 17902, 17905, 17906, 17909, 17911, 17912, 17913, 17914, 17917, 17919, 17920, 17921, 17922, 17926, 17927, 17929, 17932, 17933, 17941, 17943, 17945, 17946, 17949, 17952, 17954, 17958, 17962, 17963, 17965, 17968, 17969, 17971, 17975, 17976, 17977, 17978, 17982, 17983, 17984, 17989, 17990, 17993, 17996, 18001, 18003, 18005, 18010, 18012, 18013, 18014, 18015, 18016, 18018, 18019, 18020, 18021, 18022, 18024, 18025, 18031, 18032, 18033, 18035, 18038, 18040, 18042, 18043, 18044, 18045, 18049, 18050, 18051, 18052, 18054, 18055, 18057, 18058, 18061, 18062, 18063, 18064, 18066, 18069, 18072, 18073, 18074, 18076, 18078, 18079, 18081, 18083, 18084, 18085, 18086, 18089, 18091, 18098, 18102, 18104, 18106, 18107, 18109, 18112, 18113, 18116, 18118, 18119, 18122, 18126, 18127, 18128, 18129, 18130, 18132, 18135, 18136, 18138, 18139, 18140, 18141, 18142, 18143, 18147, 18148, 18149, 18151, 18152, 18155, 18158, 18164, 18169, 18170, 18171, 18172, 18173, 18174, 18176, 18177, 18178, 18179, 18180, 18182, 18183, 18184, 18186, 18191, 18192, 18194, 18195, 18196, 18197, 18198, 18199, 18200, 18201, 18202, 18206, 18208, 18209, 18210, 18212, 18213, 18217, 18218, 18222, 18223, 18226, 18228, 18229, 18230, 18231, 18233, 18235, 18238, 18240, 18241, 18242, 18244, 18246, 18247, 18251, 18252, 18257, 18258, 18261, 18267, 18269, 18270, 18271, 18274, 18278, 18279, 18280, 18281, 18284, 18285, 18286, 18287, 18288, 18289, 18291, 18292, 18293, 18298, 18301, 18302, 18309, 18310, 18312, 18314, 18315, 18316, 18319, 18320, 18323, 18324, 18326, 18327, 18328, 18329, 18331, 18336, 18337, 18339, 18342, 18345, 18346, 18350, 18352, 18354, 18355, 18356, 18357, 18358, 18359, 18360, 18365, 18366, 18369, 18370, 18371, 18374, 18375, 18376, 18379, 18381, 18382, 18384, 18385, 18386, 18387, 18389, 18390, 18391, 18393, 18396, 18398, 18399, 18400, 18403, 18407, 18410, 18415, 18417, 18422, 18423, 18424, 18425, 18427, 18429, 18430, 18432, 18433, 18434, 18437, 18439, 18440, 18441, 18443, 18445, 18446, 18448, 18458, 18463, 18469, 18470, 18473, 18474, 18475, 18476, 18478, 18482, 18484, 18486, 18487, 18489, 18492, 18494, 18499, 18500, 18503, 18506, 18507, 18509, 18510, 18513, 18514, 18521, 18524, 18529, 18531, 18533, 18534, 18536, 18537, 18539, 18545, 18546, 18548, 18550, 18552, 18553, 18554, 18555, 18557, 18559, 18561, 18563, 18566, 18569, 18571, 18572, 18573, 18574, 18575, 18577, 18580, 18583, 18587, 18588, 18589, 18590, 18591, 18592, 18593, 18594, 18595, 18597, 18598, 18600, 18602, 18603, 18606, 18609, 18610, 18611, 18613, 18616, 18617, 18619, 18630, 18632, 18633, 18635, 18636, 18637, 18638, 18639, 18641, 18643, 18644, 18646, 18647, 18648, 18651, 18652, 18653, 18654, 18655, 18658, 18659, 18660, 18666, 18668, 18669, 18671, 18672, 18673, 18674, 18675, 18677, 18678, 18680, 18683, 18684, 18694, 18695, 18696, 18699, 18702, 18703, 18704, 18707, 18708, 18710, 18714, 18715, 18716, 18717, 18718, 18721, 18724, 18726, 18729, 18730, 18731, 18732, 18733, 18734, 18736, 18737, 18738, 18740, 18741, 18743, 18745, 18746, 18747, 18751, 18753, 18754, 18756, 18758, 18762, 18764, 18765, 18766, 18770, 18772, 18774, 18776, 18777, 18779, 18782, 18786, 18787, 18795, 18796, 18799, 18801, 18802, 18805, 18807, 18808, 18809, 18812, 18813, 18814, 18816, 18822, 18823, 18826, 18827, 18828, 18829, 18830, 18831, 18832, 18834, 18836, 18839, 18842, 18845, 18848, 18849, 18850, 18851, 18852, 18853, 18854, 18857, 18860, 18864, 18868, 18871, 18872, 18874, 18876, 18878, 18882, 18892, 18893, 18894, 18897, 18899, 18901, 18902, 18906, 18907, 18908, 18909, 18911, 18912, 18913, 18915, 18916, 18918, 18919, 18920, 18929, 18933, 18934, 18936, 18938, 18940, 18948, 18951, 18952, 18953, 18955, 18956, 18958, 18959, 18963, 18965, 18967, 18968, 18971, 18972, 18977, 18979, 18980, 18981, 18984, 18985, 18986, 18987, 18988, 18989, 18991, 18992, 18994, 18996, 18997, 18998, 19004, 19006, 19008, 19010, 19011, 19012, 19013, 19014, 19015, 19017, 19018, 19022, 19028, 19029, 19031, 19032, 19037, 19039, 19040, 19042, 19043, 19044, 19045, 19047, 19049, 19051, 19053, 19058, 19061, 19065, 19070, 19072, 19073, 19074, 19075, 19078, 19080, 19081, 19082, 19083, 19084, 19085, 19088, 19091, 19096, 19097, 19102, 19104, 19109, 19110, 19111, 19113, 19115, 19116, 19117, 19119, 19120, 19121, 19123, 19128, 19130, 19133, 19135, 19136, 19138, 19140, 19148, 19152, 19153, 19154, 19155, 19156, 19158, 19159, 19161, 19163, 19164, 19166, 19169, 19170, 19173, 19174, 19177, 19178, 19179, 19183, 19185, 19186, 19187, 19189, 19191, 19192, 19193, 19196, 19198, 19199, 19200, 19202, 19203, 19204, 19205, 19208, 19209, 19213, 19215, 19218, 19220, 19224, 19226, 19227, 19228, 19229, 19230, 19236, 19239, 19241, 19243, 19246, 19247, 19248, 19249, 19250, 19252, 19253, 19254, 19255, 19256, 19259, 19262, 19263, 19264, 19265, 19271, 19272, 19273, 19274, 19278, 19279, 19280, 19282, 19283, 19284, 19285, 19289, 19290, 19291, 19293, 19298, 19299, 19300, 19301, 19302, 19304, 19306, 19307, 19309, 19315, 19316, 19317, 19319, 19320, 19321, 19322, 19323, 19325, 19328, 19329, 19331, 19333, 19334, 19338, 19339, 19340, 19342, 19345, 19346, 19349, 19351, 19353, 19354, 19355, 19356, 19357, 19358, 19359, 19360, 19363, 19364, 19365, 19367, 19368, 19369, 19370, 19373, 19375, 19376, 19378, 19379, 19385, 19386, 19389, 19394, 19397, 19398, 19400, 19401, 19402, 19404, 19405, 19407, 19409, 19410, 19413, 19414, 19415, 19416, 19418, 19419, 19420, 19421, 19423, 19426, 19428, 19429, 19432, 19434, 19436, 19437, 19439, 19440, 19443, 19445, 19446, 19448, 19450, 19453, 19455, 19457, 19458, 19459, 19462, 19463, 19466, 19469, 19472, 19473, 19475, 19478, 19480, 19481, 19484, 19488, 19494, 19495, 19496, 19498, 19500, 19502, 19505, 19515, 19516, 19518, 19525, 19528, 19533, 19534, 19535, 19536, 19537, 19539, 19540, 19542, 19543, 19548, 19549, 19551, 19552, 19553, 19554, 19556, 19557, 19559, 19561, 19562, 19564, 19565, 19566, 19567, 19568, 19569, 19570, 19574, 19577, 19578, 19584, 19585, 19586, 19588, 19591, 19595, 19596, 19598, 19600, 19603, 19604, 19605, 19606, 19607, 19609, 19611, 19612, 19614, 19618, 19619, 19620, 19622, 19624, 19625, 19627, 19630, 19631, 19633, 19635, 19636, 19637, 19638, 19639, 19640, 19641, 19647, 19649, 19651, 19653, 19655, 19659, 19661, 19664, 19665, 19667, 19668, 19672, 19674, 19677, 19680, 19681, 19682, 19687, 19688, 19690, 19691, 19693, 19694, 19696, 19698, 19699, 19701, 19703, 19704, 19706, 19709, 19712, 19713, 19719, 19721, 19722, 19724, 19725, 19729, 19731, 19738, 19741, 19742, 19748, 19749, 19750, 19752, 19753, 19754, 19756, 19757, 19758, 19759, 19760, 19763, 19765, 19766, 19767, 19769, 19771, 19772, 19773, 19775, 19777, 19778, 19779, 19781, 19783, 19784, 19787, 19788, 19789, 19794, 19796, 19797, 19799, 19802, 19803, 19804, 19805, 19806, 19809, 19810, 19811, 19812, 19816, 19827, 19828, 19829, 19831, 19832, 19837, 19839, 19840, 19841, 19842, 19843, 19844, 19845, 19846, 19847, 19854, 19856, 19857, 19859, 19860, 19861, 19863, 19865, 19866, 19867, 19869, 19870, 19872, 19873, 19874, 19879, 19882, 19884, 19887, 19890, 19893, 19894, 19896, 19897, 19898, 19905, 19906, 19909, 19910, 19912, 19913, 19914, 19915, 19921, 19927, 19929, 19931, 19932, 19933, 19936, 19937, 19939, 19941, 19945, 19946, 19949, 19953, 19954, 19955, 19956, 19959, 19960, 19961, 19964, 19965, 19966, 19970, 19973, 19974, 19975, 19977, 19979, 19982, 19985, 19986, 19988, 19996, 19997, 19999, 20000};

  // input={40, 51, 37, 38, 27, 50, 14, 5, 42, 53, 61, 20, 21, 16, 15, 22, 63, 30, 25, 47, 6, 19, 17, 23, 13, 56, 26, 9, 52, 45, 24, 12, 1, 7, 62, 41, 28, 32, 58, 8, 0, 29, 39, 35, 43, 60, 57, 59, 11, 31, 3, 44, 54, 46, 36, 4, 48, 2, 34, 18};
// input={104, 89, 69, 74, 25, 31, 23, 75, 57, 81, 0, 13, 60, 61, 119, 71, 79, 46, 124, 93, 22, 32, 112, 39, 102, 94, 41, 28, 101, 64, 17, 77, 21, 35, 83, 99, 88, 54, 53, 26, 92, 18, 55, 36, 48, 125, 68, 91, 49, 42, 4, 33, 27, 44, 84, 107, 12, 6, 34, 66, 123, 113, 5, 30, 16, 38, 116, 15, 29, 37, 97, 115, 73, 62, 78, 96, 87, 50, 63, 45, 8, 7, 10, 100, 11, 19, 105, 82, 76, 20, 9, 98, 108, 1, 52, 51, 2, 118, 120, 110, 122, 59, 103, 86, 109, 3, 58, 65, 126, 106, 95, 80, 70, 72, 90, 127, 114, 56, 121, 67, 85, 111, 14, 117, 40, 47, 24, 43};
// input={0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31};
  if(outputToFile){
    freopen("output.txt","w",stdout);
  }

  // std::vector<std::string> fvalues={"000000","000001","000100","001000","000101","001010","001100","100100","001101","001110","110010","001111"};
  // std::vector<std::string> fvalues={"000000","000001","000010","000100","001000","000101","001010","001100","100100","001101","001110","110010","001111"};
  std::vector<std::string> fvalues;
  genInput(input,bitsize,fvalues);
  printV(input);
  printV(fvalues);

  auto begin = std::chrono::high_resolution_clock::now();
  bdt fbdt=buildcompactbdt(fvalues);
  auto end = std::chrono::high_resolution_clock::now();

  // for(int i=0;i<fvalues.size();i++){
  //   std::cout << evalcompactbdt(fbdt,fvalues[i])<<" | "<< std::bitset<bitsize>(fvalues[i]) << '\n';
  // }
  //
  // std::cout << evalcompactbdt(fbdt,"1111") << '\n';

  // testCorrectness(fbdt,input);

  // printTree(fbdt,fvalues[0].size()+1);
std::cerr <<'\n';

// std::cout << evalcompactbdt(fbdt,"0100") << '\n';

  int nodeNum=getTreeNodeNum(fbdt);
  std::cout << "\n\n the tree has "<<nodeNum << " nodes\ncompare to tree in ass1 require "<<getAss1NodeNum()<<" node\nreduced by "<<((getAss1NodeNum()-nodeNum)*100/getAss1NodeNum())<<"%\n";
  double t=std::chrono::duration_cast<std::chrono::nanoseconds>(end-begin).count();
  std::cout << "\n the buildcompactbdt function takes "<< t/1000000 << "ms\n";
  std::cerr <<'\n';

  deltree(fbdt);
  return 0;
}

void genMinterm(const std::vector<std::string>& fvalues, std::vector<term>& minterms){ //checked order right
  for(int i=0;i<fvalues.size();i++){
    int minterm=0;
    for(int p=fvalues[0].size()-1;p>=0;--p){
      if(is1(fvalues[i][p])){
        minterm=minterm*2+1;
      }else{
        minterm=minterm*2;
      }
    }
    std::cout << "from Xn <-- X1: ";
    std::cout << std::bitset<bitsize>(minterm) << '\n';
    minterms[i]=minterm;
  }
}

bool is1(char c){
  if(int(c)==48){
  //check if the char is "0"
    return false;
  }else{
  // treat not "0" as 1
    return true;
  }
}

template <class T>
bool notRepeated(std::vector<T>& v, T a){
  for(int i=0;i<v.size();i++){
    if(v[i]==a){
      return false;
    }
  }
  v.push_back(a);
  return true;
}

bdt newnode(std::string val, bdt left, bdt right){
  bdt pt=new bdnode;
  pt->val=val;
  pt->left=left;
  pt->right=right;
  return pt;
}

// modeified from https://stackoverflow.com/questions/23856596/how-to-count-leading-zeros-in-a-32-bit-unsigned-integer
inline int leading1(uint64_t x){ ///01000 returns 4
  x=x|(x>>1);
  x=x|(x>>2);
  x=x|(x>>4);
  x=x|(x>>8);
  x=x|(x>>16);
  x=x|(x>>32);

  return popcount(x);

}

// copyed from https://en.wikipedia.org/wiki/Hamming_weight
const uint64_t m1  = 0x5555555555555555; //binary: 0101...
const uint64_t m2  = 0x3333333333333333; //binary: 00110011..
const uint64_t m4  = 0x0f0f0f0f0f0f0f0f; //binary:  4 zeros,  4 ones ...
const uint64_t h01 = 0x0101010101010101; //the sum of 256 to the power of 0,1,2,3...
inline int popcount(uint64_t x){
    x -= (x >> 1) & m1;             //put count of each 2 bits into those 2 bits
    x = (x & m2) + ((x >> 2) & m2); //put count of each 4 bits into those 4 bits
    x = (x + (x >> 4)) & m4;        //put count of each 8 bits into those 8 bits
    return (x * h01) >> 56;  //returns left 8 bits of x + (x<<8) + (x<<16) + (x<<24) + ...

}


// inline int popcount(long a){
//   return __builtin_popcountl(a);
// }

bdt buildcompactbdt(const std::vector<std::string>& fvalues){
  std::vector<implicant> primes;

    if(!startwithPI){
            std::cout << "start building trees" << '\n';
            /// write the implementation for the function here

            //convert to minterm
            //string cant be termer than 64 bit, using template to solve this
            std::cerr << "gen minterms" << '\n';
            std::vector<term> minterms(fvalues.size());
            genMinterm(fvalues,minterms);

            //find prime implicants by useing Quine–McCluskey
            ItmList itmList;

            //first pass
            // std::cout << "process first pass" << '\n';
            std::cerr << "pepare to gen prime implicant" << '\n';
            intermittent* itmPtr=new intermittent();
            itmPtr->construct(0,fvalues[0].size());
            for(int i=0;i<minterms.size();i++){
              itmPtr->add(minterms[i]);
            }
            std::cerr << "gen prime implicant" << '\n';
            itmPtr->compareAll(0,primes,itmList);

            delete itmPtr;

            //all other path
            while (!itmList.empty()) {//!itmList.empty()
              // std::cout << "process "<<debugcount<<" pass" << '\n';
              ItmList tempList;
              ///DEBUG
              if(!tempList.empty()){
                std::cout << "ERROE, init tempList is not empty" << '\n';
              }
              //END_DEBUG
              for(ItmList::const_iterator  itr=itmList.begin();itr!=itmList.end();++itr ){//use iterator  if throw error
                intermittent* itmPtr=itr->second;
                // insert alternative here to exist earily
                // std::cout << "1 | ";
                itmPtr->compareAll(itr->first,primes,tempList);
                delete itmPtr; // avoid memroy leak & same memroy when map swap
              }

              itmList.swap(tempList);
              std::cout << "next iteration" << '\n';
            }


            std::cout << "\n====================================\nsimplifted min term are:" << '\n';
            for(int x=0;x<primes.size();x++){
              std::cout << "mask: "<<std::bitset<bitsize>(primes[x].mask)<<" minterm: " <<std::bitset<bitsize>(primes[x].minterm)<< '\n';
            }
            for(int x=0;x<primes.size();x++){
              printPrime(primes[x].mask,primes[x].minterm,fvalues[0].size());
            }

            //reduce no. of term of prime implicants by using Petrick's method
            // PIchart chart;
            // for(int i=0;i<minterms.size();i++){
            //   chart[minterms[i]]={};
            // }
            //
            // for(int i=0;i<primes.size();i++){
            //   int counter=popcount(primes[i].mask);
            //   term max=(1<<counter)-1;
            //   int digit=0;
            //   std::vector<int> shifts;
            //   shifts.reserve(counter);
            //
            //   //locate 1 in mask
            //   while (counter>0) {
            //     if((1L<<digit)&primes[i].mask){
            //       --counter;
            //       shifts.push_back(digit);
            //     }
            //     ++digit;
            //   }
            //   //produce all minterm it repersent
            //   for(term j=0;j<=max;j++){
            //     //iterate all combination
            //     term mask=0;
            //     for(int s=0;s<shifts.size();s++){
            //       if(j&(1L<<s)){
            //         mask=mask|(1L<<shifts[s]);
            //       }
            //     }
            //
            //     //minterm is primes[i].minterm|mask, for all the current primes[i], for all i
            //     printPrime(0,minterm,bitsize);
            //     term minterm=primes[i].minterm|mask;
            //     chart[minterm].push_back(primes[i]);
            //     chart[minterm].push_back(primes[i]);
            //
            //   }
            // }
    }else{
            bool fromfvalues=true;
            std::string PI;

            std::cout << "is it from fvalues? 1 or 0" << '\n';
            std::cin >> PI;
            if(PI=="0"){
              fromfvalues=false;
            }
            PI="";

            std::cout << "debug file, enter prime implicant" << '\n';
            std::cin >> PI;
            while (PI!="c"){
              appedPrime(PI,primes,fromfvalues);
              PI="";
              std::cin >> PI;
            };
            std::cout << "/* message */" << '\n';
    }



    //make tree
    bdt rootpt = newnode();
    uint64_t temp1=1; //use 1 insetad of (1ULL<<fvalues[0].size())-1) due to strange behavier of  1ULL<<fvalues[0].size() evaulated as 1???? should be 0
    uint64_t temp2=fvalues[0].size();
    temp1=temp1<<temp2;
    std::cout <<"x"<< temp1 << '\n';
    recTreeConstructor(rootpt,primes,(1ULL<<fvalues[0].size())-1);

    return rootpt;
}

void recTreeConstructor(bdnode* node,std::vector<implicant>& primes, term nodeRemains){//nodeRemains => 0 for not used node, 1 for used node
  if(primes.size()==0){
    //check if case for 0, empty primes
    node->val="0";
    return;
  }else{
    int maskSum;

    //check if case for 1, one prime with --------
    int maxMaskCount=popcount(nodeRemains);
    std::cout << maxMaskCount << '\n';
    std::vector<int> maskCount(primes.size(),0);
    for(int i=0;i<primes.size();i++){
      std::cout << "/* message */" << '\n';
      int cm=popcount(primes[i].mask);
      if(cm==maxMaskCount){
        node->val="1";
        return; //terminate loop
      }
      maskCount[i]=cm;
      maskSum=maskSum+cm;
    }

    //check if no mask, no "-"; use tree builder in ass1
    //not nessuary for correctness, speed up in case with no "-"
    // if(maskSum==0){
    //
    //   return;
    // }

    // hestristc, find node to chooice as mask next
    // direction of scan MSB <-- <-- LSB
    bitCount cnt; //no need to in struct move it to function
    unsigned int mincount=(int)-1;//get 0xffff....
    int optimalDigit;

    cnt.construct(primes);
    int counter=popcount(nodeRemains);
    int digit=0;
    std::cout << "rec" << '\n';
    while (counter>0) {
      if((1ULL<<digit)&nodeRemains){
        counter--;
        //node that is not in the tree, chooice between these
        std::cout << "digit"<<digit<<": "<<cnt.get(digit) << '\n';
        if(cnt.get(digit)<mincount /*|| (cnt.get(digit)==mincount && maskCount[]) */){

          optimalDigit=digit;
          mincount=cnt.get(digit);
        }
      }
      digit++;
    }
    node->val="x"+std::to_string(optimalDigit+1);

    //RecCall, maske sub tree
    std::vector<implicant> leftPrimes;//left node, 0
    std::vector<implicant> rightPrimes;//right node, 1
    term optimalMask=1<<optimalDigit;
    for(int i=0;i<primes.size();i++){
      if( (primes[i].minterm&optimalMask)==0){
        //when minterm[digit]==0, mask[digit] may =1
        if( (primes[i].mask&optimalMask)!=0 ){
          //mask is one, need normalise mask and copy to both right & left listLb
          implicant temp=primes[i];
          temp.mask=temp.mask & (~optimalMask);
          leftPrimes.push_back(temp);
          rightPrimes.push_back(temp);
        }else{
          //mask is 0, normal case
          leftPrimes.push_back(primes[i]);
        }
      }else{
        //minterm[digit]==1 -> mask[digit] cant be 1, no need to check
        rightPrimes.push_back(primes[i]);
      }
    }

    // node->val="x"+
    node->left=newnode();
    recTreeConstructor(node->left,leftPrimes, nodeRemains& (~optimalMask));

    node->right=newnode();
    recTreeConstructor(node->right,rightPrimes, nodeRemains& (~optimalMask));
  }
}

std::string evalcompactbdt(bdt t, const std::string& input){
    while(t->val.size()>1){
      if(is1(input[stoi(t->val.substr(1))-1])){
        //right node
        t=t->right;
      }else{
        //left node
        t=t->left;
      }
    }

    return t->val;
}




/// add here the implementation for any other functions you wish to define and use
//DEBUG FUNC
void appedPrime(std::string str, std::vector<implicant>& primes, bool fval){
  term mask=0;
  term minterm=0;
  // term printmask=1;
  if(fval){
    for(int i=0;i<str.length();i++){
      if(int(str[i])==45){
        mask=mask|(1ULL<<i);
      }else if(int(str[i]==49)){
        minterm=minterm|(1ULL<<i);
      }
    }
  }else{
    for(int i=0;i<str.length();i++){
      if(int(str[i])==45){
        mask=mask|(1ULL<<(str.length()-i-1));
      }else if(int(str[i]==49)){
        minterm=minterm|(1ULL<<(str.length()-i-1));
      }
    }
  }

  primes.push_back((implicant){mask,minterm});
  printPrime(mask,minterm,bitsize);
}

  template <class T>
  int find(std::vector<T>& v, T a){
    for(int i=0;i<v.size();i++){
      if(v[i]==a){
        return i;
      }
    }
    // v.push_back(a);
    return -1;
  }

  std::string getMinterm(term i){
    uint64_t printmask=1;
    std::string temp;
    for(int j=0;j<bitsize;j++){
      if(i&(printmask<<(j))){
        temp+='1';
      }else{
        temp+='0';
      }
    }
    return temp;
  }

  template <class T>
  void printV(std::vector<T>& v, char end, char m){
    for (int i=0;i<v.size();++i){
      std::cout << v[i]<<m;
    }
    std::cout << end;
  }

  template <class T>
  void printBit(std::vector<T>& v, char end, char m){
    for (int i=0;i<v.size();++i){
      std::bitset<bitsize> b(v[i]);
      std::cout << b<<m;
    }
    std::cout << end;
  }

  void printPrime(term mask,term minterm,int len,char end){
    term printmask=1;
    std::cout << "from Xn <-- X1: ";
    for(int i=len-1;i>=0;i--){
      if(mask&(printmask<<(i))){
        std::cout<<'-';
      }else{
        if(minterm&(printmask<<(i))){
          std::cout<<'1';
        }else{
          std::cout<<'0';
        }
      }
    }
    std::cout << end;
  }

  void genInput(std::vector<term>& in,int digit,std::vector<std::string>& out){
    term printmask=1;
    for(int i=0;i<in.size();i++){
      std::string temp;
      for(int j=0;j<digit;j++){
        if(in[i]&(printmask<<(j))){
          temp+='1';
        }else{
          temp+='0';
        }
      }
      // std::cout << in << '\n';
      out.push_back(temp);
    }
  }

  uint64_t getAss1NodeNum(){
    return (1ULL<<bitsize+1)-1;
  }

  void deltree(bdt t){
    if(t!=NULL){
      deltree(t->left);
      deltree(t->right);
      delete t;
    }
  }


  int getTreeNodeNum(bdnode*  t) {
    int count=0;
    getTreeNodeNumRec(t,count);
    return count;
  }

  void getTreeNodeNumRec(bdnode*  t,int& count){
    if(t!=NULL){
      count++;
      getTreeNodeNumRec(t->left,count);
      getTreeNodeNumRec(t->right,count);
    }
  }

  void printTreeRec( bdnode*  t, int depth,std::vector<std::string>& out){
    if(t!=NULL){
      // out[depth].append("\t"+(t->val));
      out[depth]=out[depth]+"  "+t->val;
      printTreeRec(t->left,depth+1,out);
      printTreeRec(t->right,depth+1,out);
    }
  }

  void printTree(bdt t, int depth){
    std::vector<std::string> out;

    for(int i=0;i<depth;i++){
      out.push_back("");
    }

    printTreeRec(t,0,out);

    for (int i=0;i<depth;i++){
      std::cout << i<<"\t| "<<out[i]  << '\n';
    }

  }

  bool testCorrectness(bdt rt, std::vector<term> correct){
    std::cerr << "test start" << '\n';
    term max=(1<<bitsize)-1;
    std::vector<term> outTerm;
    std::vector<bool> outBool;
    outTerm.reserve(correct.size());
    outBool.reserve(correct.size());


    for(term i=0;i<=max;i++){
      std::string temp=getMinterm(i);

      if(is1(evalcompactbdt(rt,temp)[0])){
        std::cout << temp<<"("<<i<<") " << ' '<<std::flush;
        outTerm.push_back(i);
        outBool.push_back(false);
      }
    }

    std::cout << "\n\n*************************************\n* all test done, generateing errors *\n*************************************\n";

    std::cout << "below should return 0, but should be 1:" << '\n';
    for(int i=0;i<correct.size();i++){
      int f=find(outTerm,correct[i]);
      if(f>=0){
        outBool[f]=true;
        // std::cout << outTerm[f] << '\n';
      }else{
        std::cout <<"term "<< getMinterm(outTerm[i])<< "("<<outTerm[i]<<")" << '\n';
      }
    }

    std::cout << "\nbelow should return 1, but should be 0:" << '\n';

    for(int i=0;i<outBool.size();i++){
      if(outBool[i]!=true){
        std::cout <<"term "<< getMinterm(outTerm[i])<< "("<<outTerm[i]<<")" << '\n';
      }
    }

    std::cout << "\nend of errors" << '\n';
  }

//END DEBUG FUNC
